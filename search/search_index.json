{"config":{"lang":["ja"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"FastAPI \u6700\u4f73\u5b9e\u8df5","text":"<p>\u6211\u4eec\u5728\u521b\u4e1a\u65f6\u4f7f\u7528\u7684\u5e76\u4e14\u81ea\u4ee5\u4e3a\u662f\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u60ef\u4f8b\u5217\u8868\u3002</p> <p>\u5728\u8fc7\u53bb 1.5 \u5e74\u7684\u751f\u4ea7\u4e2d\uff0c \u6211\u4eec\u4e00\u76f4\u5728\u505a\u51fa\u597d\u7684\u548c\u574f\u7684\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u51b3\u5b9a\u6781\u5927\u5730\u5f71\u54cd\u4e86\u6211\u4eec\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u3002 \u5176\u4e2d\u4e00\u4e9b\u503c\u5f97\u5206\u4eab\u3002</p>"},{"location":"#1-\u9879\u76ee\u7ed3\u6784-\u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","title":"1. \u9879\u76ee\u7ed3\u6784\u3002 \u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","text":"<p>\u6784\u5efa\u9879\u76ee\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u4f46\u6700\u597d\u7684\u7ed3\u6784\u662f\u4e00\u81f4\u3001\u76f4\u63a5\u4e14\u6ca1\u6709\u610f\u5916\u7684\u7ed3\u6784\u3002</p> <ul> <li>\u5982\u679c\u67e5\u770b\u9879\u76ee\u7ed3\u6784\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u9879\u76ee\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u7ed3\u6784\u53ef\u80fd\u4e0d\u6e05\u695a\u3002</li> <li>\u5982\u679c\u60a8\u5fc5\u987b\u6253\u5f00\u5305\u624d\u80fd\u4e86\u89e3\u5176\u4e2d\u5305\u542b\u54ea\u4e9b\u6a21\u5757\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u5c31\u4e0d\u6e05\u695a\u4e86\u3002</li> <li>\u5982\u679c\u6587\u4ef6\u7684\u91cd\u590d\u7387\u548c\u4f4d\u7f6e\u611f\u89c9\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u60a8\u7684\u9879\u76ee\u7ed3\u6784\u5f88\u7cdf\u7cd5\u3002</li> <li>\u5982\u679c\u67e5\u770b\u6a21\u5757\u7684\u4f4d\u7f6e\u53ca\u5176\u540d\u79f0\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u975e\u5e38\u7cdf\u7cd5\u3002</li> </ul> <p>@tiangolo \u63d0\u4f9b\u7684\u9879\u76ee\u7ed3\u6784\uff08\u6211\u4eec\u6309\u6587\u4ef6\u7c7b\u578b\uff08\u4f8b\u5982 api\u3001crud\u3001\u6a21\u578b\u3001\u6a21\u5f0f\uff09\u5206\u9694\u6587\u4ef6\uff09\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u6216\u8303\u56f4\u8f83\u5c0f\u7684\u9879\u76ee\uff0c\u4f46\u6211\u4eec\u65e0\u6cd5\u5c06\u5b83\u653e\u5165\u6211\u4eec\u5177\u6709\u5927\u91cf\u57df\u548c\u6a21\u5757\u7684\u6574\u4f53\u4e2d\u3002</p> <p>\u6211\u53d1\u73b0\u66f4\u5177\u53ef\u6269\u5c55\u6027\u548c\u53ef\u6f14\u5316\u6027\u7684\u7ed3\u6784\u662f\u53d7 Netflix \u7684 Dispatch \u542f\u53d1\u5e76\u7a0d\u4f5c\u4fee\u6539\u3002</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # \u672c\u5730\u914d\u7f6e\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # \u5916\u90e8\u670d\u52a1\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # \u5168\u5c40\u914d\u7f6e\n\u2502   \u251c\u2500\u2500 models.py  # \u5168\u5c40\u6a21\u578b\n\u2502   \u251c\u2500\u2500 exceptions.py  # \u5168\u5c40\u5f02\u5e38\n\u2502   \u251c\u2500\u2500 pagination.py  # \u5168\u5c40\u6a21\u5757 \u4f8b\u5982. pagination \u5206\u9875\n\u2502   \u251c\u2500\u2500 database.py  # \u6570\u636e\u5e93\u8fde\u63a5\u76f8\u5173\u7684\u4e1c\u897f\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>\u5c06\u6240\u6709\u57df\u76ee\u5f55\u5b58\u50a8\u5728 <code>src</code> \u6587\u4ef6\u5939\u4e2d<ol> <li><code>src/</code> - \u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u9ad8\u7ea7\u522b\uff0c\u5305\u542b\u901a\u7528\u6a21\u578b\u3001\u914d\u7f6e\u548c\u5e38\u91cf\u7b49\u3002</li> <li><code>src/main.py</code> - \u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u7528\u4e8e\u542f\u52a8 FastAPI \u5e94\u7528\u7a0b\u5e8f</li> </ol> </li> <li>\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684 router, schemas, models, \u7b49\u3002<ol> <li><code>router.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6838\u5fc3\uff0c\u662f\u6240\u6709\u8def\u7531\u63a5\u53e3\u7684\u5165\u53e3\u3002</li> <li><code>schemas.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684 pydantic\u7684\u6a21\u578b</li> <li><code>models.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6570\u636e\u5e93\u6a21\u578b</li> <li><code>service.py</code> - \u6a21\u5757\u7279\u6709\u7684\u4e1a\u52a1\u903b\u8f91</li> <li><code>dependencies.py</code> - \u8def\u7531\u4f9d\u8d56(Depends)</li> <li><code>constants.py</code> - \u6a21\u5757\u7279\u6709\u7684\u5e38\u91cf\u548c\u9519\u8bef\u7801\u5b9a\u4e49</li> <li><code>config.py</code> - \u4f8b\u5982\uff0c\u73af\u5883\u53d8\u91cf</li> <li><code>utils.py</code> - \u975e\u4e1a\u52a1\u903b\u8f91\u529f\u80fd\uff0c \u4f8b\u5982. \u54cd\u5e94\u89c4\u8303\u5316\u3001\u6570\u636e\u4e30\u5bcc\u7b49\u3002</li> <li><code>exceptions</code> - \u6a21\u5757\u7279\u6709\u7684\u4e00\u573a\uff0c\u4f8b\u5982. <code>PostNotFound</code>, <code>InvalidUserData</code></li> </ol> </li> <li>\u5f53\u5305\u9700\u8981\u6765\u81ea\u5176\u4ed6\u5305\u7684\u670d\u52a1\u6216\u4f9d\u8d56\u9879\u6216\u5e38\u91cf\u65f6 - \u4f7f\u7528\u663e\u5f0f\u6a21\u5757\u540d\u79f0\u5bfc\u5165\u5b83\u4eec</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # \u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e2a\u5305\u7684\u5e38\u91cf\u6a21\u5757\u4e2d\u90fd\u6709\u6807\u51c6\u9519\u8bef\u4ee3\u7801\n</code></pre>"},{"location":"#2-\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528-pydantic-\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","title":"2. \u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 Pydantic \u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","text":"<p>Pydantic \u5177\u6709\u4e00\u7ec4\u4e30\u5bcc\u7684\u529f\u80fd\u6765\u9a8c\u8bc1\u548c\u8f6c\u6362\u6570\u636e\u3002</p> <p>\u9664\u4e86\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5fc5\u586b\u548c\u975e\u5fc5\u586b\u5b57\u6bb5\u7b49\u5e38\u89c4\u529f\u80fd\u5916\uff0c</p> <p>Pydantic \u5185\u7f6e\u4e86\u5168\u9762\u7684\u6570\u636e\u5904\u7406\u5de5\u5177\uff0c\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u6709\u9650\u5141\u8bb8\u9009\u9879\u7684\u679a\u4e3e\u3001\u957f\u5ea6\u9a8c\u8bc1\u3001\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u7b49\u3002</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre>"},{"location":"#3-\u4f7f\u7528depends\u4f9d\u8d56\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","title":"3. \u4f7f\u7528Depends(\u4f9d\u8d56)\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","text":"<p>Pydantic \u53ef\u4ee5\u53ea\u9a8c\u8bc1\u6765\u81ea\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u503c\u3002</p> <p>\u4f7f\u7528\u4f9d\u8d56\u9879\u6839\u636e\u6570\u636e\u5e93\u7ea6\u675f\u9a8c\u8bc1\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5df2\u5b58\u5728\u3001\u672a\u627e\u5230\u7528\u6237\u7b49\u3002</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06\u6570\u636e\u9a8c\u8bc1\u653e\u5728\u4f9d\u8d56\u9879\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u6dfb\u52a0 <code>post_id</code> \u9a8c\u8bc1\u5e76\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u7f16\u5199\u76f8\u540c\u7684\u6d4b\u8bd5\u3002</p>"},{"location":"#4-\u4f9d\u8d56dependency\u94fe","title":"4. \u4f9d\u8d56(Dependency)\u94fe","text":"<p>\u4f9d\u8d56\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4f9d\u8d56\uff0c\u907f\u514d\u7c7b\u4f3c\u903b\u8f91\u7684\u4ee3\u7801\u91cd\u590d\u3002</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"#5-\u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb-\u7f13\u5b58\u4f9d\u8d56dependency\u8c03\u7528\u7ed3\u679c","title":"5. \u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb\u3002 \u7f13\u5b58\u4f9d\u8d56(Dependency)\u8c03\u7528\u7ed3\u679c","text":"<p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u65b0\u8ba1\u7b97 - \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFastAPI \u5c06\u4f9d\u8d56\u9879\u7684\u7ed3\u679c\u7f13\u5b58\u5728\u8bf7\u6c42\u7684\u8303\u56f4\u5185\u3002</p> <p>\u4f8b\u5982\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u8c03\u7528\u670d\u52a1 <code>get_post_by_id</code> \u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u5c06\u4e0d\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u8be5\u4f9d\u8d56\u9879\u65f6\u90fd\u8bbf\u95ee\u6570\u636e\u5e93 - \u53ea\u6709\u7b2c\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u7528\u5230\u3002</p> <p>\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u4f9d\u8d56\u5173\u7cfb\u89e3\u8026\u5230\u591a\u4e2a\u8f83\u5c0f\u7684\u51fd\u6570\u4e0a\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8f83\u5c0f\u7684\u57df\u4e0a\u8fd0\u884c\u5e76\u4e14\u66f4\u5bb9\u6613\u5728\u5176\u4ed6\u8def\u7531\u4e2d\u91cd\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 3 \u6b21 <code>parse_jwt_data</code>\uff1a</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code></li> </ol> <p>\u4f46\u662f <code>parse_jwt_data</code> \u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u3002</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n\"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"#6-\u9075\u5faa-rest-\u89c4\u8303","title":"6. \u9075\u5faa REST \u89c4\u8303","text":"<p>\u8bd1\u8005\u6ce8 - REST API \u8bbe\u8ba1\u89c4\u8303</p> <p>\u53c2\u8003 \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357 \u548c RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>\u5f00\u53d1 RESTful API \u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5728\u5982\u4e0b\u8def\u7531\u4e2d\u91cd\u7528\u4f9d\u8d56\u9879\uff1a</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8def\u5f84\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u53d8\u91cf\u540d\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u63a5\u53e3 <code>GET /profiles/:profile_id</code> \u548c <code>GET /creators/:creator_id</code> \u4e24\u8005\u90fd\u9a8c\u8bc1\u7ed9\u5b9a\u7684 <code>profile_id</code> \u662f\u5426\u5b58\u5728\uff0c\u4f46\u662f <code>GET /creators/:creator_id</code> \u8fd8\u68c0\u67e5\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u662f\u521b\u5efa\u8005\uff0c\u90a3\u4e48\u6700\u597d\u5c06 <code>creator_id</code> \u8def\u5f84\u53d8\u91cf\u91cd\u547d\u540d\u4e3a <code>profile_id</code> \u5e76\u5c06\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u94fe\u63a5\u8d77\u6765\u3002</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(\n    profile: Mapping = Depends(valid_profile_id)\n) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n\"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n\"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>\u4f7f\u7528 <code>/me</code> \u8def\u7531\u5b9a\u4e49\u6765\u8fd4\u56de\u5f53\u524d\u7528\u6237\u8d44\u6e90 (\u4f8b\u5982. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5b58\u5728 - \u56e0\u4e3aauth\u6821\u9a8c\u65e9\u5df2\u6821\u9a8c\u4e86\u5176\u662f\u5426\u5b58\u5728\u3002</li> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5c5e\u4e8e\u8bf7\u6c42\u8005</li> </ol>"},{"location":"#7-\u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684-io-\u64cd\u4f5c-\u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","title":"7. \u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684 I/O \u64cd\u4f5c, \u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","text":"<p>\u5728\u5e95\u5c42\uff0cFastAPI \u53ef\u4ee5\u6709\u6548\u5730\u5904\u7406 \u5f02\u6b65\u548c\u540c\u6b65 I/O \u64cd\u4f5c\u3002</p> <ul> <li>FastAPI \u5728\u7ebf\u7a0b\u6c60 \u4e2d\u8fd0\u884c<code>sync</code>(\u540c\u6b65)\u8def\u7531\uff0c\u963b\u585e I/O \u64cd\u4f5c\u4e0d\u4f1a\u963b\u6b62[\u4e8b\u4ef6\u5faa\u73af](https://docs.python.org/3/library/asyncio-eventloop.html\uff09\u6267\u884c\u4efb\u52a1\u3002</li> <li>\u5426\u5219\uff0c\u5982\u679c\u8def\u7531\u88ab\u5b9a\u4e49\u4e3a<code>async</code>\uff0c\u90a3\u4e48\u5b83\u4f1a\u901a\u8fc7<code>await</code>\u5b9a\u671f\u8c03\u7528\uff0c\u5e76\u4e14 FastAPI \u76f8\u4fe1\u60a8\u53ea\u4f1a\u6267\u884c\u975e\u963b\u585e I/O \u64cd\u4f5c\u3002</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u60a8\u672a\u80fd\u4fe1\u4efb\u5e76\u5728\u5f02\u6b65\u8def\u7531\u4e2d\u6267\u884c\u963b\u585e\u64cd\u4f5c\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u65e0\u6cd5\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1\uff0c\u76f4\u5230\u8be5\u963b\u585e\u64cd\u4f5c\u5b8c\u6210\u3002</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O\u963b\u585e\u64cd\u4f5c10\u79d2\n    pong = service.get_pong()  # \u4ece DB \u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O \u963b\u585e\u64cd\u4f5c 10 \u79d2\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n    pong = service.get_pong()  # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # \u5f02\u6b65\u963b\u585e I/O \u64cd\u4f5c\n    pong = await service.async_get_pong()  # \u5f02\u6b65\u963b\u585e I/O \u6570\u636e\u5e93\u8c03\u7528\n\n    return {\"pong\": pong}\n</code></pre> <p>\u5f53\u6211\u4eec\u8c03\u7528\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48</p> <code>GET /terrible-ping</code><code>GET /good-ping</code><code>GET /perfect-ping</code> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\u5faa\u73af\u548c\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5c06\u7b49\u5f85\u76f4\u5230 <code>time.sleep()</code> \u5b8c\u6210<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>time.sleep()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4f1a\u4e00\u76f4\u7b49\u5f85\u5e76\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u5728\u7b49\u5f85\u671f\u95f4\u670d\u52a1\u5668\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u7136\u540e, \u4e8b\u4ef6\u5faa\u73af\u548c\u6240\u6709\u4efb\u52a1\u4f1a\u5728\u961f\u5217\u4e2d\u4e00\u8d77\u7b49\u5f85\uff0c\u76f4\u5230<code>service.get_pong</code>\u6267\u884c\u5b8c\u6bd5\u3002<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>service.get_pong()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4ed6\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u670d\u52a1\u5668\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u3002<ol> <li>\u54cd\u5e94\u4e4b\u540e, \u670d\u52a1\u5668\u5f00\u59cb\u63a5\u53d7\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5c06\u6574\u4e2a\u8def\u7531 <code>good_ping</code> \u5206\u914d\u5230\u7ebf\u7a0b\u6c60\u4e2d, \u6c60\u4e2d\u6709\u5de5\u4f5c\u7ebf\u7a0b\u8d1f\u8d23\u8fd0\u884c\u8be5\u8def\u7531\u7ed1\u5b9a\u7684\u51fd\u6570\u3002</li> <li>\u5728 <code>good_ping</code> \u6267\u884c\u5176\u95f4, \u4e8b\u4ef6\u5faa\u73af\u4f1a\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u548c\u5de5\u4f5c\u7ebf\u7a0b\u7ed9\u4ed6\u4eec\uff0c (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)<ul> <li>\u5de5\u4f5c\u7ebf\u7a0b\u72ec\u7acb\u4e8e\u4e3b\u7ebf\u7a0b (\u6bd4\u5982. \u6211\u4eec\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f), \u5b83\u5c06\u7b49\u5f85 <code>time.sleep</code> \u5b8c\u6210\uff0c\u7136\u540e\u7b49\u5f85 <code>service.get_pong</code> \u5b8c\u6210\u3002</li> <li>Sync(\u540c\u6b65)\u64cd\u4f5c\u53ea\u4f1a\u963b\u585e\u5b50\u7ebf\u7a0b\uff0c\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u3002</li> </ul> </li> <li>\u7136\u540e <code>good_ping</code> \u5b8c\u6210\u4ed6\u7684\u5de5\u4f5c, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5f02\u6b65\u7b49\u5f85 <code>asyncio.sleep(10)</code></li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>asyncio.sleep(10)</code> \u5b8c\u6210\u65f6, \u670d\u52a1\u5668\u8f6c\u5230\u4e0b\u4e00\u884c\u5e76\u7b49\u5f85 <code>service.async_get_pong</code> \u5b8c\u6210\u3002</li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>service.async_get_pong</code> \u5b8c\u6210, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <p>\u7b2c\u4e8c\u4e2a\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0cnon-blocking awaitables (\u975e\u963b\u585e\u7b49\u5f85)\u6216\u8005\u53d1\u9001\u5230\u7ebf\u7a0b\u6c60\u7684\u64cd\u4f5c\u5fc5\u987b\u662fI/O\u5bc6\u96c6\u578b\u4efb\u52a1(\u6bd4\u5982: \u6253\u5f00\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8c03\u7528\u3001\u5916\u90e8API\u8c03\u7528\u7b49\u7b49)\u3002</p> <ul> <li>\u7b49\u5f85CPU\u5bc6\u96c6\u578b\u4efb\u52a1 (\u6bd4\u5982. \u8d1f\u8d23\u7684\u8ba1\u7b97, \u6570\u636e\u5904\u7406, \u89c6\u9891\u8f6c\u7801) \u662f\u6ca1\u6709\u4ef7\u503c\u7684\uff0c\u56e0\u4e3aCPU\u5fc5\u987b\u5de5\u4f5c\u624d\u80fd\u5b8c\u6210\u8ba1\u7b97\u4efb\u52a1, \u800cI/O\u64cd\u4f5c\u662f\u5916\u90e8\u7684\uff0c\u670d\u52a1\u5668\u5728\u7b49\u5f85\u8be5\u64cd\u4f5c\u5b8c\u6210\u65f6\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u53bb\u505a\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u7531\u4e8e GIL\uff0c\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u8fd0\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u4e5f\u4e0d\u662f\u6709\u6548\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cGIL \u4e00\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9 CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u6beb\u65e0\u7528\u5904\u3002</li> <li>\u5982\u679c\u4f60\u60f3\u4f18\u5316 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fdb\u884c\u5de5\u4f5c\u3002</li> </ul> <p>StackOverflow\u4e0a\u56f0\u60d1\u7528\u6237\u7684\u76f8\u5173\u95ee\u9898:</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597 - \u540c\u6837\u53ef\u4ee5\u770b\u770b \u6211\u7684\u56de\u7b54</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"#8-\u4ece\u7b2c-0-\u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","title":"8. \u4ece\u7b2c 0 \u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","text":"<p>\u62e5\u6709\u53ef\u63a7\u7684\u5168\u5c40\u57fa\u7840\u6a21\u578b\u4f7f\u6211\u4eec\u80fd\u591f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u6a21\u578b\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u6807\u51c6\u7684\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u6216\u4e3a\u57fa\u7840\u6a21\u578b\u7684\u6240\u6709\u5b50\u7c7b\u6dfb\u52a0\u4e00\u4e2a\u8d85\u7ea7\u65b9\u6cd5\u3002</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps \u8fd4\u56de\u5b57\u8282\uff0c\u4e3a\u4e86\u5339\u914d\u6807\u51c6\u7684 json.dumps, \u6211\u4eec\u9700\u8981\u89e3\u7801\u3002\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u7684\u81ea\u5b9a\u4e49 JSON \u7f16\u7801\u65b9\u6cd5\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n\"\"\"\u5728\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u503c\u4e2d\u5220\u9664\u5fae\u79d2\u3002\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u53ef\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u5b57\u5178\u3002\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u51b3\u5b9a\u5236\u4f5c\u4e00\u4e2a\u5168\u5c40\u57fa\u7840\u6a21\u578b\uff1a</p> <ul> <li>\u4f7f\u7528 orjson \u7528\u4e8e\u6570\u636e\u7684\u5e8f\u5217\u5316</li> <li>\u5728\u6240\u6709\u65e5\u671f\u683c\u5f0f\u4e2d\u5c06\u5fae\u79d2\u964d\u4e3a 0</li> <li>\u5c06\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u5e8f\u5217\u5316\u4e3a\u5177\u6709\u663e\u5f0f\u65f6\u533a\u7684\u6807\u51c6\u683c\u5f0f</li> </ul>"},{"location":"#9-\u6587\u6863docs","title":"9. \u6587\u6863(Docs)","text":"<ol> <li> <p>\u9664\u975e\u60a8\u7684 API \u662f\u516c\u5f00\u7684\uff0c\u5426\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9690\u85cf\u6587\u6863\u3002 \u4ec5\u5728\u9009\u5b9a\u7684\u73af\u5883\u4e2d\u660e\u786e\u663e\u793a\u5b83\u3002</p> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # \u89e3\u6790 .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # \u83b7\u53d6\u5f53\u524d\u73af\u5883\u540d\u79f0\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # \u5141\u8bb8\u663e\u793a\u6587\u6863\u7684\u73af\u5883\u540d\u79f0\u5217\u8868\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\n   app_configs[\"openapi_url\"] = None  # \u5c06\u6587\u6863\u7684 url \u8bbe\u7f6e\u4e3a null\n\napp = FastAPI(**app_configs)\n</code></pre> </li> <li> <p>\u5e2e\u52a9FastAPI\u751f\u6210\u901a\u4fd7\u6613\u61c2\u7684\u6587\u6863</p> </li> <li>\u8bbe\u7f6e <code>response_model</code>, <code>status_code</code>, <code>description</code>, \u7b49\u5b57\u6bb5.</li> <li>\u5982\u679c\u54cd\u5e94\u6a21\u578b\u548c\u72b6\u6001\u4e0d\u540c\uff0c\u4f7f\u7528 <code>responses</code> \u8def\u7531\u5c5e\u6027\u4e3a\u4e0d\u540c\u7684\u54cd\u5e94\u6dfb\u52a0\u6587\u6863</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # \u9ed8\u8ba4\u54cd\u5e94\u7684 pydantic \u6a21\u578b\n    status_code=status.HTTP_201_CREATED,  # \u9ed8\u8ba4\u72b6\u6001\u7801\n    description=\"\u6587\u6863\u63a5\u53e3\u7684\u6e05\u6670\u63cf\u8ff0\",\n    tags=[\"Endpoint Category\"],  # \u63a5\u53e3\u5206\u7c7b\n    summary=\"Summary of the Endpoint\",  # \u63a5\u53e3\u6982\u8981\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 200 \u54cd\u5e94\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 201 \u54cd\u5e94\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 202 \u54cd\u5e94\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>\u5373\u751f\u6210\u7684\u6587\u6863\u5c31\u50cf\u8fd9\u6837: </p>"},{"location":"#10-\u4f7f\u7528-pydantic-\u7684-basesettings-\u8fdb\u884c\u914d\u7f6e","title":"10. \u4f7f\u7528 Pydantic \u7684 BaseSettings \u8fdb\u884c\u914d\u7f6e","text":"<p>Pydantic \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177 \u6765\u89e3\u6790\u73af\u5883\u53d8\u91cf\u5e76\u4f7f\u7528\u5176\u9a8c\u8bc1\u5668\u5904\u7406\u5b83\u4eec\u3002</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre>"},{"location":"#11-sqlalchemy-\u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","title":"11. SQLAlchemy: \u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","text":"<p>\u6839\u636e\u60a8\u7684\u6570\u636e\u5e93\u7ea6\u5b9a\u660e\u786e\u8bbe\u7f6e\u7d22\u5f15\u7684\u547d\u540d\u4f18\u4e8e <code>sqlalchemy</code> \u81ea\u52a8\u547d\u540d\u3002</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre>"},{"location":"#12-\u8fc1\u79fb-alembic","title":"12. \u8fc1\u79fb: Alembic","text":"<ol> <li>\u8fc1\u79fb\u5fc5\u987b\u662f\u9759\u6001\u7684\u548c\u53ef\u6062\u590d\u7684\u3002 \u5982\u679c\u60a8\u7684\u8fc1\u79fb\u4f9d\u8d56\u4e8e\u52a8\u6001\u751f\u6210\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u552f\u4e00\u52a8\u6001\u7684\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5176\u7ed3\u6784\u3002</li> <li>\u751f\u6210\u5177\u6709\u63cf\u8ff0\u6027\u540d\u79f0\u548c slug \u7684\u8fc1\u79fb\u3002 Slug \u662f\u5fc5\u9700\u7684\uff0c\u5e94\u8be5\u89e3\u91ca\u8fd9\u4e9b\u53d8\u5316\u3002</li> <li>\u4e3a\u65b0\u8fc1\u79fb\u8bbe\u7f6e\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u4ef6\u6a21\u677f\u3002 \u6211\u4eec\u4f7f\u7528 <code>*date*_*slug*.py</code> \u6a21\u5f0f\uff0c\u4f8b\u5982 <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"#13-\u8bbe\u7f6e\u6570\u636e\u5e93\u8868\u5b57\u5178\u547d\u540d\u7ea6\u5b9a","title":"13. \u8bbe\u7f6e\u6570\u636e\u5e93(\u8868/\u5b57\u5178)\u547d\u540d\u7ea6\u5b9a","text":"<p>\u547d\u540d\u4fdd\u6301\u4e00\u81f4\u5f88\u91cd\u8981\u3002 \u6211\u4eec\u9075\u5faa\u7684\u4e00\u4e9b\u89c4\u5219\uff1a</p> <ol> <li>lower_case_snake (\u5c0f\u5199\u9a7c\u5cf0\u547d\u540d)</li> <li>\u5355\u6570\u5f62\u5f0f (\u4f8b\u5982. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>\u4f7f\u7528\u6a21\u5757\u524d\u7f00\u5bf9\u76f8\u4f3c\u8868\u8fdb\u884c\u5206\u7ec4, \u4f8b\u5982. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>\u8de8\u8868\u547d\u540d\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u5177\u4f53\u7684\u547d\u540d\u662f\u53ef\u4ee5\u7684, \u4f8b\u5982.</li> <li>\u5728\u6240\u6709\u8868\u4e2d\u4f7f\u7528 <code>profile_id</code>\uff0c\u4f46\u5982\u679c\u5176\u4e2d\u4e00\u4e9b\u53ea\u9700\u8981\u4f5c\u4e3a\u521b\u5efa\u8005\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528 <code>creator_id</code></li> <li>\u5728\u6240\u6709\u62bd\u8c61\u8868\uff0c\u5f62\u5982 <code>post_like</code> \u3001 <code>post_view</code> \u4e2d\u4f7f\u7528 <code>post_id</code> \uff0c\u4f46\u5728\u76f8\u5173\u6a21\u5757\u4e2d\u4f7f\u7528\u5177\u4f53\u547d\u540d\uff0c\u5982 <code>chapters.course_id</code> \u4e2d\u7684 <code>course_id</code> \u3002</li> <li><code>_at</code> \u4f5c\u4e3a <code>datetime</code> \u7c7b\u578b\u7684\u540e\u7f00</li> <li><code>_date</code> \u4f5c\u4e3a <code>date</code> \u7c7b\u578b\u7684\u540e\u7f00</li> </ol>"},{"location":"#14-\u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","title":"14. \u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","text":"<p>\u57fa\u4e8eDB\u5199\u96c6\u6210\u6d4b\u8bd5\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u5728\u5c06\u6765\u51fa\u73b0\u57fa\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u9519\u8bef\u3002</p> <p>\u7acb\u5373\u5f00\u59cb\u57fa\u4e8e\u5f02\u6b65\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u6d4b\u8bd5\uff0c \u4f8b\u5982. async_asgi_testclient \u6216 httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>\u9664\u975e\u4f60\u6709\u540c\u6b65\u5230\u6570\u636e\u5e93\u8fde\u63a5\uff08\u6253\u6270\u4e86\uff1f\uff09\u6216\u8005\u4e0d\u6253\u7b97\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\u3002</p>"},{"location":"#15-\u540e\u53f0\u4efb\u52a1\u4f7f\u7528-asynciocreate_task","title":"15. \u540e\u53f0\u4efb\u52a1\u4f7f\u7528 asyncio.create_task","text":"<p>BackgroundTasks \u53ef\u4ee5 \u6709\u6548\u8fd0\u884c \u6240\u6709\u7684\u963b\u585e\u548c\u975e\u963b\u585eI/O\u64cd\u4f5c, \u5c31\u50cfFastAPI \u5904\u7406\u963b\u585e\u8def\u7531\u4e00\u6837\u3002 (<code>sync</code>(\u540c\u6b65)\u4efb\u52a1\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c, \u800c <code>async</code>(\u5f02\u6b65) \u4eba\u7269\u5219\u7b49\u5f85\u4e2d\u7a0d\u540e\u8fd0\u884c\u3002)</p> <ul> <li>\u4e0d\u8981\u6b3a\u9a97\u5de5\u4f5c\u4f8b\u7a0b\u4ee5\u53ca\u5c06\u963b\u585e\u7684I/O\u64cd\u4f5c\u6807\u8bb0\u4e3a<code>async</code>(\u5f02\u6b65).\uff08\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u4f1a\u963b\u585e\u4e8b\u4ef6\u8c03\u7528\u5faa\u73af\uff0c\u5bfc\u81f4\u5f71\u54cd\u5176\u4ed6\u7684\u5f02\u6b65\u4efb\u52a1\u8c03\u7528\uff09</li> <li>\u4e0d\u8981\u5c06\u5b83\u7528\u4e8e\u7e41\u91cd\u7684CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u3002</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n\"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"#16-\u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","title":"16. \u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","text":"<p>FastAPI, Pydantic, \u4ee5\u53ca\u73b0\u4ee3\u7684 IDE \u9f13\u52b1\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u6ca1\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p> <p>\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p>"},{"location":"#17-\u4ee5chunks\u5757\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","title":"17. \u4ee5chunks(\u5757)\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","text":"<p>\u4e0d\u8981\u671f\u671b\u60a8\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u5c0f\u6587\u4ef6\u3002</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes MB(\u5146\u5b57\u8282)\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre>"},{"location":"#18-\u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","title":"18. \u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u8054\u5408\u7c7b\u578b(Union)\u7684 pydantic \u5b57\u6bb5\uff0c\u8bf7\u786e\u4fdd\u9a8c\u8bc1\u5668\u660e\u786e\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article \u975e\u5e38\u5305\u5bb9\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u5b57\u5178\u751f\u6548\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848:</p> <ol> <li> <p>\u9a8c\u8bc1\u8f93\u5165\u53ea\u5141\u8bb8\u6709\u6548\u5b57\u6bb5\u5e76\u5728\u63d0\u4f9b\u672a\u77e5\u6570\u65f6\u5f15\u53d1\u9519\u8bef</p> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> </li> <li> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u8bf7\u4f7f\u7528 Pydantic \u7684 Smart Union (&gt;v1.9)</p> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u5982 <code>int</code> \u6216 <code>bool</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u4e0d\u9002\u7528\u4e8e\u7c7b\u7b49\u590d\u6742\u5b57\u6bb5\u3002</p> <p>\u6ca1\u6709 Smart Union :</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>\u6709 Smart Union :</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, \u56e0\u4e3a smart_union \u4e0d\u9002\u7528\u4e8e\u50cf\u7c7b\u8fd9\u6837\u7684\u590d\u6742\u5b57\u6bb5\n</code></pre> </li> <li> <p>\u5feb\u901f\u89e3\u51b3\u65b9\u6cd5</p> <p>\u6b63\u786e\u6392\u5e8f\u5b57\u6bb5\u7c7b\u578b: \u4ece\u6700\u4e25\u683c\u7684\u5230\u5bbd\u677e\u7684\u6821\u9a8c\u3002</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre> </li> </ol>"},{"location":"#19-sql-\u7b2c\u4e00-pydantic-\u7b2c\u4e8c","title":"19. SQL-\u7b2c\u4e00, Pydantic-\u7b2c\u4e8c","text":"<ul> <li>\u901a\u5e38\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u7684\u901f\u5ea6\u6bd4 CPython \u66f4\u5feb\u3001\u66f4\u5e72\u51c0\u3002</li> <li>\u6700\u597d\u4f7f\u7528 SQL \u6267\u884c\u6240\u6709\u590d\u6742\u7684\u8fde\u63a5\u548c\u7b80\u5355\u7684\u6570\u636e\u64cd\u4f5c\u3002</li> <li>\u6700\u597d\u5728\u6570\u636e\u5e93\u4e2d\u805a\u5408 JSON \u4ee5\u54cd\u5e94\u5d4c\u5957\u5bf9\u8c61\u3002</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                   text(\"'id', profiles.id\"),\n                   text(\"'first_name', profiles.first_name\"),\n                   text(\"'last_name', profiles.last_name\"),\n                   text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n       if isinstance(creator, str):  # i.e. json\n          return orjson.loads(creator)\n\n       return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\n   posts = await service.get_posts(creator[\"id\"])\n\n   return posts\n</code></pre> <p>\u5982\u679c\u805a\u5408\u6570\u636e\u8868\u5355 DB \u662f\u4e00\u4e2a\u7b80\u5355\u7684 JSON\uff0c\u90a3\u4e48\u770b\u770b Pydantic \u7684<code>Json</code>\u5b57\u6bb5\u7c7b\u578b\uff0c\u5b83\u5c06\u9996\u5148\u52a0\u8f7d\u539f\u59cb JSON\u3002</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre>"},{"location":"#20-\u9a8c\u8bc1host\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684-url","title":"20. \u9a8c\u8bc1host\uff0c\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684 URL","text":"<p>\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5165\u53e3\uff1a</p> <ol> <li>\u63a5\u53d7\u6765\u81ea\u7528\u6237\u7684\u5a92\u4f53\u6587\u4ef6\uff0c</li> <li>\u4e3a\u6b64\u6587\u4ef6\u751f\u6210\u552f\u4e00\u7684 url\uff0c</li> <li>\u8fd4\u56de url \u7ed9\u7528\u6237\uff0c</li> <li>\u4ed6\u4eec\u5c06\u5728\u5176\u4ed6\u5165\u53e3\u4f7f\u7528\u5b83\u4eec\uff0c\u4f8b\u5982 <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>\u8fd9\u4e9b\u7aef\u70b9\u53ea\u63a5\u53d7\u6765\u81ea\u767d\u540d\u5355\u4e3b\u673a\u7684\u6587\u4ef6</li> <li>\u4f7f\u7528\u6b64\u540d\u79f0\u548c\u5339\u914d\u7684 URL \u5c06\u6587\u4ef6\u4e0a\u4f20\u5230 AWS\u3002</li> </ol> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06 URL \u4e3b\u673a\u5217\u5165\u767d\u540d\u5355\uff0c\u90a3\u4e48\u4e0d\u826f\u7528\u6237\u5c31\u6709\u673a\u4f1a\u4e0a\u4f20\u5371\u9669\u94fe\u63a5\u3002</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n\"\"\"\u5c06 pydantic \u7684 AnyUrl \u9a8c\u8bc1\u6269\u5c55\u5230\u767d\u540d\u5355 URL \u4e3b\u673a\u3002\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre>"},{"location":"#21-\u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51favalueerror","title":"21. \u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\uff0c\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51faValueError","text":"<p>\u5b83\u5c06\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u5f88\u597d\u7684\u8be6\u7ec6\u54cd\u5e94\u3002</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response \u4f8b\u5b50:</p> <p></p>"},{"location":"#22-\u4e0d\u8981\u5fd8\u8bb0-fastapi-\u5c06-response-\u7684-pydantic-\u5bf9\u8c61\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-responsemodel-\u7684\u5b9e\u4f8b\u7136\u540e\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-json","title":"22. \u4e0d\u8981\u5fd8\u8bb0 FastAPI \u5c06 Response \u7684 Pydantic \u5bf9\u8c61\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a ResponseModel \u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a JSON","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>\u65e5\u5fd7\u8f93\u51fa:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre>"},{"location":"#23-\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync\u540c\u6b65-sdk-\u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","title":"23. \u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync(\u540c\u6b65) SDK, \u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","text":"<p>\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u5e93\u4e0e\u5916\u90e8\u670d\u52a1\u4ea4\u4e92\uff0c\u5e76\u4e14\u5b83\u4e0d\u652f\u6301<code>async</code>(\u5f02\u6b65)\uff0c\u5219\u5728\u5916\u90e8\u5de5\u4f5c\u7ebf\u7a0b\u4e2d\u8fdb\u884c HTTP \u8c03\u7528\u3002</p> <p>\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea starlette \u7684\u8457\u540d\u7684<code>run_in_threadpool</code>\u3002</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"#24-\u4f7f\u7528-linters-black-isort-autoflake","title":"24. \u4f7f\u7528 linters (black, isort, autoflake)","text":"<p>\u4f7f\u7528 linters, \u60a8\u53ef\u4ee5\u5fd8\u8bb0\u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u4e13\u6ce8\u4e8e\u7f16\u5199\u4e1a\u52a1\u903b\u8f91\u3002</p> <p>Black \u662f\u4e00\u4e2a\u6beb\u4e0d\u59a5\u534f\u7684\u4ee3\u7801\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5b83\u6d88\u9664\u4e86\u60a8\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u505a\u51fa\u7684\u8bb8\u591a\u5c0f\u51b3\u5b9a\u3002 \u5176\u4ed6 linter \u53ef\u5e2e\u52a9\u60a8\u7f16\u5199\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u5e76\u9075\u5faa PEP8\u3002</p> <p>\u4f7f\u7528<code>pre-commit hook</code>(\u9884\u63d0\u4ea4\u94a9\u5b50)\u662f\u4e00\u79cd\u6d41\u884c\u7684\u826f\u597d\u505a\u6cd5\uff0c\u4f46\u4ec5\u4f7f\u7528\u811a\u672c\u5bf9\u6211\u4eec\u6765\u8bf4\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre>"},{"location":"#\u60ca\u559c\u90e8\u5206","title":"\u60ca\u559c\u90e8\u5206","text":"<p>\u4e00\u4e9b\u975e\u5e38\u5584\u826f\u7684\u4eba\u5206\u4eab\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u7ecf\u9a8c\u548c\u6700\u4f73\u5b9e\u8df5\uff0c\u7edd\u5bf9\u503c\u5f97\u4e00\u8bfb\u3002</p> <p>\u5728\u9879\u76ee\u7684 issues \u90e8\u5206\u67e5\u770b\u5b83\u4eec\u3002</p> <p>\u4f8b\u5982\uff0clowercase00 \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u4eec\u4f7f\u7528\u6743\u9650\u548c\u6388\u6743\u3001\u57fa\u4e8e\u7c7b\u7684\u670d\u52a1\u548c\u89c6\u56fe\u3001\u4efb\u52a1\u961f\u5217\u7684\u6700\u4f73\u5b9e\u8df5\uff0c \u81ea\u5b9a\u4e49\u54cd\u5e94\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f7f\u7528 dynaconf \u8fdb\u884c\u914d\u7f6e\u7b49\u3002</p> <p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5173\u4e8e\u4f7f\u7528 FastAPI \u7684\u7ecf\u9a8c\u8981\u5206\u4eab\uff0c\u65e0\u8bba\u662f\u597d\u662f\u574f\uff0c\u90fd\u975e\u5e38\u6b22\u8fce\u60a8\u521b\u5efa\u4e00\u4e2a\u65b0\u95ee\u9898\u3002 \u9605\u8bfb\u5b83\u662f\u6211\u4eec\u7684\u8363\u5e78\u3002</p>"},{"location":"about/","title":"\u5173\u4e8e","text":"<ul> <li>\u7ffb\u8bd1\u81ea https://github.com/zhanymkanov/fastapi-best-practices \u6709\u6548\u6027\u53c2\u8003\u539f\u6587\u3002</li> </ul>"},{"location":"about/#\u57fa\u7840","title":"\u57fa\u7840","text":"<ul> <li>\u7f51\u7edc\u57fa\u7840, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09</li> <li>HTTP Referer \u6559\u7a0b, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP Referer \u6559\u7a0b</li> <li>HTTPS \u5347\u7ea7\u6307\u5357, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTPS \u5347\u7ea7\u6307\u5357</li> </ul>"},{"location":"about/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>\u4f5c\u8005\u8fd8\u6709\u4e00\u4e2a\u4ed3\u5e93: https://github.com/zhanymkanov/fastapi_production_template - \u4e00\u4e2a\u57fa\u4e8efastapi\u7684\u751f\u4ea7\u6a21\u7248\u4ed3\u5e93\uff0c\u4e5f\u633a\u4e0d\u9519\u7684\u3002</p>"},{"location":"http/","title":"HTTP \u534f\u8bae\u5165\u95e8","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP \u534f\u8bae\u5165\u95e8</p> <p>HTTP\u534f\u8bae\u662f\u4e92\u8054\u7f51\u7684\u57fa\u7840\u534f\u8bae\uff0c\u4e5f\u662f\u7f51\u9875\u5f00\u53d1\u7684\u5fc5\u5907\u77e5\u8bc6\uff0c\u6700\u65b0\u7248\u672c HTTP/2 \u66f4\u662f\u8ba9\u5b83\u6210\u4e3a\u6280\u672f\u70ed\u70b9\u3002</p> <p>\u672c\u6587\u4ecb\u7ecdHTTP\u534f\u8bae\u7684\u5386\u53f2\u6f14\u53d8\u548c\u8bbe\u8ba1\u601d\u8def\u3002</p> <p></p>"},{"location":"http/#\u4e00http09","title":"\u4e00\u3001HTTP/0.9","text":"<p>HTTP\u662f\u57fa\u4e8e TCP/IP \u534f\u8bae\u7684\u5e94\u7528\u5c42\u534f\u8bae\u3002\u5b83\u4e0d\u6d89\u53ca\u6570\u636e\u5305\uff08packet\uff09\u4f20\u8f93\uff0c\u4e3b\u8981\u89c4\u5b9a\u4e86\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u683c\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u752880\u7aef\u53e3\u3002</p> <p>\u6700\u65e9\u7248\u672c\u662f1991\u5e74\u53d1\u5e03\u76840.9\u7248\u3002\u8be5\u7248\u672c\u6781\u5176\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u4e2a\u547d\u4ee4<code>GET</code>\u3002</p> <pre><code>GET /index.html\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0cTCP\u8fde\u63a5\uff08connection\uff09\u5efa\u7acb\u540e\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u8bf7\u6c42\uff08request\uff09\u7f51\u9875<code>index.html</code>\u3002</p> <p>\u534f\u8bae\u89c4\u5b9a\uff0c\u670d\u52a1\u5668\u53ea\u80fd\u56de\u5e94HTML\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u80fd\u56de\u5e94\u522b\u7684\u683c\u5f0f\u3002</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u670d\u52a1\u5668\u53d1\u9001\u5b8c\u6bd5\uff0c\u5c31\u5173\u95edTCP\u8fde\u63a5\u3002</p>"},{"location":"http/#\u4e8chttp10","title":"\u4e8c\u3001HTTP/1.0","text":""},{"location":"http/#21-\u7b80\u4ecb","title":"2.1 \u7b80\u4ecb","text":"<p>1996\u5e745\u6708\uff0cHTTP/1.0 \u7248\u672c\u53d1\u5e03\uff0c\u5185\u5bb9\u5927\u5927\u589e\u52a0\u3002</p> <p>\u9996\u5148\uff0c\u4efb\u4f55\u683c\u5f0f\u7684\u5185\u5bb9\u90fd\u53ef\u4ee5\u53d1\u9001\u3002\u8fd9\u4f7f\u5f97\u4e92\u8054\u7f51\u4e0d\u4ec5\u53ef\u4ee5\u4f20\u8f93\u6587\u5b57\uff0c\u8fd8\u80fd\u4f20\u8f93\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u4e3a\u4e92\u8054\u7f51\u7684\u5927\u53d1\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002</p> <p>\u5176\u6b21\uff0c\u9664\u4e86<code>GET</code>\u547d\u4ee4\uff0c\u8fd8\u5f15\u5165\u4e86<code>POST</code>\u547d\u4ee4\u548c<code>HEAD</code>\u547d\u4ee4\uff0c\u4e30\u5bcc\u4e86\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u7684\u4e92\u52a8\u624b\u6bb5\u3002</p> <p>\u518d\u6b21\uff0cHTTP\u8bf7\u6c42\u548c\u56de\u5e94\u7684\u683c\u5f0f\u4e5f\u53d8\u4e86\u3002\u9664\u4e86\u6570\u636e\u90e8\u5206\uff0c\u6bcf\u6b21\u901a\u4fe1\u90fd\u5fc5\u987b\u5305\u62ec\u5934\u4fe1\u606f\uff08HTTP header\uff09\uff0c\u7528\u6765\u63cf\u8ff0\u4e00\u4e9b\u5143\u6570\u636e\u3002</p> <p>\u5176\u4ed6\u7684\u65b0\u589e\u529f\u80fd\u8fd8\u5305\u62ec\u72b6\u6001\u7801\uff08status code\uff09\u3001\u591a\u5b57\u7b26\u96c6\u652f\u6301\u3001\u591a\u90e8\u5206\u53d1\u9001\uff08multi-part type\uff09\u3001\u6743\u9650\uff08authorization\uff09\u3001\u7f13\u5b58\uff08cache\uff09\u3001\u5185\u5bb9\u7f16\u7801\uff08content encoding\uff09\u7b49\u3002</p>"},{"location":"http/#22-\u8bf7\u6c42\u683c\u5f0f","title":"2.2 \u8bf7\u6c42\u683c\u5f0f","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a1.0\u7248\u7684HTTP\u8bf7\u6c42\u7684\u4f8b\u5b50\u3002</p> <pre><code>GET / HTTP/1.0\nHost: kamranahmed.info\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u683c\u5f0f\u4e0e0.9\u7248\u6709\u5f88\u5927\u53d8\u5316\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8bf7\u6c42\u547d\u4ee4\uff0c\u5fc5\u987b\u5728\u5c3e\u90e8\u6dfb\u52a0\u534f\u8bae\u7248\u672c\uff08<code>HTTP/1.0</code>\uff09\u3002\u540e\u9762\u5c31\u662f\u591a\u884c\u5934\u4fe1\u606f\uff0c\u63cf\u8ff0\u5ba2\u6237\u7aef\u7684\u60c5\u51b5\u3002</p>"},{"location":"http/#23-\u56de\u5e94\u683c\u5f0f","title":"2.3 \u56de\u5e94\u683c\u5f0f","text":"<p>\u670d\u52a1\u5668\u7684\u56de\u5e94\u5982\u4e0b\u3002</p> <pre><code>HTTP/1.0 200 OK \nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u56de\u5e94\u7684\u683c\u5f0f\u662f<code>\u5934\u4fe1\u606f + \u4e00\u4e2a\u7a7a\u884c\uff08</code>\\r\\n<code>\uff09 + \u6570\u636e</code>\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u884c\u662f<code>\u534f\u8bae\u7248\u672c + \u72b6\u6001\u7801\uff08status code\uff09 + \u72b6\u6001\u63cf\u8ff0</code>\u3002</p>"},{"location":"http/#24-content-type-\u5b57\u6bb5","title":"2.4 Content-Type \u5b57\u6bb5","text":"<p>\u5173\u4e8e\u5b57\u7b26\u7684\u7f16\u7801\uff0c1.0\u7248\u89c4\u5b9a\uff0c\u5934\u4fe1\u606f\u5fc5\u987b\u662f ASCII \u7801\uff0c\u540e\u9762\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\u3002\u56e0\u6b64\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u544a\u8bc9\u5ba2\u6237\u7aef\uff0c\u6570\u636e\u662f\u4ec0\u4e48\u683c\u5f0f\uff0c\u8fd9\u5c31\u662f<code>Content-Type</code>\u5b57\u6bb5\u7684\u4f5c\u7528\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684<code>Content-Type</code>\u5b57\u6bb5\u7684\u503c\u3002</p> <ul> <li> <p>text/plain</p> </li> <li> <p>text/html</p> </li> <li>text/css</li> <li>image/jpeg</li> <li>image/png</li> <li>image/svg+xml</li> <li>audio/mp4</li> <li>video/mp4</li> <li>application/javascript</li> <li>application/pdf</li> <li>application/zip</li> <li>application/atom+xml</li> </ul> <p>\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u603b\u79f0\u4e3a<code>MIME type</code>\uff0c\u5305\u542b\u4e00\u7ea7\u7c7b\u578b\u548c\u4e8c\u7ea7\u7c7b\u578b\uff0c\u4e4b\u95f4\u7528\u659c\u6760\u5206\u9694\u3002</p> <p>\u9664\u4e86\u9884\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5382\u5546\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002</p> <pre><code>application/vnd.debian.binary-package\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662fDebian\u7cfb\u7edf\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5305\u3002</p> <p><code>MIME type</code>\u8fd8\u53ef\u4ee5\u5728\u5c3e\u90e8\u4f7f\u7528\u5206\u53f7\uff0c\u6dfb\u52a0\u53c2\u6570\u3002</p> <pre><code>Content-Type: text/html; charset=utf-8\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662f\u7f51\u9875\uff0c\u800c\u4e14\u7f16\u7801\u662fUTF-8\u3002</p> <p><code>MIME type</code>\u4e0d\u4ec5\u7528\u5728HTTP\u534f\u8bae\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6bd4\u5982HTML\u7f51\u9875\u3002</p> <pre><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;!-- \u7b49\u540c\u4e8e --&gt;\n&lt;meta charset=\"utf-8\" /&gt; \n</code></pre>"},{"location":"http/#25-content-encoding-\u5b57\u6bb5","title":"2.5 Content-Encoding \u5b57\u6bb5","text":"<p>\u7531\u4e8e\u53d1\u9001\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u636e\u538b\u7f29\u540e\u518d\u53d1\u9001\u3002<code>Content-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u6570\u636e\u7684\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Content-Encoding: gzip\nContent-Encoding: compress\nContent-Encoding: deflate\n</code></pre> <p>\u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u65f6\uff0c\u7528<code>Accept-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u81ea\u5df1\u53ef\u4ee5\u63a5\u53d7\u54ea\u4e9b\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Accept-Encoding: gzip, deflate\n</code></pre>"},{"location":"http/#26-\u7f3a\u70b9","title":"2.6 \u7f3a\u70b9","text":"<p>HTTP/1.0 \u7248\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u53ea\u80fd\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u3002\u53d1\u9001\u6570\u636e\u5b8c\u6bd5\uff0c\u8fde\u63a5\u5c31\u5173\u95ed\uff0c\u5982\u679c\u8fd8\u8981\u8bf7\u6c42\u5176\u4ed6\u8d44\u6e90\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5\u3002</p> <p>TCP\u8fde\u63a5\u7684\u65b0\u5efa\u6210\u672c\u5f88\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u4e09\u6b21\u63e1\u624b\uff0c\u5e76\u4e14\u5f00\u59cb\u65f6\u53d1\u9001\u901f\u7387\u8f83\u6162\uff08slow start\uff09\u3002\u6240\u4ee5\uff0cHTTP 1.0\u7248\u672c\u7684\u6027\u80fd\u6bd4\u8f83\u5dee\u3002\u968f\u7740\u7f51\u9875\u52a0\u8f7d\u7684\u5916\u90e8\u8d44\u6e90\u8d8a\u6765\u8d8a\u591a\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u6108\u53d1\u7a81\u51fa\u4e86\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u6d4f\u89c8\u5668\u5728\u8bf7\u6c42\u65f6\uff0c\u7528\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684<code>Connection</code>\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u8fd9\u4e2a\u5b57\u6bb5\u8981\u6c42\u670d\u52a1\u5668\u4e0d\u8981\u5173\u95edTCP\u8fde\u63a5\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8bf7\u6c42\u590d\u7528\u3002\u670d\u52a1\u5668\u540c\u6837\u56de\u5e94\u8fd9\u4e2a\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u4e00\u4e2a\u53ef\u4ee5\u590d\u7528\u7684TCP\u8fde\u63a5\u5c31\u5efa\u7acb\u4e86\uff0c\u76f4\u5230\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u6807\u51c6\u5b57\u6bb5\uff0c\u4e0d\u540c\u5b9e\u73b0\u7684\u884c\u4e3a\u53ef\u80fd\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u4e0d\u662f\u6839\u672c\u7684\u89e3\u51b3\u529e\u6cd5\u3002</p>"},{"location":"http/#\u4e09http11","title":"\u4e09\u3001HTTP/1.1","text":"<p>1997\u5e741\u6708\uff0cHTTP/1.1 \u7248\u672c\u53d1\u5e03\uff0c\u53ea\u6bd4 1.0 \u7248\u672c\u665a\u4e86\u534a\u5e74\u3002\u5b83\u8fdb\u4e00\u6b65\u5b8c\u5584\u4e86 HTTP \u534f\u8bae\uff0c\u4e00\u76f4\u7528\u5230\u4e8620\u5e74\u540e\u7684\u4eca\u5929\uff0c\u76f4\u5230\u73b0\u5728\u8fd8\u662f\u6700\u6d41\u884c\u7684\u7248\u672c\u3002</p>"},{"location":"http/#31-\u6301\u4e45\u8fde\u63a5","title":"3.1 \u6301\u4e45\u8fde\u63a5","text":"<p>1.1 \u7248\u7684\u6700\u5927\u53d8\u5316\uff0c\u5c31\u662f\u5f15\u5165\u4e86\u6301\u4e45\u8fde\u63a5\uff08persistent connection\uff09\uff0c\u5373TCP\u8fde\u63a5\u9ed8\u8ba4\u4e0d\u5173\u95ed\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a\u8bf7\u6c42\u590d\u7528\uff0c\u4e0d\u7528\u58f0\u660e<code>Connection: keep-alive</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u53d1\u73b0\u5bf9\u65b9\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u6d3b\u52a8\uff0c\u5c31\u53ef\u4ee5\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4e0d\u8fc7\uff0c\u89c4\u8303\u7684\u505a\u6cd5\u662f\uff0c\u5ba2\u6237\u7aef\u5728\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u53d1\u9001<code>Connection: close</code>\uff0c\u660e\u786e\u8981\u6c42\u670d\u52a1\u5668\u5173\u95edTCP\u8fde\u63a5\u3002</p> <pre><code>Connection: close\n</code></pre> <p>\u76ee\u524d\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u57df\u540d\uff0c\u5927\u591a\u6570\u6d4f\u89c8\u5668\u5141\u8bb8\u540c\u65f6\u5efa\u7acb6\u4e2a\u6301\u4e45\u8fde\u63a5\u3002</p>"},{"location":"http/#32-\u7ba1\u9053\u673a\u5236","title":"3.2 \u7ba1\u9053\u673a\u5236","text":"<p>1.1 \u7248\u8fd8\u5f15\u5165\u4e86\u7ba1\u9053\u673a\u5236\uff08pipelining\uff09\uff0c\u5373\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u3002\u8fd9\u6837\u5c31\u8fdb\u4e00\u6b65\u6539\u8fdb\u4e86HTTP\u534f\u8bae\u7684\u6548\u7387\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u8bf7\u6c42\u4e24\u4e2a\u8d44\u6e90\u3002\u4ee5\u524d\u7684\u505a\u6cd5\u662f\uff0c\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5148\u53d1\u9001A\u8bf7\u6c42\uff0c\u7136\u540e\u7b49\u5f85\u670d\u52a1\u5668\u505a\u51fa\u56de\u5e94\uff0c\u6536\u5230\u540e\u518d\u53d1\u51faB\u8bf7\u6c42\u3002\u7ba1\u9053\u673a\u5236\u5219\u662f\u5141\u8bb8\u6d4f\u89c8\u5668\u540c\u65f6\u53d1\u51faA\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4f46\u662f\u670d\u52a1\u5668\u8fd8\u662f\u6309\u7167\u987a\u5e8f\uff0c\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\u518d\u56de\u5e94B\u8bf7\u6c42\u3002</p>"},{"location":"http/#33-content-length-\u5b57\u6bb5","title":"3.3 Content-Length \u5b57\u6bb5","text":"<p>\u4e00\u4e2aTCP\u8fde\u63a5\u73b0\u5728\u53ef\u4ee5\u4f20\u9001\u591a\u4e2a\u56de\u5e94\uff0c\u52bf\u5fc5\u5c31\u8981\u6709\u4e00\u79cd\u673a\u5236\uff0c\u533a\u5206\u6570\u636e\u5305\u662f\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u56de\u5e94\u7684\u3002\u8fd9\u5c31\u662f<code>Content-length</code>\u5b57\u6bb5\u7684\u4f5c\u7528\uff0c\u58f0\u660e\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <pre><code>Content-Length: 3495\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u544a\u8bc9\u6d4f\u89c8\u5668\uff0c\u672c\u6b21\u56de\u5e94\u7684\u957f\u5ea6\u662f3495\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u7684\u5b57\u8282\u5c31\u5c5e\u4e8e\u4e0b\u4e00\u4e2a\u56de\u5e94\u4e86\u3002</p> <p>\u57281.0\u7248\u4e2d\uff0c<code>Content-Length</code>\u5b57\u6bb5\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u53d1\u73b0\u670d\u52a1\u5668\u5173\u95ed\u4e86TCP\u8fde\u63a5\uff0c\u5c31\u8868\u660e\u6536\u5230\u7684\u6570\u636e\u5305\u5df2\u7ecf\u5168\u4e86\u3002</p>"},{"location":"http/#34-\u5206\u5757\u4f20\u8f93\u7f16\u7801","title":"3.4 \u5206\u5757\u4f20\u8f93\u7f16\u7801","text":"<p>\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\u7684\u524d\u63d0\u6761\u4ef6\u662f\uff0c\u670d\u52a1\u5668\u53d1\u9001\u56de\u5e94\u4e4b\u524d\uff0c\u5fc5\u987b\u77e5\u9053\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u5f88\u8017\u65f6\u7684\u52a8\u6001\u64cd\u4f5c\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u670d\u52a1\u5668\u8981\u7b49\u5230\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u663e\u7136\u8fd9\u6837\u7684\u6548\u7387\u4e0d\u9ad8\u3002\u66f4\u597d\u7684\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u4ea7\u751f\u4e00\u5757\u6570\u636e\uff0c\u5c31\u53d1\u9001\u4e00\u5757\uff0c\u91c7\u7528\u201c\u6d41\u6a21\u5f0f\u201d\uff08stream\uff09\u53d6\u4ee3\u201c\u7f13\u5b58\u6a21\u5f0f\u201d\uff08buffer\uff09\u3002</p> <p>\u56e0\u6b64\uff0c1.1\u7248\u89c4\u5b9a\u53ef\u4ee5\u4e0d\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\uff0c\u800c\u4f7f\u7528\u201c\u5206\u5757\u4f20\u8f93\u7f16\u7801\u201d\uff08chunked transfer encoding\uff09\u3002\u53ea\u8981\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u5934\u4fe1\u606f\u6709<code>Transfer-Encoding</code>\u5b57\u6bb5\uff0c\u5c31\u8868\u660e\u56de\u5e94\u5c06\u7531\u6570\u91cf\u672a\u5b9a\u7684\u6570\u636e\u5757\u7ec4\u6210\u3002</p> <pre><code>Transfer-Encoding: chunked\n</code></pre> <p>\u6bcf\u4e2a\u975e\u7a7a\u7684\u6570\u636e\u5757\u4e4b\u524d\uff0c\u4f1a\u6709\u4e00\u4e2a16\u8fdb\u5236\u7684\u6570\u503c\uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u3002\u6700\u540e\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u5757\uff0c\u5c31\u8868\u793a\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u53d1\u9001\u5b8c\u4e86\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nTransfer-Encoding: chunked\n\n25\nThis is the data in the first chunk\n\n1C\nand this is the second one\n\n3\ncon\n\n8\nsequence\n\n0\n</code></pre>"},{"location":"http/#35-\u5176\u4ed6\u529f\u80fd","title":"3.5 \u5176\u4ed6\u529f\u80fd","text":"<p>1.1\u7248\u8fd8\u65b0\u589e\u4e86\u8bb8\u591a\u52a8\u8bcd\u65b9\u6cd5\uff1a<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>HEAD</code>\u3001 <code>OPTIONS</code>\u3001<code>DELETE</code>\u3002</p> <p>\u53e6\u5916\uff0c\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u65b0\u589e\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u7528\u6765\u6307\u5b9a\u670d\u52a1\u5668\u7684\u57df\u540d\u3002</p> <pre><code>Host: www.example.com\n</code></pre> <p>\u6709\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u5f80\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u7684\u4e0d\u540c\u7f51\u7ad9\uff0c\u4e3a\u865a\u62df\u4e3b\u673a\u7684\u5174\u8d77\u6253\u4e0b\u4e86\u57fa\u7840\u3002</p>"},{"location":"http/#36-\u7f3a\u70b9","title":"3.6 \u7f3a\u70b9","text":"<p>\u867d\u71361.1\u7248\u5141\u8bb8\u590d\u7528TCP\u8fde\u63a5\uff0c\u4f46\u662f\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u6240\u6709\u7684\u6570\u636e\u901a\u4fe1\u662f\u6309\u6b21\u5e8f\u8fdb\u884c\u7684\u3002\u670d\u52a1\u5668\u53ea\u6709\u5904\u7406\u5b8c\u4e00\u4e2a\u56de\u5e94\uff0c\u624d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u4e2a\u56de\u5e94\u3002\u8981\u662f\u524d\u9762\u7684\u56de\u5e94\u7279\u522b\u6162\uff0c\u540e\u9762\u5c31\u4f1a\u6709\u8bb8\u591a\u8bf7\u6c42\u6392\u961f\u7b49\u7740\u3002\u8fd9\u79f0\u4e3a\u201c\u961f\u5934\u5835\u585e\u201d\uff08Head-of-line blocking\uff09\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4e00\u662f\u51cf\u5c11\u8bf7\u6c42\u6570\uff0c\u4e8c\u662f\u540c\u65f6\u591a\u5f00\u6301\u4e45\u8fde\u63a5\u3002\u8fd9\u5bfc\u81f4\u4e86\u5f88\u591a\u7684\u7f51\u9875\u4f18\u5316\u6280\u5de7\uff0c\u6bd4\u5982\u5408\u5e76\u811a\u672c\u548c\u6837\u5f0f\u8868\u3001\u5c06\u56fe\u7247\u5d4c\u5165CSS\u4ee3\u7801\u3001\u57df\u540d\u5206\u7247\uff08domain sharding\uff09\u7b49\u7b49\u3002\u5982\u679cHTTP\u534f\u8bae\u8bbe\u8ba1\u5f97\u66f4\u597d\u4e00\u4e9b\uff0c\u8fd9\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u662f\u53ef\u4ee5\u907f\u514d\u7684\u3002</p>"},{"location":"http/#\u56dbspdy-\u534f\u8bae","title":"\u56db\u3001SPDY \u534f\u8bae","text":"<p>2009\u5e74\uff0c\u8c37\u6b4c\u516c\u5f00\u4e86\u81ea\u884c\u7814\u53d1\u7684 SPDY \u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3 HTTP/1.1 \u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\u3002</p> <p>\u8fd9\u4e2a\u534f\u8bae\u5728Chrome\u6d4f\u89c8\u5668\u4e0a\u8bc1\u660e\u53ef\u884c\u4ee5\u540e\uff0c\u5c31\u88ab\u5f53\u4f5c HTTP/2 \u7684\u57fa\u7840\uff0c\u4e3b\u8981\u7279\u6027\u90fd\u5728 HTTP/2 \u4e4b\u4e2d\u5f97\u5230\u7ee7\u627f\u3002</p>"},{"location":"http/#\u4e94http2","title":"\u4e94\u3001HTTP/2","text":"<p>2015\u5e74\uff0cHTTP/2 \u53d1\u5e03\u3002\u5b83\u4e0d\u53eb HTTP/2.0\uff0c\u662f\u56e0\u4e3a\u6807\u51c6\u59d4\u5458\u4f1a\u4e0d\u6253\u7b97\u518d\u53d1\u5e03\u5b50\u7248\u672c\u4e86\uff0c\u4e0b\u4e00\u4e2a\u65b0\u7248\u672c\u5c06\u662f HTTP/3\u3002</p>"},{"location":"http/#51-\u4e8c\u8fdb\u5236\u534f\u8bae","title":"5.1 \u4e8c\u8fdb\u5236\u534f\u8bae","text":"<p>HTTP/1.1 \u7248\u7684\u5934\u4fe1\u606f\u80af\u5b9a\u662f\u6587\u672c\uff08ASCII\u7f16\u7801\uff09\uff0c\u6570\u636e\u4f53\u53ef\u4ee5\u662f\u6587\u672c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u3002HTTP/2 \u5219\u662f\u4e00\u4e2a\u5f7b\u5e95\u7684\u4e8c\u8fdb\u5236\u534f\u8bae\uff0c\u5934\u4fe1\u606f\u548c\u6570\u636e\u4f53\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5e76\u4e14\u7edf\u79f0\u4e3a\u201c\u5e27\u201d\uff08frame\uff09\uff1a\u5934\u4fe1\u606f\u5e27\u548c\u6570\u636e\u5e27\u3002</p> <p>\u4e8c\u8fdb\u5236\u534f\u8bae\u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u5b9a\u4e49\u989d\u5916\u7684\u5e27\u3002HTTP/2 \u5b9a\u4e49\u4e86\u8fd1\u5341\u79cd\u5e27\uff0c\u4e3a\u5c06\u6765\u7684\u9ad8\u7ea7\u5e94\u7528\u6253\u597d\u4e86\u57fa\u7840\u3002\u5982\u679c\u4f7f\u7528\u6587\u672c\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\uff0c\u89e3\u6790\u6570\u636e\u5c06\u4f1a\u53d8\u5f97\u975e\u5e38\u9ebb\u70e6\uff0c\u4e8c\u8fdb\u5236\u89e3\u6790\u5219\u65b9\u4fbf\u5f97\u591a\u3002</p>"},{"location":"http/#52-\u591a\u5de5","title":"5.2 \u591a\u5de5","text":"<p>HTTP/2 \u590d\u7528TCP\u8fde\u63a5\uff0c\u5728\u4e00\u4e2a\u8fde\u63a5\u91cc\uff0c\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u90fd\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\uff0c\u800c\u4e14\u4e0d\u7528\u6309\u7167\u987a\u5e8f\u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u201c\u961f\u5934\u5835\u585e\u201d\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u670d\u52a1\u5668\u540c\u65f6\u6536\u5230\u4e86A\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4e8e\u662f\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u7ed3\u679c\u53d1\u73b0\u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u4e8e\u662f\u5c31\u53d1\u9001A\u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u597d\u7684\u90e8\u5206\uff0c \u63a5\u7740\u56de\u5e94B\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\uff0c\u518d\u53d1\u9001A\u8bf7\u6c42\u5269\u4e0b\u7684\u90e8\u5206\u3002</p> <p>\u8fd9\u6837\u53cc\u5411\u7684\u3001\u5b9e\u65f6\u7684\u901a\u4fe1\uff0c\u5c31\u53eb\u505a\u591a\u5de5\uff08Multiplexing\uff09\u3002</p>"},{"location":"http/#53-\u6570\u636e\u6d41","title":"5.3 \u6570\u636e\u6d41","text":"<p>\u56e0\u4e3a HTTP/2 \u7684\u6570\u636e\u5305\u662f\u4e0d\u6309\u987a\u5e8f\u53d1\u9001\u7684\uff0c\u540c\u4e00\u4e2a\u8fde\u63a5\u91cc\u9762\u8fde\u7eed\u7684\u6570\u636e\u5305\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u56de\u5e94\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8981\u5bf9\u6570\u636e\u5305\u505a\u6807\u8bb0\uff0c\u6307\u51fa\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u56de\u5e94\u3002</p> <p>HTTP/2 \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u6240\u6709\u6570\u636e\u5305\uff0c\u79f0\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41\uff08stream\uff09\u3002\u6bcf\u4e2a\u6570\u636e\u6d41\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7f16\u53f7\u3002\u6570\u636e\u5305\u53d1\u9001\u7684\u65f6\u5019\uff0c\u90fd\u5fc5\u987b\u6807\u8bb0\u6570\u636e\u6d41ID\uff0c\u7528\u6765\u533a\u5206\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u6570\u636e\u6d41\u3002\u53e6\u5916\u8fd8\u89c4\u5b9a\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u6d41\uff0cID\u4e00\u5f8b\u4e3a\u5947\u6570\uff0c\u670d\u52a1\u5668\u53d1\u51fa\u7684\uff0cID\u4e3a\u5076\u6570\u3002</p> <p>\u6570\u636e\u6d41\u53d1\u9001\u5230\u4e00\u534a\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\uff08<code>RST_STREAM</code>\u5e27\uff09\uff0c\u53d6\u6d88\u8fd9\u4e2a\u6570\u636e\u6d41\u30021.1\u7248\u53d6\u6d88\u6570\u636e\u6d41\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u5c31\u662f\u5173\u95edTCP\u8fde\u63a5\u3002\u8fd9\u5c31\u662f\u8bf4\uff0cHTTP/2 \u53ef\u4ee5\u53d6\u6d88\u67d0\u4e00\u6b21\u8bf7\u6c42\uff0c\u540c\u65f6\u4fdd\u8bc1TCP\u8fde\u63a5\u8fd8\u6253\u5f00\u7740\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bf7\u6c42\u4f7f\u7528\u3002</p> <p>\u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u6d41\u7684\u4f18\u5148\u7ea7\u3002\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u8d8a\u65e9\u56de\u5e94\u3002</p>"},{"location":"http/#54-\u5934\u4fe1\u606f\u538b\u7f29","title":"5.4 \u5934\u4fe1\u606f\u538b\u7f29","text":"<p>HTTP \u534f\u8bae\u4e0d\u5e26\u6709\u72b6\u6001\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u4e0a\u6240\u6709\u4fe1\u606f\u3002\u6240\u4ee5\uff0c\u8bf7\u6c42\u7684\u5f88\u591a\u5b57\u6bb5\u90fd\u662f\u91cd\u590d\u7684\uff0c\u6bd4\u5982<code>Cookie</code>\u548c<code>User Agent</code>\uff0c\u4e00\u6a21\u4e00\u6837\u7684\u5185\u5bb9\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u5e26\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u5f88\u591a\u5e26\u5bbd\uff0c\u4e5f\u5f71\u54cd\u901f\u5ea6\u3002</p> <p>HTTP/2 \u5bf9\u8fd9\u4e00\u70b9\u505a\u4e86\u4f18\u5316\uff0c\u5f15\u5165\u4e86\u5934\u4fe1\u606f\u538b\u7f29\u673a\u5236\uff08header compression\uff09\u3002\u4e00\u65b9\u9762\uff0c\u5934\u4fe1\u606f\u4f7f\u7528<code>gzip</code>\u6216<code>compress</code>\u538b\u7f29\u540e\u518d\u53d1\u9001\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u540c\u65f6\u7ef4\u62a4\u4e00\u5f20\u5934\u4fe1\u606f\u8868\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u4f1a\u5b58\u5165\u8fd9\u4e2a\u8868\uff0c\u751f\u6210\u4e00\u4e2a\u7d22\u5f15\u53f7\uff0c\u4ee5\u540e\u5c31\u4e0d\u53d1\u9001\u540c\u6837\u5b57\u6bb5\u4e86\uff0c\u53ea\u53d1\u9001\u7d22\u5f15\u53f7\uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u901f\u5ea6\u4e86\u3002</p>"},{"location":"http/#55-\u670d\u52a1\u5668\u63a8\u9001","title":"5.5 \u670d\u52a1\u5668\u63a8\u9001","text":"<p>HTTP/2 \u5141\u8bb8\u670d\u52a1\u5668\u672a\u7ecf\u8bf7\u6c42\uff0c\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u8d44\u6e90\uff0c\u8fd9\u53eb\u505a\u670d\u52a1\u5668\u63a8\u9001\uff08server push\uff09\u3002</p> <p>\u5e38\u89c1\u573a\u666f\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e00\u4e2a\u7f51\u9875\uff0c\u8fd9\u4e2a\u7f51\u9875\u91cc\u9762\u5305\u542b\u5f88\u591a\u9759\u6001\u8d44\u6e90\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6536\u5230\u7f51\u9875\u540e\uff0c\u89e3\u6790HTML\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u9759\u6001\u8d44\u6e90\uff0c\u518d\u53d1\u51fa\u9759\u6001\u8d44\u6e90\u8bf7\u6c42\u3002\u5176\u5b9e\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u9884\u671f\u5230\u5ba2\u6237\u7aef\u8bf7\u6c42\u7f51\u9875\u540e\uff0c\u5f88\u53ef\u80fd\u4f1a\u518d\u8bf7\u6c42\u9759\u6001\u8d44\u6e90\uff0c\u6240\u4ee5\u5c31\u4e3b\u52a8\u628a\u8fd9\u4e9b\u9759\u6001\u8d44\u6e90\u968f\u7740\u7f51\u9875\u4e00\u8d77\u53d1\u7ed9\u5ba2\u6237\u7aef\u4e86\u3002</p>"},{"location":"http/#\u516d\u53c2\u8003\u94fe\u63a5","title":"\u516d\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Journey to HTTP/2, by Kamran Ahmed</li> <li>HTTP, by Wikipedia</li> <li>HTTP/2 Specification</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"raw_en/","title":"FastAPI Best Practices","text":"<p>Opinionated list of best practices and conventions we used at our startup.</p> <p>For the last 1.5 years in production, we have been making good and bad decisions that impacted our developer experience dramatically. Some of them are worth sharing.</p>"},{"location":"raw_en/#1-project-structure-consistent--predictable","title":"1. Project Structure. Consistent &amp; predictable","text":"<p>There are many ways to structure the project, but the best structure is a structure that is consistent, straightforward, and has no surprises.</p> <ul> <li>If looking at the project structure doesn't give you an idea of what the project is about, then the structure might be unclear.</li> <li>If you have to open packages to understand what modules are located in them, then your structure is unclear.</li> <li>If the frequency and location of the files feels random, then your project structure is bad.</li> <li>If looking at the module's location and its name doesn't give you an idea of what's inside it, then your structure is very bad.</li> </ul> <p>Although the project structure, where we separate files by their type (e.g. api, crud, models, schemas) presented by @tiangolo is good for microservices or projects with fewer scopes, we couldn't fit it into our monolith with a lot of domains and modules. Structure that I found more scalable and evolvable is inspired by Netflix's Dispatch with some little modifications.</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db models\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # local configs\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # client model for external service communication\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # global configs\n\u2502   \u251c\u2500\u2500 models.py  # global models\n\u2502   \u251c\u2500\u2500 exceptions.py  # global exceptions\n\u2502   \u251c\u2500\u2500 pagination.py  # global module e.g. pagination\n\u2502   \u251c\u2500\u2500 database.py  # db connection related stuff\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>Store all domain directories inside <code>src</code> folder</li> <li><code>src/</code> - highest level of an app, contains common models, configs, and constants, etc.</li> <li><code>src/main.py</code> - root of the project, which inits the FastAPI app</li> <li>Each package has its own router, schemas, models, etc.</li> <li><code>router.py</code> - is a core of each module with all the endpoints</li> <li><code>schemas.py</code> - for pydantic models</li> <li><code>models.py</code> - for db models</li> <li><code>service.py</code> - module specific business logic  </li> <li><code>dependencies.py</code> - router dependencies</li> <li><code>constants.py</code> - module specific constants and error codes</li> <li><code>config.py</code> - e.g. env vars</li> <li><code>utils.py</code> - non-business logic functions, e.g. response normalization, data enrichment, etc.</li> <li><code>exceptions</code> - module specific exceptions, e.g. <code>PostNotFound</code>, <code>InvalidUserData</code></li> <li>When package requires services or dependencies or constants from other packages - import them with an explicit module name</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # in case we have Standard ErrorCode in constants module of each package\n</code></pre>"},{"location":"raw_en/#2-excessively-use-pydantic-for-data-validation","title":"2. Excessively use Pydantic for data validation","text":"<p>Pydantic has a rich set of features to validate and transform data.</p> <p>In addition to regular features like required &amp; non-required fields with default values, Pydantic has built-in comprehensive data processing tools like regex, enums for limited allowed options, length validation, email validation, etc.</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre>"},{"location":"raw_en/#3-use-dependencies-for-data-validation-vs-db","title":"3. Use dependencies for data validation vs DB","text":"<p>Pydantic can only validate the values from client input. Use dependencies to validate data against database constraints like email already exists, user not found, etc.</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>If we didn't put data validation to dependency, we would have to add post_id validation for every endpoint and write the same tests for each of them.</p>"},{"location":"raw_en/#4-chain-dependencies","title":"4. Chain dependencies","text":"<p>Dependencies can use other dependencies and avoid code repetition for similar logic.</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"raw_en/#5-decouple--reuse-dependencies-dependency-calls-are-cached","title":"5. Decouple &amp; Reuse dependencies. Dependency calls are cached","text":"<p>Dependencies can be reused multiple times, and they won't be recalculated - FastAPI caches dependency's result within a request's scope by default, i.e. if we have a dependency that calls service <code>get_post_by_id</code>, we won't be visiting DB each time we call this dependency - only the first function call.</p> <p>Knowing this, we can easily decouple dependencies onto multiple smaller functions that operate on a smaller domain and are easier to reuse in other routes. For example, in the code below we are using <code>parse_jwt_data</code> three times:</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code>,</li> </ol> <p>but <code>parse_jwt_data</code> is called only once, in the very first call.</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n\"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"raw_en/#6-follow-the-rest","title":"6. Follow the REST","text":"<p>Developing RESTful API makes it easier to reuse dependencies in routes like these:</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>The only caveat is to use the same variable names in the path:</p> <ul> <li>If you have two endpoints <code>GET /profiles/:profile_id</code> and <code>GET /creators/:creator_id</code> that both validate whether the given <code>profile_id</code> exists,  but <code>GET /creators/:creator_id</code> also checks if the profile is creator, then it's better to rename <code>creator_id</code> path variable to <code>profile_id</code> and chain those two dependencies.</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(profile: Mapping = Depends(valid_profile_id)) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n\"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n\"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>Use /me endpoints for users resources (e.g. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>No need to validate that user id exists - it's already checked via auth method</li> <li>No need to check whether the user id belongs to the requester</li> </ol>"},{"location":"raw_en/#7-dont-make-your-routes-async-if-you-have-only-blocking-io-operations","title":"7. Don't make your routes async, if you have only blocking I/O operations","text":"<p>Under the hood, FastAPI can effectively handle both async and sync I/O operations.</p> <ul> <li>FastAPI runs <code>sync</code> routes in the threadpool and blocking I/O operations won't stop the event loop from executing the tasks.</li> <li>Otherwise, if the route is defined <code>async</code> then it's called regularly via <code>await</code> and FastAPI trusts you to do only non-blocking I/O operations.</li> </ul> <p>The caveat is if you fail that trust and execute blocking operations within async routes, the event loop will not be able to run the next tasks until that blocking operation is done.</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds, but in another thread\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB, but in another thread\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # non-blocking I/O operation\n    pong = await service.async_get_pong()  # non-blocking I/O db call\n\n    return {\"pong\": pong}\n</code></pre> <p>What happens when we call:</p> <ol> <li><code>GET /terrible-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>Server's event loop and all the tasks in the queue will be waiting until <code>time.sleep()</code> is finished<ol> <li>Server thinks <code>time.sleep()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Then, event loop and all the tasks in the queue will be waiting until <code>service.get_pong</code> is finished<ol> <li>Server thinks <code>service.get_pong()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Server returns the response.<ol> <li>After a response, server starts accepting new requests</li> </ol> </li> <li><code>GET /good-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI sends the whole route <code>good_ping</code> to the threadpool, where a worker thread will run the function</li> <li>While <code>good_ping</code> is being executed, event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)<ul> <li>Independently of main thread (i.e. our FastAPI app),     worker thread will be waiting for <code>time.sleep</code> to finish and then for <code>service.get_pong</code> to finish</li> <li>Sync operation blocks only the side thread, not the main one.</li> </ul> </li> <li>When <code>good_ping</code> finishes its work, server returns a response to the client</li> <li><code>GET /perfect-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI awaits <code>asyncio.sleep(10)</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>asyncio.sleep(10)</code> is done, servers goes to the next lines and awaits <code>service.async_get_pong</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>service.async_get_pong</code> is done, server returns a response to the client</li> </ol> <p>The second caveat is that operations that are non-blocking awaitables or are sent to the thread pool must be I/O intensive tasks (e.g. open file, db call, external API call).</p> <ul> <li>Awaiting CPU-intensive tasks (e.g. heavy calculations, data processing, video transcoding) is worthless since the CPU has to work to finish the tasks, while I/O operations are external and server does nothing while waiting for that operations to finish, thus it can go to the next tasks.</li> <li>Running CPU-intensive tasks in other threads also isn't effective, because of GIL. In short, GIL allows only one thread to work at a time, which makes it useless for CPU tasks.</li> <li>If you want to optimize CPU intensive tasks you should send them to workers in another process.</li> </ul> <p>Related StackOverflow questions of confused users</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597</li> <li>Here you can also check my answer</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"raw_en/#8-custom-base-model-from-day-0","title":"8. Custom base model from day 0","text":"<p>Having a controllable global base model allows us to customize all the models within the app. For example, we could have a standard datetime format or add a super method for all subclasses of the base model.</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps returns bytes, to match standard json.dumps we need to decode\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # method for customer JSON encoding of datetime fields\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n\"\"\"Drops microseconds in all the datetime field values.\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n\"\"\"Return a dict which contains only serializable fields.\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>In the example above we have decided to make a global base model which:</p> <ul> <li>uses orjson to serialize data</li> <li>drops microseconds to 0 in all date formats</li> <li>serializes all datetime fields to standard format with explicit timezone</li> </ul>"},{"location":"raw_en/#9-docs","title":"9. Docs","text":"<ol> <li>Unless your API is public, hide docs by default. Show it explicitly on the selected envs only.</li> </ol> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # parse .env file for env variables\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # get current env name\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # explicit list of allowed envs\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\n   app_configs[\"openapi_url\"] = None  # set url for docs as null\n\napp = FastAPI(**app_configs)\n</code></pre> <ol> <li>Help FastAPI to generate an easy-to-understand docs</li> <li>Set <code>response_model</code>, <code>status_code</code>, <code>description</code>, etc.</li> <li>If models and statuses vary, use <code>responses</code> route attribute to add docs for different responses</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # default response pydantic model \n    status_code=status.HTTP_201_CREATED,  # default status code\n    description=\"Description of the well documented endpoint\",\n    tags=[\"Endpoint Category\"],\n    summary=\"Summary of the Endpoint\",\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # custom pydantic model for 200 response\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # custom pydantic model for 201 response\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # custom pydantic model for 202 response\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>Will generate docs like this: </p>"},{"location":"raw_en/#10-use-pydantics-basesettings-for-configs","title":"10. Use Pydantic's BaseSettings for configs","text":"<p>Pydantic gives a powerful tool to parse environment variables and process them with its validators.</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre>"},{"location":"raw_en/#11-sqlalchemy-set-db-keys-naming-convention","title":"11. SQLAlchemy: Set DB keys naming convention","text":"<p>Explicitly setting the indexes' namings according to your database's convention is preferable over sqlalchemy's.</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre>"},{"location":"raw_en/#12-migrations-alembic","title":"12. Migrations. Alembic","text":"<ol> <li>Migrations must be static and revertable. If your migrations depend on dynamically generated data, then make sure the only thing that is dynamic is the data itself, not its structure.</li> <li>Generate migrations with descriptive names &amp; slugs. Slug is required and should explain the changes.</li> <li>Set human-readable file template for new migrations. We use <code>*date*_*slug*.py</code> pattern, e.g. <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"raw_en/#13-set-db-naming-convention","title":"13. Set DB naming convention","text":"<p>Being consistent with names is important. Some rules we followed:</p> <ol> <li>lower_case_snake</li> <li>singular form (e.g. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>group similar tables with module prefix, e.g. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>stay consistent across tables, but concrete namings are ok, e.g.</li> <li>use <code>profile_id</code> in all tables, but if some of them need only profiles that are creators, use <code>creator_id</code></li> <li>use <code>post_id</code> for all abstract tables like <code>post_like</code>, <code>post_view</code>, but use concrete naming in relevant modules like <code>course_id</code> in <code>chapters.course_id</code></li> <li><code>_at</code> suffix for datetime</li> <li><code>_date</code> suffix for date</li> </ol>"},{"location":"raw_en/#14-set-tests-client-async-from-day-0","title":"14. Set tests client async from day 0","text":"<p>Writing integration tests with DB will most likely lead to messed up event loop errors in the future. Set the async test client immediately, e.g. async_asgi_testclient or httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>Unless you have sync db connections (excuse me?) or aren't planning to write integration tests.</p>"},{"location":"raw_en/#15-backgroundtasks--asynciocreate_task","title":"15. BackgroundTasks &gt; asyncio.create_task","text":"<p>BackgroundTasks can effectively run both blocking and non-blocking I/O operations the same way FastAPI handles blocking routes (<code>sync</code> tasks are run in a threadpool, while <code>async</code> tasks are awaited later)</p> <ul> <li>Don't lie to the worker and don't mark blocking I/O operations as <code>async</code></li> <li>Don't use it for heavy CPU intensive tasks.</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n\"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"raw_en/#16-typing-is-important","title":"16. Typing is important","text":"<p>FastAPI, Pydantic, and modern IDEs encourage to take use of type hints.</p> <p>Without Type Hints</p> <p></p> <p>With Type Hints</p> <p></p>"},{"location":"raw_en/#17-save-files-in-chunks","title":"17. Save files in chunks","text":"<p>Don't hope your clients will send small files.</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre>"},{"location":"raw_en/#18-be-careful-with-dynamic-pydantic-fields","title":"18. Be careful with dynamic pydantic fields","text":"<p>If you have a pydantic field that can accept a union of types, be sure the validator explicitly knows the difference between those types.</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article is very inclusive and all fields are optional, allowing any dict to become valid\n</code></pre> <p>Solutions:</p> <ol> <li>Validate input has only allowed valid fields and raise error if unknowns are provided</li> </ol> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> <ol> <li>Use Pydantic's Smart Union (&gt;v1.9) if fields are simple</li> </ol> <p>It's a good solution if the fields are simple like <code>int</code> or <code>bool</code>, but it doesn't work for complex fields like classes.</p> <p>Without Smart Union</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>With Smart Union</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, because smart_union doesn't work for complex fields like classes\n</code></pre> <ol> <li>Fast Workaround</li> </ol> <p>Order field types properly: from the most strict ones to loose ones.</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre>"},{"location":"raw_en/#19-sql-first-pydantic-second","title":"19. SQL-first, Pydantic-second","text":"<ul> <li>Usually, database handles data processing much faster and cleaner than CPython will ever do.</li> <li>It's preferable to do all the complex joins and simple data manipulations with SQL.</li> <li>It's preferable to aggregate JSONs in DB for responses with nested objects.</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                   text(\"'id', profiles.id\"),\n                   text(\"'first_name', profiles.first_name\"),\n                   text(\"'last_name', profiles.last_name\"),\n                   text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n       if isinstance(creator, str):  # i.e. json\n          return orjson.loads(creator)\n\n       return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\n   posts = await service.get_posts(creator[\"id\"])\n\n   return posts\n</code></pre> <p>If an aggregated data form DB is a simple JSON, then take a look at Pydantic's <code>Json</code> field type, which will load raw JSON first.</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre>"},{"location":"raw_en/#20-validate-hosts-if-users-can-send-publicly-available-urls","title":"20. Validate hosts, if users can send publicly available URLs","text":"<p>For example, we have a specific endpoint which:</p> <ol> <li>accepts media file from the user,</li> <li>generates unique url for this file,</li> <li>returns url to user,</li> <li>which they will use in other endpoints like <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>these endpoints accept files only from whitelisted hosts</li> <li>uploads file to AWS with this name and matching URL.</li> </ol> <p>If we don't whitelist URL hosts, then bad users will have a chance to upload dangerous links.</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n\"\"\"Extend pydantic's AnyUrl validation to whitelist URL hosts.\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre>"},{"location":"raw_en/#21-raise-a-valueerror-in-custom-pydantic-validators-if-schema-directly-faces-the-client","title":"21. Raise a ValueError in custom pydantic validators, if schema directly faces the client","text":"<p>It will return a nice detailed response to users.</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response Example:</p> <p></p>"},{"location":"raw_en/#22-dont-forget-fastapi-converts-response-pydantic-object-to-dict-then-to-an-instance-of-responsemodel-then-to-dict-then-to-json","title":"22. Don't forget FastAPI converts Response Pydantic Object to Dict then to an instance of ResponseModel then to Dict then to JSON","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>Logs Output:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre>"},{"location":"raw_en/#23-if-you-must-use-sync-sdk-then-run-it-in-a-thread-pool","title":"23. If you must use sync SDK, then run it in a thread pool","text":"<p>If you must use a library to interact with external services, and it's not <code>async</code>, then make the HTTP calls in an external worker thread.</p> <p>For a simple example, we could use our well-known <code>run_in_threadpool</code> from starlette.</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"raw_en/#24-use-linters-black-isort-autoflake","title":"24. Use linters (black, isort, autoflake)","text":"<p>With linters, you can forget about formatting the code and focus on writing the business logic.</p> <p>Black is the uncompromising code formatter that eliminates so many small decisions you have to make during development. Other linters help you write cleaner code and follow the PEP8.</p> <p>It's a popular good practice to use pre-commit hooks, but just using the script was ok for us.</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre>"},{"location":"raw_en/#bonus-section","title":"Bonus Section","text":"<p>Some very kind people shared their own experience and best practices that are definitely worth reading. Check them out at issues section of the project.</p> <p>For instance, lowercase00 has described in details their best practices working with permissions &amp; auth, class-based services &amp; views, task queues, custom response serializers, configuration with dynaconf, etc.  </p> <p>If you have something to share about your experience working with FastAPI, whether it's good or bad, you are very welcome to create a new issue. It is our pleasure to read it.</p>"},{"location":"restapi/","title":"Restful API \u8bbe\u8ba1\u6307\u5357","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357</p> <p>\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u5206\u4e3a\u524d\u7aef\u548c\u540e\u7aef\u4e24\u4e2a\u90e8\u5206\u3002\u5f53\u524d\u7684\u53d1\u5c55\u8d8b\u52bf\uff0c\u5c31\u662f\u524d\u7aef\u8bbe\u5907\u5c42\u51fa\u4e0d\u7a77\uff08\u624b\u673a\u3001\u5e73\u677f\u3001\u684c\u9762\u7535\u8111\u3001\u5176\u4ed6\u4e13\u7528\u8bbe\u5907\u2026\u2026\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u7edf\u4e00\u7684\u673a\u5236\uff0c\u65b9\u4fbf\u4e0d\u540c\u7684\u524d\u7aef\u8bbe\u5907\u4e0e\u540e\u7aef\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u5bfc\u81f4API\u6784\u67b6\u7684\u6d41\u884c\uff0c\u751a\u81f3\u51fa\u73b0\u201cAPI First\u201d\u7684\u8bbe\u8ba1\u601d\u60f3\u3002</p> <p>RESTful API\u662f\u76ee\u524d\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u5957\u4e92\u8054\u7f51\u5e94\u7528\u7a0b\u5e8f\u7684API\u8bbe\u8ba1\u7406\u8bba\u3002\u6211\u4ee5\u524d\u5199\u8fc7\u4e00\u7bc7\u300a\u7406\u89e3RESTful\u67b6\u6784\u300b\uff0c\u63a2\u8ba8\u5982\u4f55\u7406\u89e3\u8fd9\u4e2a\u6982\u5ff5\u3002\u4eca\u5929\uff0c\u6211\u5c06\u4ecb\u7ecdRESTful API\u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u63a2\u8ba8\u5982\u4f55\u8bbe\u8ba1\u4e00\u5957\u5408\u7406\u3001\u597d\u7528\u7684API\u3002\u6211\u7684\u4e3b\u8981\u53c2\u8003\u8d44\u6599\u662f\u8fd9\u7bc7\u300aPrinciples of good RESTful API Design\u300b\u3002</p> <p></p>"},{"location":"restapi/#\u4e00\u534f\u8bae","title":"\u4e00\u3001\u534f\u8bae","text":"<p>\u603b\u662f\u4f7f\u7528HTTPs\u534f\u8bae\u3002</p>"},{"location":"restapi/#\u4e8c\u57df\u540d","title":"\u4e8c\u3001\u57df\u540d","text":"<p>\u5e94\u8be5\u5c3d\u91cf\u5c06API\u90e8\u7f72\u5728\u4e13\u7528\u57df\u540d\u4e4b\u4e0b\u3002</p> <pre><code>https://api.example.com\n</code></pre> <p>\u5982\u679c\u786e\u5b9aAPI\u5f88\u7b80\u5355\uff0c\u4e0d\u4f1a\u6709\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u53ef\u4ee5\u8003\u8651\u653e\u5728\u4e3b\u57df\u540d\u4e0b\u3002</p> <pre><code>https://example.org/api/\n</code></pre>"},{"location":"restapi/#\u4e09\u7248\u672cversioning","title":"\u4e09\u3001\u7248\u672c\uff08Versioning\uff09","text":"<p>\u5e94\u8be5\u5c06API\u7684\u7248\u672c\u53f7\u653e\u5165URL\u3002</p> <pre><code>https://api.example.com/v1/\n</code></pre> <p>\u53e6\u4e00\u79cd\u505a\u6cd5\u662f\uff0c\u5c06\u7248\u672c\u53f7\u653e\u5728HTTP\u5934\u4fe1\u606f\u4e2d\uff0c\u4f46\u4e0d\u5982\u653e\u5165URL\u65b9\u4fbf\u548c\u76f4\u89c2\u3002</p>"},{"location":"restapi/#\u56db\u8def\u5f84endpoint","title":"\u56db\u3001\u8def\u5f84\uff08Endpoint\uff09","text":"<p>\u8def\u5f84\u53c8\u79f0\u201c\u7ec8\u70b9\u201d\uff08endpoint\uff09\uff0c\u8868\u793aAPI\u7684\u5177\u4f53\u7f51\u5740\u3002</p> <p>\u5728RESTful\u67b6\u6784\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u5740\u4ee3\u8868\u4e00\u79cd\u8d44\u6e90\uff08resource\uff09\uff0c\u6240\u4ee5\u7f51\u5740\u4e2d\u4e0d\u80fd\u6709\u52a8\u8bcd\uff0c\u53ea\u80fd\u6709\u540d\u8bcd\uff0c\u800c\u4e14\u6240\u7528\u7684\u540d\u8bcd\u5f80\u5f80\u4e0e\u6570\u636e\u5e93\u7684\u8868\u683c\u540d\u5bf9\u5e94\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u8868\u90fd\u662f\u540c\u79cd\u8bb0\u5f55\u7684\u201c\u96c6\u5408\u201d\uff08collection\uff09\uff0c\u6240\u4ee5API\u4e2d\u7684\u540d\u8bcd\u4e5f\u5e94\u8be5\u4f7f\u7528\u590d\u6570\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4e00\u4e2aAPI\u63d0\u4f9b\u52a8\u7269\u56ed\uff08zoo\uff09\u7684\u4fe1\u606f\uff0c\u8fd8\u5305\u62ec\u5404\u79cd\u52a8\u7269\u548c\u96c7\u5458\u7684\u4fe1\u606f\uff0c\u5219\u5b83\u7684\u8def\u5f84\u5e94\u8be5\u8bbe\u8ba1\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <ul> <li>https://api.example.com/v1/zoos</li> <li>https://api.example.com/v1/animals</li> <li>https://api.example.com/v1/employees</li> </ul>"},{"location":"restapi/#\u4e94http\u52a8\u8bcd","title":"\u4e94\u3001HTTP\u52a8\u8bcd","text":"<p>\u5bf9\u4e8e\u8d44\u6e90\u7684\u5177\u4f53\u64cd\u4f5c\u7c7b\u578b\uff0c\u7531HTTP\u52a8\u8bcd\u8868\u793a\u3002</p> <p>\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u6709\u4e0b\u9762\u4e94\u4e2a\uff08\u62ec\u53f7\u91cc\u662f\u5bf9\u5e94\u7684SQL\u547d\u4ee4\uff09\u3002</p> <ul> <li>GET\uff08SELECT\uff09\uff1a\u4ece\u670d\u52a1\u5668\u53d6\u51fa\u8d44\u6e90\uff08\u4e00\u9879\u6216\u591a\u9879\uff09\u3002</li> <li>POST\uff08CREATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90\u3002</li> <li>PUT\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u540e\u7684\u5b8c\u6574\u8d44\u6e90\uff09\u3002</li> <li>PATCH\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u7684\u5c5e\u6027\uff09\u3002</li> <li>DELETE\uff08DELETE\uff09\uff1a\u4ece\u670d\u52a1\u5668\u5220\u9664\u8d44\u6e90\u3002</li> </ul> <p>\u8fd8\u6709\u4e24\u4e2a\u4e0d\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u3002</p> <ul> <li>HEAD\uff1a\u83b7\u53d6\u8d44\u6e90\u7684\u5143\u6570\u636e\u3002</li> <li>OPTIONS\uff1a\u83b7\u53d6\u4fe1\u606f\uff0c\u5173\u4e8e\u8d44\u6e90\u7684\u54ea\u4e9b\u5c5e\u6027\u662f\u5ba2\u6237\u7aef\u53ef\u4ee5\u6539\u53d8\u7684\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <ul> <li>GET /zoos\uff1a\u5217\u51fa\u6240\u6709\u52a8\u7269\u56ed</li> <li>POST /zoos\uff1a\u65b0\u5efa\u4e00\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID\uff1a\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f</li> <li>PUT /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u5168\u90e8\u4fe1\u606f\uff09</li> <li>PATCH /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u90e8\u5206\u4fe1\u606f\uff09</li> <li>DELETE /zoos/ID\uff1a\u5220\u9664\u67d0\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID/animals\uff1a\u5217\u51fa\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6240\u6709\u52a8\u7269</li> <li>DELETE /zoos/ID/animals/ID\uff1a\u5220\u9664\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6307\u5b9a\u52a8\u7269</li> </ul>"},{"location":"restapi/#\u516d\u8fc7\u6ee4\u4fe1\u606ffiltering","title":"\u516d\u3001\u8fc7\u6ee4\u4fe1\u606f\uff08Filtering\uff09","text":"<p>\u5982\u679c\u8bb0\u5f55\u6570\u91cf\u5f88\u591a\uff0c\u670d\u52a1\u5668\u4e0d\u53ef\u80fd\u90fd\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u7528\u6237\u3002API\u5e94\u8be5\u63d0\u4f9b\u53c2\u6570\uff0c\u8fc7\u6ee4\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u53c2\u6570\u3002</p> <ul> <li>?limit=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u6570\u91cf</li> <li>?offset=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002</li> <li>?sortby=name&amp;order=asc\uff1a\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u6309\u7167\u54ea\u4e2a\u5c5e\u6027\u6392\u5e8f\uff0c\u4ee5\u53ca\u6392\u5e8f\u987a\u5e8f\u3002</li> <li>?animal_type_id=1\uff1a\u6307\u5b9a\u7b5b\u9009\u6761\u4ef6</li> </ul> <p>\u53c2\u6570\u7684\u8bbe\u8ba1\u5141\u8bb8\u5b58\u5728\u5197\u4f59\uff0c\u5373\u5141\u8bb8API\u8def\u5f84\u548cURL\u53c2\u6570\u5076\u5c14\u6709\u91cd\u590d\u3002\u6bd4\u5982\uff0cGET /zoo/ID/animals \u4e0e GET /animals?zoo_id=ID \u7684\u542b\u4e49\u662f\u76f8\u540c\u7684\u3002</p>"},{"location":"restapi/#\u4e03\u72b6\u6001\u7801status-codes","title":"\u4e03\u3001\u72b6\u6001\u7801\uff08Status Codes\uff09","text":"<p>\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u72b6\u6001\u7801\u548c\u63d0\u793a\u4fe1\u606f\uff0c\u5e38\u89c1\u7684\u6709\u4ee5\u4e0b\u4e00\u4e9b\uff08\u65b9\u62ec\u53f7\u4e2d\u662f\u8be5\u72b6\u6001\u7801\u5bf9\u5e94\u7684HTTP\u52a8\u8bcd\uff09\u3002</p> <ul> <li>200 OK \u2013 [GET]\uff1a\u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\uff08Idempotent\uff09\u3002</li> <li>201 CREATED \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u6210\u529f\u3002</li> <li>204 NO CONTENT \u2013 [DELETE]\uff1a\u7528\u6237\u5220\u9664\u6570\u636e\u6210\u529f\u3002</li> <li>400 INVALID REQUEST \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002\u3002</li> <li>404 NOT FOUND \u2013 [*]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u9488\u5bf9\u7684\u662f\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002</li> <li>500 INTERNAL SERVER ERROR \u2013 [*]\uff1a\u670d\u52a1\u5668\u53d1\u751f\u9519\u8bef\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u5224\u65ad\u53d1\u51fa\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002</li> </ul> <p>\u72b6\u6001\u7801\u7684\u5b8c\u5168\u5217\u8868\u53c2\u89c1\u8fd9\u91cc\u3002</p>"},{"location":"restapi/#\u516b\u8fd4\u56de\u7ed3\u679c","title":"\u516b\u3001\u8fd4\u56de\u7ed3\u679c","text":"<p>\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u7b26\u5408\u4ee5\u4e0b\u89c4\u8303\u3002</p> <ul> <li>GET /collection\uff1a\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\u7684\u5217\u8868\uff08\u6570\u7ec4\uff09</li> <li>GET /collection/resource\uff1a\u8fd4\u56de\u5355\u4e2a\u8d44\u6e90\u5bf9\u8c61</li> <li>POST /collection\uff1a\u8fd4\u56de\u65b0\u751f\u6210\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PUT /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PATCH /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>DELETE /collection/resource\uff1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6587\u6863</li> </ul>"},{"location":"restapi/#\u4e5d\u5176\u4ed6","title":"\u4e5d\u3001\u5176\u4ed6","text":"<p>\uff083\uff09API\u5e94\u8be5\u662fHypermedia\u7684\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002</p> <p>\u6bd4\u5982\uff0c\u5f53\u7528\u6237\u5411api.example.com\u7684\u6839\u76ee\u5f55\u53d1\u51fa\u8bf7\u6c42\uff0c\u4f1a\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u6587\u6863\u3002</p> <pre><code>{\"link\": {\n\"rel\":   \"collection https://www.example.com/zoos\",\n\"href\":  \"https://api.example.com/zoos\",\n\"title\": \"List of zoos\",\n\"type\":  \"application/vnd.yourformat+json\"\n}}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u6587\u6863\u4e2d\u6709\u4e00\u4e2alink\u5c5e\u6027\uff0c\u7528\u6237\u8bfb\u53d6\u8fd9\u4e2a\u5c5e\u6027\u5c31\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u8c03\u7528\u4ec0\u4e48API\u4e86\u3002rel\u8868\u793a\u8fd9\u4e2aAPI\u4e0e\u5f53\u524d\u7f51\u5740\u7684\u5173\u7cfb\uff08collection\u5173\u7cfb\uff0c\u5e76\u7ed9\u51fa\u8be5collection\u7684\u7f51\u5740\uff09\uff0chref\u8868\u793aAPI\u7684\u8def\u5f84\uff0ctitle\u8868\u793aAPI\u7684\u6807\u9898\uff0ctype\u8868\u793a\u8fd4\u56de\u7c7b\u578b\u3002</p> <p>Hypermedia API\u7684\u8bbe\u8ba1\u88ab\u79f0\u4e3aHATEOAS\u3002Github\u7684API\u5c31\u662f\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8bbf\u95eeapi.github.com\u4f1a\u5f97\u5230\u4e00\u4e2a\u6240\u6709\u53ef\u7528API\u7684\u7f51\u5740\u5217\u8868\u3002</p> <pre><code>{\n\"current_user_url\": \"https://api.github.com/user\",\n\"authorizations_url\": \"https://api.github.com/authorizations\",\n// ...\n}\n</code></pre> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u53bb\u8bbf\u95eeapi.github.com/user\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u7ed3\u679c\u3002</p> <pre><code>{\n\"message\": \"Requires authentication\",\n\"documentation_url\": \"https://developer.github.com/v3\"\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u670d\u52a1\u5668\u7ed9\u51fa\u4e86\u63d0\u793a\u4fe1\u606f\uff0c\u4ee5\u53ca\u6587\u6863\u7684\u7f51\u5740\u3002</p>"},{"location":"restapi/#\u5341\u5176\u4ed6","title":"\u5341\u3001\u5176\u4ed6","text":"<p>\uff081\uff09API\u7684\u8eab\u4efd\u8ba4\u8bc1\u5e94\u8be5\u4f7f\u7528OAuth 2.0\u6846\u67b6\u3002</p> <p>\uff082\uff09\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5e94\u8be5\u4f7f\u7528JSON\uff0c\u4e0d\u5e94\u4f7f\u7528XML\uff08\u66f4\u4e0d\u5fc5\u63d0SOAP\u4e86\uff09\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"restapibsetp/","title":"RESTful API \u6700\u4f73\u5b9e\u8df5","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>RESTful \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 API \u8bbe\u8ba1\u89c4\u8303\uff0c\u7528\u4e8e Web \u6570\u636e\u63a5\u53e3\u7684\u8bbe\u8ba1\u3002</p> <p>\u5b83\u7684\u5927\u539f\u5219\u5bb9\u6613\u628a\u63e1\uff0c\u4f46\u662f\u7ec6\u8282\u4e0d\u5bb9\u6613\u505a\u5bf9\u3002\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u603b\u7ed3 API \u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u4ecb\u7ecd\u600e\u4e48\u8bbe\u8ba1\u51fa\u6613\u4e8e\u7406\u89e3\u548c\u4f7f\u7528\u7684 API\u3002</p> <p></p>"},{"location":"restapibsetp/#\u4e00url-\u8bbe\u8ba1","title":"\u4e00\u3001URL \u8bbe\u8ba1","text":""},{"location":"restapibsetp/#11-\u52a8\u8bcd--\u8c13\u8bed","title":"1.1 \u52a8\u8bcd + \u8c13\u8bed","text":"<p>RESTful \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u64cd\u4f5c\u6307\u4ee4\u90fd\u662f\u201c\u52a8\u8bcd + \u8c13\u8bed\u201d\u7684\u7ed3\u6784\u3002\u6bd4\u5982\uff0c<code>GET /articles</code>\u8fd9\u4e2a\u547d\u4ee4\uff0c<code>GET</code>\u662f\u52a8\u8bcd\uff0c<code>/articles</code>\u662f\u8c13\u8bed\u3002</p> <p>\u52a8\u8bcd\u901a\u5e38\u5c31\u662f\u4e94\u79cd HTTP \u65b9\u6cd5\uff0c\u5bf9\u5e94 CRUD \u64cd\u4f5c\u3002</p> <ul> <li>GET\uff1a\u8bfb\u53d6\uff08Read\uff09</li> <li>POST\uff1a\u65b0\u5efa\uff08Create\uff09</li> <li>PUT\uff1a\u66f4\u65b0\uff08Update\uff09</li> <li>PATCH\uff1a\u66f4\u65b0\uff08Update\uff09\uff0c\u901a\u5e38\u662f\u90e8\u5206\u66f4\u65b0</li> <li>DELETE\uff1a\u5220\u9664\uff08Delete\uff09</li> </ul> <p>\u6839\u636e HTTP \u89c4\u8303\uff0c\u52a8\u8bcd\u4e00\u5f8b\u5927\u5199\u3002</p>"},{"location":"restapibsetp/#12-\u52a8\u8bcd\u7684\u8986\u76d6","title":"1.2 \u52a8\u8bcd\u7684\u8986\u76d6","text":"<p>\u6709\u4e9b\u5ba2\u6237\u7aef\u53ea\u80fd\u4f7f\u7528<code>GET</code>\u548c<code>POST</code>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002\u670d\u52a1\u5668\u5fc5\u987b\u63a5\u53d7<code>POST</code>\u6a21\u62df\u5176\u4ed6\u4e09\u4e2a\u65b9\u6cd5\uff08<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>DELETE</code>\uff09\u3002</p> <p>\u8fd9\u65f6\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684 HTTP \u8bf7\u6c42\uff0c\u8981\u52a0\u4e0a<code>X-HTTP-Method-Override</code>\u5c5e\u6027\uff0c\u544a\u8bc9\u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u52a8\u8bcd\uff0c\u8986\u76d6<code>POST</code>\u65b9\u6cd5\u3002</p> <pre><code>POST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>X-HTTP-Method-Override</code>\u6307\u5b9a\u672c\u6b21\u8bf7\u6c42\u7684\u65b9\u6cd5\u662f<code>PUT</code>\uff0c\u800c\u4e0d\u662f<code>POST</code>\u3002</p>"},{"location":"restapibsetp/#13-\u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","title":"1.3 \u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","text":"<p>\u8c13\u8bed\u5c31\u662f API \u7684 URL\uff0c\u662f HTTP \u52a8\u8bcd\u4f5c\u7528\u7684\u5bf9\u8c61\u3002\u5b83\u5e94\u8be5\u662f\u540d\u8bcd\uff0c\u4e0d\u80fd\u662f\u52a8\u8bcd\u3002\u6bd4\u5982\uff0c<code>/articles</code>\u8fd9\u4e2a URL \u5c31\u662f\u6b63\u786e\u7684\uff0c\u800c\u4e0b\u9762\u7684 URL \u4e0d\u662f\u540d\u8bcd\uff0c\u6240\u4ee5\u90fd\u662f\u9519\u8bef\u7684\u3002</p> <ul> <li>/getAllCars</li> <li>/createNewCar</li> <li>/deleteAllRedCars</li> </ul>"},{"location":"restapibsetp/#14-\u590d\u6570-url","title":"1.4 \u590d\u6570 URL","text":"<p>\u65e2\u7136 URL \u662f\u540d\u8bcd\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u590d\u6570\uff0c\u8fd8\u662f\u5355\u6570\uff1f</p> <p>\u8fd9\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u5b9a\uff0c\u4f46\u662f\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u8bfb\u53d6\u4e00\u4e2a\u96c6\u5408\uff0c\u6bd4\u5982<code>GET /articles</code>\uff08\u8bfb\u53d6\u6240\u6709\u6587\u7ae0\uff09\uff0c\u8fd9\u91cc\u660e\u663e\u5e94\u8be5\u662f\u590d\u6570\u3002</p> <p>\u4e3a\u4e86\u7edf\u4e00\u8d77\u89c1\uff0c\u5efa\u8bae\u90fd\u4f7f\u7528\u590d\u6570 URL\uff0c\u6bd4\u5982<code>GET /articles/2</code>\u8981\u597d\u4e8e<code>GET /article/2</code>\u3002</p>"},{"location":"restapibsetp/#15-\u907f\u514d\u591a\u7ea7-url","title":"1.5 \u907f\u514d\u591a\u7ea7 URL","text":"<p>\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u8d44\u6e90\u9700\u8981\u591a\u7ea7\u5206\u7c7b\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u5199\u51fa\u591a\u7ea7\u7684 URL\uff0c\u6bd4\u5982\u83b7\u53d6\u67d0\u4e2a\u4f5c\u8005\u7684\u67d0\u4e00\u7c7b\u6587\u7ae0\u3002</p> <pre><code>GET /authors/12/categories/2\n</code></pre> <p>\u8fd9\u79cd URL \u4e0d\u5229\u4e8e\u6269\u5c55\uff0c\u8bed\u4e49\u4e5f\u4e0d\u660e\u786e\uff0c\u5f80\u5f80\u8981\u60f3\u4e00\u4f1a\uff0c\u624d\u80fd\u660e\u767d\u542b\u4e49\u3002</p> <p>\u66f4\u597d\u7684\u505a\u6cd5\u662f\uff0c\u9664\u4e86\u7b2c\u4e00\u7ea7\uff0c\u5176\u4ed6\u7ea7\u522b\u90fd\u7528\u67e5\u8be2\u5b57\u7b26\u4e32\u8868\u8fbe\u3002</p> <pre><code>GET /authors/12?categories=2\n</code></pre> <p>\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u67e5\u8be2\u5df2\u53d1\u5e03\u7684\u6587\u7ae0\u3002\u4f60\u53ef\u80fd\u4f1a\u8bbe\u8ba1\u6210\u4e0b\u9762\u7684 URL\u3002</p> <pre><code>GET /articles/published\n</code></pre> <p>\u67e5\u8be2\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u660e\u663e\u66f4\u597d\u3002</p> <pre><code>GET /articles?published=true\n</code></pre>"},{"location":"restapibsetp/#\u4e8c\u72b6\u6001\u7801","title":"\u4e8c\u3001\u72b6\u6001\u7801","text":""},{"location":"restapibsetp/#21-\u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","title":"2.1 \u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","text":"<p>\u5ba2\u6237\u7aef\u7684\u6bcf\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u90fd\u5fc5\u987b\u7ed9\u51fa\u56de\u5e94\u3002\u56de\u5e94\u5305\u62ec\u72b6\u6001\u7801\u548c\u6570\u636e\u4e24\u90e8\u5206\u3002</p> <p>\u72b6\u6001\u7801\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u6570\uff0c\u5206\u6210\u4e94\u4e2a\u7c7b\u522b\u3002</p> <ul> <li><code>1xx</code>\uff1a\u76f8\u606f</li> <li><code>2xx</code>\uff1a\u64cd\u4f5c\u6210\u529f</li> <li><code>3xx</code>\uff1a\u91cd\u5b9a\u5411</li> <li><code>4xx</code>\uff1a\u5ba2\u6237\u7aef\u9519\u8bef</li> <li><code>5xx</code>\uff1a\u670d\u52a1\u5668\u9519\u8bef</li> </ul> <p>\u8fd9\u4e94\u5927\u7c7b\u603b\u5171\u5305\u542b100\u591a\u79cd\u72b6\u6001\u7801\uff0c\u8986\u76d6\u4e86\u7edd\u5927\u90e8\u5206\u53ef\u80fd\u9047\u5230\u7684\u60c5\u51b5\u3002\u6bcf\u4e00\u79cd\u72b6\u6001\u7801\u90fd\u6709\u6807\u51c6\u7684\uff08\u6216\u8005\u7ea6\u5b9a\u7684\uff09\u89e3\u91ca\uff0c\u5ba2\u6237\u7aef\u53ea\u9700\u67e5\u770b\u72b6\u6001\u7801\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u53d1\u751f\u4e86\u4ec0\u4e48\u60c5\u51b5\uff0c\u6240\u4ee5\u670d\u52a1\u5668\u5e94\u8be5\u8fd4\u56de\u5c3d\u53ef\u80fd\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <p>API \u4e0d\u9700\u8981<code>1xx</code>\u72b6\u6001\u7801\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4ed6\u56db\u7c7b\u72b6\u6001\u7801\u7684\u7cbe\u786e\u542b\u4e49\u3002</p>"},{"location":"restapibsetp/#22-2xx-\u72b6\u6001\u7801","title":"2.2 2xx \u72b6\u6001\u7801","text":"<p><code>200</code>\u72b6\u6001\u7801\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u66f4\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <ul> <li>GET: 200 OK</li> <li>POST: 201 Created</li> <li>PUT: 200 OK</li> <li>PATCH: 200 OK</li> <li>DELETE: 204 No Content</li> </ul> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>POST</code>\u8fd4\u56de<code>201</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u751f\u6210\u4e86\u65b0\u7684\u8d44\u6e90\uff1b<code>DELETE</code>\u8fd4\u56de<code>204</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u8d44\u6e90\u5df2\u7ecf\u4e0d\u5b58\u5728\u3002</p> <p>\u6b64\u5916\uff0c<code>202 Accepted</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u5668\u5df2\u7ecf\u6536\u5230\u8bf7\u6c42\uff0c\u4f46\u8fd8\u672a\u8fdb\u884c\u5904\u7406\uff0c\u4f1a\u5728\u672a\u6765\u518d\u5904\u7406\uff0c\u901a\u5e38\u7528\u4e8e\u5f02\u6b65\u64cd\u4f5c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 202 Accepted\n\n{\n  \"task\": {\n    \"href\": \"/api/company/job-management/jobs/2130040\",\n    \"id\": \"2130040\"\n  }\n}\n</code></pre>"},{"location":"restapibsetp/#23-3xx-\u72b6\u6001\u7801","title":"2.3 3xx \u72b6\u6001\u7801","text":"<p>API \u7528\u4e0d\u5230<code>301</code>\u72b6\u6001\u7801\uff08\u6c38\u4e45\u91cd\u5b9a\u5411\uff09\u548c<code>302</code>\u72b6\u6001\u7801\uff08\u6682\u65f6\u91cd\u5b9a\u5411\uff0c<code>307</code>\u4e5f\u662f\u8fd9\u4e2a\u542b\u4e49\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u7531\u5e94\u7528\u7ea7\u522b\u8fd4\u56de\uff0c\u6d4f\u89c8\u5668\u4f1a\u76f4\u63a5\u8df3\u8f6c\uff0cAPI \u7ea7\u522b\u53ef\u4ee5\u4e0d\u8003\u8651\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>API \u7528\u5230\u7684<code>3xx</code>\u72b6\u6001\u7801\uff0c\u4e3b\u8981\u662f<code>303 See Other</code>\uff0c\u8868\u793a\u53c2\u8003\u53e6\u4e00\u4e2a URL\u3002\u5b83\u4e0e<code>302</code>\u548c<code>307</code>\u7684\u542b\u4e49\u4e00\u6837\uff0c\u4e5f\u662f\u201c\u6682\u65f6\u91cd\u5b9a\u5411\u201d\uff0c\u533a\u522b\u5728\u4e8e<code>302</code>\u548c<code>307</code>\u7528\u4e8e<code>GET</code>\u8bf7\u6c42\uff0c\u800c<code>303</code>\u7528\u4e8e<code>POST</code>\u3001<code>PUT</code>\u548c<code>DELETE</code>\u8bf7\u6c42\u3002\u6536\u5230<code>303</code>\u4ee5\u540e\uff0c\u6d4f\u89c8\u5668\u4e0d\u4f1a\u81ea\u52a8\u8df3\u8f6c\uff0c\u800c\u4f1a\u8ba9\u7528\u6237\u81ea\u5df1\u51b3\u5b9a\u4e0b\u4e00\u6b65\u600e\u4e48\u529e\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 303 See Other\nLocation: /api/orders/12345\n</code></pre>"},{"location":"restapibsetp/#24-4xx-\u72b6\u6001\u7801","title":"2.4 4xx \u72b6\u6001\u7801","text":"<p><code>4xx</code>\u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u9519\u8bef\uff0c\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002</p> <p><code>400 Bad Request</code>\uff1a\u670d\u52a1\u5668\u4e0d\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u672a\u505a\u4efb\u4f55\u5904\u7406\u3002</p> <p><code>401 Unauthorized</code>\uff1a\u7528\u6237\u672a\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\uff0c\u6216\u8005\u6ca1\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3002</p> <p><code>403 Forbidden</code>\uff1a\u7528\u6237\u901a\u8fc7\u4e86\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u4e0d\u5177\u6709\u8bbf\u95ee\u8d44\u6e90\u6240\u9700\u7684\u6743\u9650\u3002</p> <p><code>404 Not Found</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u6216\u4e0d\u53ef\u7528\u3002</p> <p><code>405 Method Not Allowed</code>\uff1a\u7528\u6237\u5df2\u7ecf\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u6240\u7528\u7684 HTTP \u65b9\u6cd5\u4e0d\u5728\u4ed6\u7684\u6743\u9650\u4e4b\u5185\u3002</p> <p><code>410 Gone</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u5df2\u4ece\u8fd9\u4e2a\u5730\u5740\u8f6c\u79fb\uff0c\u4e0d\u518d\u53ef\u7528\u3002</p> <p><code>415 Unsupported Media Type</code>\uff1a\u5ba2\u6237\u7aef\u8981\u6c42\u7684\u8fd4\u56de\u683c\u5f0f\u4e0d\u652f\u6301\u3002\u6bd4\u5982\uff0cAPI \u53ea\u80fd\u8fd4\u56de JSON \u683c\u5f0f\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u8981\u6c42\u8fd4\u56de XML \u683c\u5f0f\u3002</p> <p><code>422 Unprocessable Entity</code> \uff1a\u5ba2\u6237\u7aef\u4e0a\u4f20\u7684\u9644\u4ef6\u65e0\u6cd5\u5904\u7406\uff0c\u5bfc\u81f4\u8bf7\u6c42\u5931\u8d25\u3002</p> <p><code>429 Too Many Requests</code>\uff1a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6b21\u6570\u8d85\u8fc7\u9650\u989d\u3002</p>"},{"location":"restapibsetp/#25-5xx-\u72b6\u6001\u7801","title":"2.5 5xx \u72b6\u6001\u7801","text":"<p><code>5xx</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u7aef\u9519\u8bef\u3002\u4e00\u822c\u6765\u8bf4\uff0cAPI \u4e0d\u4f1a\u5411\u7528\u6237\u900f\u9732\u670d\u52a1\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6240\u4ee5\u53ea\u8981\u4e24\u4e2a\u72b6\u6001\u7801\u5c31\u591f\u4e86\u3002</p> <p><code>500 Internal Server Error</code>\uff1a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6709\u6548\uff0c\u670d\u52a1\u5668\u5904\u7406\u65f6\u53d1\u751f\u4e86\u610f\u5916\u3002</p> <p><code>503 Service Unavailable</code>\uff1a\u670d\u52a1\u5668\u65e0\u6cd5\u5904\u7406\u8bf7\u6c42\uff0c\u4e00\u822c\u7528\u4e8e\u7f51\u7ad9\u7ef4\u62a4\u72b6\u6001\u3002</p>"},{"location":"restapibsetp/#\u4e09\u670d\u52a1\u5668\u56de\u5e94","title":"\u4e09\u3001\u670d\u52a1\u5668\u56de\u5e94","text":""},{"location":"restapibsetp/#31-\u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","title":"3.1 \u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","text":"<p>API \u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4e0d\u5e94\u8be5\u662f\u7eaf\u6587\u672c\uff0c\u800c\u5e94\u8be5\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u8fd4\u56de\u6807\u51c6\u7684\u7ed3\u6784\u5316\u6570\u636e\u3002\u6240\u4ee5\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684 HTTP \u5934\u7684<code>Content-Type</code>\u5c5e\u6027\u8981\u8bbe\u4e3a<code>application/json</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u8bf7\u6c42\u65f6\uff0c\u4e5f\u8981\u660e\u786e\u544a\u8bc9\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u63a5\u53d7 JSON \u683c\u5f0f\uff0c\u5373\u8bf7\u6c42\u7684 HTTP \u5934\u7684<code>ACCEPT</code>\u5c5e\u6027\u4e5f\u8981\u8bbe\u6210<code>application/json</code>\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>GET /orders/2 HTTP/1.1 \nAccept: application/json\n</code></pre>"},{"location":"restapibsetp/#32-\u53d1\u751f\u9519\u8bef\u65f6\u4e0d\u8981\u8fd4\u56de-200-\u72b6\u6001\u7801","title":"3.2 \u53d1\u751f\u9519\u8bef\u65f6\uff0c\u4e0d\u8981\u8fd4\u56de 200 \u72b6\u6001\u7801","text":"<p>\u6709\u4e00\u79cd\u4e0d\u6070\u5f53\u7684\u505a\u6cd5\u662f\uff0c\u5373\u4f7f\u53d1\u751f\u9519\u8bef\uff0c\u4e5f\u8fd4\u56de<code>200</code>\u72b6\u6001\u7801\uff0c\u628a\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\"status\": \"failure\",\n\"data\": {\n\"error\": \"Expected at least two items in list.\"\n}\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u89e3\u6790\u6570\u636e\u4f53\u4ee5\u540e\uff0c\u624d\u80fd\u5f97\u77e5\u64cd\u4f5c\u5931\u8d25\u3002</p> <p>\u8fd9\u5f20\u505a\u6cd5\u5b9e\u9645\u4e0a\u53d6\u6d88\u4e86\u72b6\u6001\u7801\uff0c\u8fd9\u662f\u5b8c\u5168\u4e0d\u53ef\u53d6\u7684\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff0c\u72b6\u6001\u7801\u53cd\u6620\u53d1\u751f\u7684\u9519\u8bef\uff0c\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\u8fd4\u56de\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n\"error\": \"Invalid payoad.\",\n\"detail\": {\n\"surname\": \"This field is required.\"\n}\n}\n</code></pre>"},{"location":"restapibsetp/#33-\u63d0\u4f9b\u94fe\u63a5","title":"3.3 \u63d0\u4f9b\u94fe\u63a5","text":"<p>API \u7684\u4f7f\u7528\u8005\u672a\u5fc5\u77e5\u9053\uff0cURL \u662f\u600e\u4e48\u8bbe\u8ba1\u7684\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\uff0c\u5728\u56de\u5e94\u4e2d\uff0c\u7ed9\u51fa\u76f8\u5173\u94fe\u63a5\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u7528\u6237\u53ea\u8981\u8bb0\u4f4f\u4e00\u4e2a URL\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u7684 URL\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u505a HATEOAS\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0cGitHub \u7684 API \u90fd\u5728 api.github.com \u8fd9\u4e2a\u57df\u540d\u3002\u8bbf\u95ee\u5b83\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5176\u4ed6 URL\u3002</p> <pre><code>{\n  ...\n  \"feeds_url\": \"https://api.github.com/feeds\",\n  \"followers_url\": \"https://api.github.com/user/followers\",\n  \"following_url\": \"https://api.github.com/user/following{/target}\",\n  \"gists_url\": \"https://api.github.com/gists{/gist_id}\",\n  \"hub_url\": \"https://api.github.com/hub\",\n  ...\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u56de\u5e94\u4e2d\uff0c\u6311\u4e00\u4e2a URL \u8bbf\u95ee\uff0c\u53c8\u53ef\u4ee5\u5f97\u5230\u522b\u7684 URL\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u4e0d\u9700\u8981\u8bb0\u4f4f  URL \u8bbe\u8ba1\uff0c\u53ea\u8981\u4ece api.github.com \u4e00\u6b65\u6b65\u67e5\u627e\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>HATEOAS \u7684\u683c\u5f0f\u6ca1\u6709\u7edf\u4e00\u89c4\u5b9a\uff0c\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0cGitHub \u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u5c5e\u6027\u653e\u5728\u4e00\u8d77\u3002\u66f4\u597d\u7684\u505a\u6cd5\u5e94\u8be5\u662f\uff0c\u5c06\u76f8\u5173\u94fe\u63a5\u4e0e\u5176\u4ed6\u5c5e\u6027\u5206\u5f00\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\"status\": \"In progress\",\n\"links\": {[\n{ \"rel\":\"cancel\", \"method\": \"delete\", \"href\":\"/api/status/12345\" } ,\n{ \"rel\":\"edit\", \"method\": \"put\", \"href\":\"/api/status/12345\" }\n]}\n}\n</code></pre>"},{"location":"restapibsetp/#\u56db\u53c2\u8003\u94fe\u63a5","title":"\u56db\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>RESTful API Design: 13 Best Practices to Make Your Users Happy, by Florimond Manca</li> <li>API design, by MicroSoft Azure</li> </ul> <p>\uff08\u5b8c\uff09</p>"}]}