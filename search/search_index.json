{"config":{"lang":["ja"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"FastAPI \u6700\u4f73\u5b9e\u8df5","text":"<p>\u6211\u4eec\u5728\u521b\u4e1a\u65f6\u4f7f\u7528\u7684\u5e76\u4e14\u81ea\u4ee5\u4e3a\u662f\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u60ef\u4f8b\u5217\u8868\u3002</p> <p>\u5728\u8fc7\u53bb 1.5 \u5e74\u7684\u751f\u4ea7\u4e2d\uff0c \u6211\u4eec\u4e00\u76f4\u5728\u505a\u51fa\u597d\u7684\u548c\u574f\u7684\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u51b3\u5b9a\u6781\u5927\u5730\u5f71\u54cd\u4e86\u6211\u4eec\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u3002 \u5176\u4e2d\u4e00\u4e9b\u503c\u5f97\u5206\u4eab\u3002</p>"},{"location":"#1-\u9879\u76ee\u7ed3\u6784-\u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","title":"1. \u9879\u76ee\u7ed3\u6784\u3002 \u4e00\u81f4\u4e14\u53ef\u9884\u6d4b","text":"<p>\u6784\u5efa\u9879\u76ee\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u4f46\u6700\u597d\u7684\u7ed3\u6784\u662f\u4e00\u81f4\u3001\u76f4\u63a5\u4e14\u6ca1\u6709\u610f\u5916\u7684\u7ed3\u6784\u3002</p> <ul> <li>\u5982\u679c\u67e5\u770b\u9879\u76ee\u7ed3\u6784\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u9879\u76ee\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u7ed3\u6784\u53ef\u80fd\u4e0d\u6e05\u695a\u3002</li> <li>\u5982\u679c\u60a8\u5fc5\u987b\u6253\u5f00\u5305\u624d\u80fd\u4e86\u89e3\u5176\u4e2d\u5305\u542b\u54ea\u4e9b\u6a21\u5757\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u5c31\u4e0d\u6e05\u695a\u4e86\u3002</li> <li>\u5982\u679c\u6587\u4ef6\u7684\u91cd\u590d\u7387\u548c\u4f4d\u7f6e\u611f\u89c9\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u60a8\u7684\u9879\u76ee\u7ed3\u6784\u5f88\u7cdf\u7cd5\u3002</li> <li>\u5982\u679c\u67e5\u770b\u6a21\u5757\u7684\u4f4d\u7f6e\u53ca\u5176\u540d\u79f0\u4e0d\u80fd\u8ba9\u60a8\u4e86\u89e3\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u60a8\u7684\u7ed3\u6784\u975e\u5e38\u7cdf\u7cd5\u3002</li> </ul> <p>@tiangolo \u63d0\u4f9b\u7684\u9879\u76ee\u7ed3\u6784\uff08\u6211\u4eec\u6309\u6587\u4ef6\u7c7b\u578b\uff08\u4f8b\u5982 api\u3001crud\u3001\u6a21\u578b\u3001\u6a21\u5f0f\uff09\u5206\u9694\u6587\u4ef6\uff09\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u6216\u8303\u56f4\u8f83\u5c0f\u7684\u9879\u76ee\uff0c\u4f46\u6211\u4eec\u65e0\u6cd5\u5c06\u5b83\u653e\u5165\u6211\u4eec\u5177\u6709\u5927\u91cf\u57df\u548c\u6a21\u5757\u7684\u6574\u4f53\u4e2d\u3002</p> <p>\u6211\u53d1\u73b0\u66f4\u5177\u53ef\u6269\u5c55\u6027\u548c\u53ef\u6f14\u5316\u6027\u7684\u7ed3\u6784\u662f\u53d7 Netflix \u7684 Dispatch \u542f\u53d1\u5e76\u7a0d\u4f5c\u4fee\u6539\u3002</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db \u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # \u672c\u5730\u914d\u7f6e\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # \u5916\u90e8\u670d\u52a1\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u6a21\u578b\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # \u5168\u5c40\u914d\u7f6e\n\u2502   \u251c\u2500\u2500 models.py  # \u5168\u5c40\u6a21\u578b\n\u2502   \u251c\u2500\u2500 exceptions.py  # \u5168\u5c40\u5f02\u5e38\n\u2502   \u251c\u2500\u2500 pagination.py  # \u5168\u5c40\u6a21\u5757 \u4f8b\u5982. pagination \u5206\u9875\n\u2502   \u251c\u2500\u2500 database.py  # \u6570\u636e\u5e93\u8fde\u63a5\u76f8\u5173\u7684\u4e1c\u897f\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>\u5c06\u6240\u6709\u57df\u76ee\u5f55\u5b58\u50a8\u5728 <code>src</code> \u6587\u4ef6\u5939\u4e2d<ol> <li><code>src/</code> - \u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u9ad8\u7ea7\u522b\uff0c\u5305\u542b\u901a\u7528\u6a21\u578b\u3001\u914d\u7f6e\u548c\u5e38\u91cf\u7b49\u3002</li> <li><code>src/main.py</code> - \u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u7528\u4e8e\u542f\u52a8 FastAPI \u5e94\u7528\u7a0b\u5e8f</li> </ol> </li> <li>\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684 router, schemas, models, \u7b49\u3002<ol> <li><code>router.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6838\u5fc3\uff0c\u662f\u6240\u6709\u8def\u7531\u63a5\u53e3\u7684\u5165\u53e3\u3002</li> <li><code>schemas.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684 pydantic\u7684\u6a21\u578b</li> <li><code>models.py</code> - \u6bcf\u4e2a\u6a21\u5757\u7684\u6570\u636e\u5e93\u6a21\u578b</li> <li><code>service.py</code> - \u6a21\u5757\u7279\u6709\u7684\u4e1a\u52a1\u903b\u8f91</li> <li><code>dependencies.py</code> - \u8def\u7531\u4f9d\u8d56(Depends)</li> <li><code>constants.py</code> - \u6a21\u5757\u7279\u6709\u7684\u5e38\u91cf\u548c\u9519\u8bef\u7801\u5b9a\u4e49</li> <li><code>config.py</code> - \u4f8b\u5982\uff0c\u73af\u5883\u53d8\u91cf</li> <li><code>utils.py</code> - \u975e\u4e1a\u52a1\u903b\u8f91\u529f\u80fd\uff0c \u4f8b\u5982. \u54cd\u5e94\u89c4\u8303\u5316\u3001\u6570\u636e\u4e30\u5bcc\u7b49\u3002</li> <li><code>exceptions</code> - \u6a21\u5757\u7279\u6709\u7684\u4e00\u573a\uff0c\u4f8b\u5982. <code>PostNotFound</code>, <code>InvalidUserData</code></li> </ol> </li> <li>\u5f53\u5305\u9700\u8981\u6765\u81ea\u5176\u4ed6\u5305\u7684\u670d\u52a1\u6216\u4f9d\u8d56\u9879\u6216\u5e38\u91cf\u65f6 - \u4f7f\u7528\u663e\u5f0f\u6a21\u5757\u540d\u79f0\u5bfc\u5165\u5b83\u4eec</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # \u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e2a\u5305\u7684\u5e38\u91cf\u6a21\u5757\u4e2d\u90fd\u6709\u6807\u51c6\u9519\u8bef\u4ee3\u7801\n</code></pre>"},{"location":"#2-\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528-pydantic-\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","title":"2. \u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 Pydantic \u8fdb\u884c\u6570\u636e\u9a8c\u8bc1","text":"<p>Pydantic \u5177\u6709\u4e00\u7ec4\u4e30\u5bcc\u7684\u529f\u80fd\u6765\u9a8c\u8bc1\u548c\u8f6c\u6362\u6570\u636e\u3002</p> <p>\u9664\u4e86\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5fc5\u586b\u548c\u975e\u5fc5\u586b\u5b57\u6bb5\u7b49\u5e38\u89c4\u529f\u80fd\u5916\uff0c</p> <p>Pydantic \u5185\u7f6e\u4e86\u5168\u9762\u7684\u6570\u636e\u5904\u7406\u5de5\u5177\uff0c\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u6709\u9650\u5141\u8bb8\u9009\u9879\u7684\u679a\u4e3e\u3001\u957f\u5ea6\u9a8c\u8bc1\u3001\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u7b49\u3002</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre>"},{"location":"#3-\u4f7f\u7528depends\u4f9d\u8d56\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","title":"3. \u4f7f\u7528Depends(\u4f9d\u8d56)\u8fdb\u884c\u4e0e\u6570\u636e\u5e93\u6709\u5173\u7684\u6570\u636e\u9a8c\u8bc1","text":"<p>Pydantic \u53ef\u4ee5\u53ea\u9a8c\u8bc1\u6765\u81ea\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u503c\u3002</p> <p>\u4f7f\u7528\u4f9d\u8d56\u9879\u6839\u636e\u6570\u636e\u5e93\u7ea6\u675f\u9a8c\u8bc1\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5df2\u5b58\u5728\u3001\u672a\u627e\u5230\u7528\u6237\u7b49\u3002</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06\u6570\u636e\u9a8c\u8bc1\u653e\u5728\u4f9d\u8d56\u9879\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u6dfb\u52a0 <code>post_id</code> \u9a8c\u8bc1\u5e76\u4e3a\u6bcf\u4e2a\u63a5\u53e3\u7f16\u5199\u76f8\u540c\u7684\u6d4b\u8bd5\u3002</p>"},{"location":"#4-\u4f9d\u8d56dependency\u94fe","title":"4. \u4f9d\u8d56(Dependency)\u94fe","text":"<p>\u4f9d\u8d56\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4f9d\u8d56\uff0c\u907f\u514d\u7c7b\u4f3c\u903b\u8f91\u7684\u4ee3\u7801\u91cd\u590d\u3002</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"#5-\u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb-\u7f13\u5b58\u4f9d\u8d56dependency\u8c03\u7528\u7ed3\u679c","title":"5. \u89e3\u8026\u548c\u91cd\u7528\u4f9d\u8d56\u5173\u7cfb\u3002 \u7f13\u5b58\u4f9d\u8d56(Dependency)\u8c03\u7528\u7ed3\u679c","text":"<p>\u4f9d\u8d56\u9879\u53ef\u4ee5\u591a\u6b21\u91cd\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u91cd\u65b0\u8ba1\u7b97 - \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFastAPI \u5c06\u4f9d\u8d56\u9879\u7684\u7ed3\u679c\u7f13\u5b58\u5728\u8bf7\u6c42\u7684\u8303\u56f4\u5185\u3002</p> <p>\u4f8b\u5982\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u8c03\u7528\u670d\u52a1 <code>get_post_by_id</code> \u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u5c06\u4e0d\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u8be5\u4f9d\u8d56\u9879\u65f6\u90fd\u8bbf\u95ee\u6570\u636e\u5e93 - \u53ea\u6709\u7b2c\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u7528\u5230\u3002</p> <p>\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u4f9d\u8d56\u5173\u7cfb\u89e3\u8026\u5230\u591a\u4e2a\u8f83\u5c0f\u7684\u51fd\u6570\u4e0a\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8f83\u5c0f\u7684\u57df\u4e0a\u8fd0\u884c\u5e76\u4e14\u66f4\u5bb9\u6613\u5728\u5176\u4ed6\u8def\u7531\u4e2d\u91cd\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 3 \u6b21 <code>parse_jwt_data</code>\uff1a</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code></li> </ol> <p>\u4f46\u662f <code>parse_jwt_data</code> \u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u3002</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n\"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"#6-\u9075\u5faa-rest-\u89c4\u8303","title":"6. \u9075\u5faa REST \u89c4\u8303","text":"<p>\u8bd1\u8005\u6ce8 - REST API \u8bbe\u8ba1\u89c4\u8303</p> <p>\u53c2\u8003 \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357 \u548c RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>\u5f00\u53d1 RESTful API \u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5728\u5982\u4e0b\u8def\u7531\u4e2d\u91cd\u7528\u4f9d\u8d56\u9879\uff1a</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8def\u5f84\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u53d8\u91cf\u540d\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u63a5\u53e3 <code>GET /profiles/:profile_id</code> \u548c <code>GET /creators/:creator_id</code> \u4e24\u8005\u90fd\u9a8c\u8bc1\u7ed9\u5b9a\u7684 <code>profile_id</code> \u662f\u5426\u5b58\u5728\uff0c\u4f46\u662f <code>GET /creators/:creator_id</code> \u8fd8\u68c0\u67e5\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u662f\u521b\u5efa\u8005\uff0c\u90a3\u4e48\u6700\u597d\u5c06 <code>creator_id</code> \u8def\u5f84\u53d8\u91cf\u91cd\u547d\u540d\u4e3a <code>profile_id</code> \u5e76\u5c06\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u94fe\u63a5\u8d77\u6765\u3002</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(\n    profile: Mapping = Depends(valid_profile_id)\n) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n\"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n\"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>\u4f7f\u7528 <code>/me</code> \u8def\u7531\u5b9a\u4e49\u6765\u8fd4\u56de\u5f53\u524d\u7528\u6237\u8d44\u6e90 (\u4f8b\u5982. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5b58\u5728 - \u56e0\u4e3aauth\u6821\u9a8c\u65e9\u5df2\u6821\u9a8c\u4e86\u5176\u662f\u5426\u5b58\u5728\u3002</li> <li>\u65e0\u9700\u68c0\u67e5\u7528\u6237ID\u662f\u5426\u5c5e\u4e8e\u8bf7\u6c42\u8005</li> </ol>"},{"location":"#7-\u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684-io-\u64cd\u4f5c-\u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","title":"7. \u5982\u679c\u4f60\u7684\u8def\u7531\u53ea\u6709\u963b\u585e\u7684 I/O \u64cd\u4f5c, \u4e0d\u8981\u8ba9\u4f60\u7684\u8def\u7531\u5f02\u6b65","text":"<p>\u5728\u5e95\u5c42\uff0cFastAPI \u53ef\u4ee5\u6709\u6548\u5730\u5904\u7406 \u5f02\u6b65\u548c\u540c\u6b65 I/O \u64cd\u4f5c\u3002</p> <ul> <li>FastAPI \u5728\u7ebf\u7a0b\u6c60 \u4e2d\u8fd0\u884c<code>sync</code>(\u540c\u6b65)\u8def\u7531\uff0c\u963b\u585e I/O \u64cd\u4f5c\u4e0d\u4f1a\u963b\u6b62[\u4e8b\u4ef6\u5faa\u73af](https://docs.python.org/3/library/asyncio-eventloop.html\uff09\u6267\u884c\u4efb\u52a1\u3002</li> <li>\u5426\u5219\uff0c\u5982\u679c\u8def\u7531\u88ab\u5b9a\u4e49\u4e3a<code>async</code>\uff0c\u90a3\u4e48\u5b83\u4f1a\u901a\u8fc7<code>await</code>\u5b9a\u671f\u8c03\u7528\uff0c\u5e76\u4e14 FastAPI \u76f8\u4fe1\u60a8\u53ea\u4f1a\u6267\u884c\u975e\u963b\u585e I/O \u64cd\u4f5c\u3002</li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u60a8\u672a\u80fd\u4fe1\u4efb\u5e76\u5728\u5f02\u6b65\u8def\u7531\u4e2d\u6267\u884c\u963b\u585e\u64cd\u4f5c\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u65e0\u6cd5\u8fd0\u884c\u4e0b\u4e00\u4e2a\u4efb\u52a1\uff0c\u76f4\u5230\u8be5\u963b\u585e\u64cd\u4f5c\u5b8c\u6210\u3002</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O\u963b\u585e\u64cd\u4f5c10\u79d2\n    pong = service.get_pong()  # \u4ece DB \u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O \u963b\u585e\u64cd\u4f5c 10 \u79d2\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n    pong = service.get_pong()  # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6 pong \u7684 I/O \u963b\u585e\u64cd\u4f5c\uff0c\u4f46\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # \u5f02\u6b65\u963b\u585e I/O \u64cd\u4f5c\n    pong = await service.async_get_pong()  # \u5f02\u6b65\u963b\u585e I/O \u6570\u636e\u5e93\u8c03\u7528\n\n    return {\"pong\": pong}\n</code></pre> <p>\u5f53\u6211\u4eec\u8c03\u7528\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48</p> <code>GET /terrible-ping</code><code>GET /good-ping</code><code>GET /perfect-ping</code> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>\u670d\u52a1\u5668\u7684\u4e8b\u4ef6\u5faa\u73af\u548c\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5c06\u7b49\u5f85\u76f4\u5230 <code>time.sleep()</code> \u5b8c\u6210<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>time.sleep()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4f1a\u4e00\u76f4\u7b49\u5f85\u5e76\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u5728\u7b49\u5f85\u671f\u95f4\u670d\u52a1\u5668\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u7136\u540e, \u4e8b\u4ef6\u5faa\u73af\u548c\u6240\u6709\u4efb\u52a1\u4f1a\u5728\u961f\u5217\u4e2d\u4e00\u8d77\u7b49\u5f85\uff0c\u76f4\u5230<code>service.get_pong</code>\u6267\u884c\u5b8c\u6bd5\u3002<ol> <li>\u670d\u52a1\u5668\u8ba4\u4e3a <code>service.get_pong()</code> \u4e0d\u662f\u4e00\u4e2a I/O \u4efb\u52a1, \u6240\u4ee5\u4ed6\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u3002</li> <li>\u670d\u52a1\u5668\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u4f1a\u63a5\u53d7\u4efb\u4f55\u65b0\u7684\u7684\u8bf7\u6c42\u3002</li> </ol> </li> <li>\u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u3002<ol> <li>\u54cd\u5e94\u4e4b\u540e, \u670d\u52a1\u5668\u5f00\u59cb\u63a5\u53d7\u65b0\u7684\u8bf7\u6c42\u3002</li> </ol> </li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5c06\u6574\u4e2a\u8def\u7531 <code>good_ping</code> \u5206\u914d\u5230\u7ebf\u7a0b\u6c60\u4e2d, \u6c60\u4e2d\u6709\u5de5\u4f5c\u7ebf\u7a0b\u8d1f\u8d23\u8fd0\u884c\u8be5\u8def\u7531\u7ed1\u5b9a\u7684\u51fd\u6570\u3002</li> <li>\u5728 <code>good_ping</code> \u6267\u884c\u5176\u95f4, \u4e8b\u4ef6\u5faa\u73af\u4f1a\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u548c\u5de5\u4f5c\u7ebf\u7a0b\u7ed9\u4ed6\u4eec\uff0c (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)<ul> <li>\u5de5\u4f5c\u7ebf\u7a0b\u72ec\u7acb\u4e8e\u4e3b\u7ebf\u7a0b (\u6bd4\u5982. \u6211\u4eec\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f), \u5b83\u5c06\u7b49\u5f85 <code>time.sleep</code> \u5b8c\u6210\uff0c\u7136\u540e\u7b49\u5f85 <code>service.get_pong</code> \u5b8c\u6210\u3002</li> <li>Sync(\u540c\u6b65)\u64cd\u4f5c\u53ea\u4f1a\u963b\u585e\u5b50\u7ebf\u7a0b\uff0c\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u3002</li> </ul> </li> <li>\u7136\u540e <code>good_ping</code> \u5b8c\u6210\u4ed6\u7684\u5de5\u4f5c, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <ol> <li>FastAPI \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u5e76\u5f00\u59cb\u5904\u7406\u5b83</li> <li>FastAPI \u5f02\u6b65\u7b49\u5f85 <code>asyncio.sleep(10)</code></li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>asyncio.sleep(10)</code> \u5b8c\u6210\u65f6, \u670d\u52a1\u5668\u8f6c\u5230\u4e0b\u4e00\u884c\u5e76\u7b49\u5f85 <code>service.async_get_pong</code> \u5b8c\u6210\u3002</li> <li>\u4e8b\u4ef6\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5e76\u5904\u7406\u5b83\u4eec  (\u6bd4\u5982. \u63a5\u53d7\u65b0\u8bf7\u6c42, \u8c03\u7528\u6570\u636e\u5e93)</li> <li>\u5f53 <code>service.async_get_pong</code> \u5b8c\u6210, \u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002</li> </ol> <p>\u7b2c\u4e8c\u4e2a\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0cnon-blocking awaitables (\u975e\u963b\u585e\u7b49\u5f85)\u6216\u8005\u53d1\u9001\u5230\u7ebf\u7a0b\u6c60\u7684\u64cd\u4f5c\u5fc5\u987b\u662fI/O\u5bc6\u96c6\u578b\u4efb\u52a1(\u6bd4\u5982: \u6253\u5f00\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8c03\u7528\u3001\u5916\u90e8API\u8c03\u7528\u7b49\u7b49)\u3002</p> <ul> <li>\u7b49\u5f85CPU\u5bc6\u96c6\u578b\u4efb\u52a1 (\u6bd4\u5982. \u8d1f\u8d23\u7684\u8ba1\u7b97, \u6570\u636e\u5904\u7406, \u89c6\u9891\u8f6c\u7801) \u662f\u6ca1\u6709\u4ef7\u503c\u7684\uff0c\u56e0\u4e3aCPU\u5fc5\u987b\u5de5\u4f5c\u624d\u80fd\u5b8c\u6210\u8ba1\u7b97\u4efb\u52a1, \u800cI/O\u64cd\u4f5c\u662f\u5916\u90e8\u7684\uff0c\u670d\u52a1\u5668\u5728\u7b49\u5f85\u8be5\u64cd\u4f5c\u5b8c\u6210\u65f6\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u53bb\u505a\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u7531\u4e8e GIL\uff0c\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u8fd0\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u4e5f\u4e0d\u662f\u6709\u6548\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cGIL \u4e00\u6b21\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9 CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u6beb\u65e0\u7528\u5904\u3002</li> <li>\u5982\u679c\u4f60\u60f3\u4f18\u5316 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fdb\u884c\u5de5\u4f5c\u3002</li> </ul> <p>StackOverflow\u4e0a\u56f0\u60d1\u7528\u6237\u7684\u76f8\u5173\u95ee\u9898:</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597 - \u540c\u6837\u53ef\u4ee5\u770b\u770b \u6211\u7684\u56de\u7b54</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"#8-\u4ece\u7b2c-0-\u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","title":"8. \u4ece\u7b2c 0 \u5929\u5f00\u59cb\u7684\u81ea\u5b9a\u4e49\u57fa\u7840\u6a21\u578b","text":"<p>\u62e5\u6709\u53ef\u63a7\u7684\u5168\u5c40\u57fa\u7840\u6a21\u578b\u4f7f\u6211\u4eec\u80fd\u591f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u6a21\u578b\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u6807\u51c6\u7684\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u6216\u4e3a\u57fa\u7840\u6a21\u578b\u7684\u6240\u6709\u5b50\u7c7b\u6dfb\u52a0\u4e00\u4e2a\u8d85\u7ea7\u65b9\u6cd5\u3002</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps \u8fd4\u56de\u5b57\u8282\uff0c\u4e3a\u4e86\u5339\u914d\u6807\u51c6\u7684 json.dumps, \u6211\u4eec\u9700\u8981\u89e3\u7801\u3002\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u7684\u81ea\u5b9a\u4e49 JSON \u7f16\u7801\u65b9\u6cd5\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n\"\"\"\u5728\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u503c\u4e2d\u5220\u9664\u5fae\u79d2\u3002\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u53ef\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u5b57\u5178\u3002\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u51b3\u5b9a\u5236\u4f5c\u4e00\u4e2a\u5168\u5c40\u57fa\u7840\u6a21\u578b\uff1a</p> <ul> <li>\u4f7f\u7528 orjson \u7528\u4e8e\u6570\u636e\u7684\u5e8f\u5217\u5316</li> <li>\u5728\u6240\u6709\u65e5\u671f\u683c\u5f0f\u4e2d\u5c06\u5fae\u79d2\u964d\u4e3a 0</li> <li>\u5c06\u6240\u6709\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\u5e8f\u5217\u5316\u4e3a\u5177\u6709\u663e\u5f0f\u65f6\u533a\u7684\u6807\u51c6\u683c\u5f0f</li> </ul>"},{"location":"#9-\u6587\u6863docs","title":"9. \u6587\u6863(Docs)","text":"<ol> <li> <p>\u9664\u975e\u60a8\u7684 API \u662f\u516c\u5f00\u7684\uff0c\u5426\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9690\u85cf\u6587\u6863\u3002 \u4ec5\u5728\u9009\u5b9a\u7684\u73af\u5883\u4e2d\u660e\u786e\u663e\u793a\u5b83\u3002</p> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # \u89e3\u6790 .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # \u83b7\u53d6\u5f53\u524d\u73af\u5883\u540d\u79f0\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # \u5141\u8bb8\u663e\u793a\u6587\u6863\u7684\u73af\u5883\u540d\u79f0\u5217\u8868\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\n   app_configs[\"openapi_url\"] = None  # \u5c06\u6587\u6863\u7684 url \u8bbe\u7f6e\u4e3a null\n\napp = FastAPI(**app_configs)\n</code></pre> </li> <li> <p>\u5e2e\u52a9FastAPI\u751f\u6210\u901a\u4fd7\u6613\u61c2\u7684\u6587\u6863</p> </li> <li>\u8bbe\u7f6e <code>response_model</code>, <code>status_code</code>, <code>description</code>, \u7b49\u5b57\u6bb5.</li> <li>\u5982\u679c\u54cd\u5e94\u6a21\u578b\u548c\u72b6\u6001\u4e0d\u540c\uff0c\u4f7f\u7528 <code>responses</code> \u8def\u7531\u5c5e\u6027\u4e3a\u4e0d\u540c\u7684\u54cd\u5e94\u6dfb\u52a0\u6587\u6863</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # \u9ed8\u8ba4\u54cd\u5e94\u7684 pydantic \u6a21\u578b\n    status_code=status.HTTP_201_CREATED,  # \u9ed8\u8ba4\u72b6\u6001\u7801\n    description=\"\u6587\u6863\u63a5\u53e3\u7684\u6e05\u6670\u63cf\u8ff0\",\n    tags=[\"Endpoint Category\"],  # \u63a5\u53e3\u5206\u7c7b\n    summary=\"Summary of the Endpoint\",  # \u63a5\u53e3\u6982\u8981\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 200 \u54cd\u5e94\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 201 \u54cd\u5e94\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # \u81ea\u5b9a\u4e49 pydantic \u6a21\u578b\uff0c\u7528\u4e8e 202 \u54cd\u5e94\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>\u5373\u751f\u6210\u7684\u6587\u6863\u5c31\u50cf\u8fd9\u6837: </p>"},{"location":"#10-\u4f7f\u7528-pydantic-\u7684-basesettings-\u8fdb\u884c\u914d\u7f6e","title":"10. \u4f7f\u7528 Pydantic \u7684 BaseSettings \u8fdb\u884c\u914d\u7f6e","text":"<p>Pydantic \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177 \u6765\u89e3\u6790\u73af\u5883\u53d8\u91cf\u5e76\u4f7f\u7528\u5176\u9a8c\u8bc1\u5668\u5904\u7406\u5b83\u4eec\u3002</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre>"},{"location":"#11-sqlalchemy-\u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","title":"11. SQLAlchemy: \u8bbe\u7f6e\u6570\u636e\u5e93\u952e\u547d\u540d\u7ea6\u5b9a","text":"<p>\u6839\u636e\u60a8\u7684\u6570\u636e\u5e93\u7ea6\u5b9a\u660e\u786e\u8bbe\u7f6e\u7d22\u5f15\u7684\u547d\u540d\u4f18\u4e8e <code>sqlalchemy</code> \u81ea\u52a8\u547d\u540d\u3002</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre>"},{"location":"#12-\u8fc1\u79fb-alembic","title":"12. \u8fc1\u79fb: Alembic","text":"<ol> <li>\u8fc1\u79fb\u5fc5\u987b\u662f\u9759\u6001\u7684\u548c\u53ef\u6062\u590d\u7684\u3002 \u5982\u679c\u60a8\u7684\u8fc1\u79fb\u4f9d\u8d56\u4e8e\u52a8\u6001\u751f\u6210\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u552f\u4e00\u52a8\u6001\u7684\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5176\u7ed3\u6784\u3002</li> <li>\u751f\u6210\u5177\u6709\u63cf\u8ff0\u6027\u540d\u79f0\u548c slug \u7684\u8fc1\u79fb\u3002 Slug \u662f\u5fc5\u9700\u7684\uff0c\u5e94\u8be5\u89e3\u91ca\u8fd9\u4e9b\u53d8\u5316\u3002</li> <li>\u4e3a\u65b0\u8fc1\u79fb\u8bbe\u7f6e\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u4ef6\u6a21\u677f\u3002 \u6211\u4eec\u4f7f\u7528 <code>*date*_*slug*.py</code> \u6a21\u5f0f\uff0c\u4f8b\u5982 <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"#13-\u8bbe\u7f6e\u6570\u636e\u5e93\u8868\u5b57\u5178\u547d\u540d\u7ea6\u5b9a","title":"13. \u8bbe\u7f6e\u6570\u636e\u5e93(\u8868/\u5b57\u5178)\u547d\u540d\u7ea6\u5b9a","text":"<p>\u547d\u540d\u4fdd\u6301\u4e00\u81f4\u5f88\u91cd\u8981\u3002 \u6211\u4eec\u9075\u5faa\u7684\u4e00\u4e9b\u89c4\u5219\uff1a</p> <ol> <li>lower_case_snake (\u5c0f\u5199\u9a7c\u5cf0\u547d\u540d)</li> <li>\u5355\u6570\u5f62\u5f0f (\u4f8b\u5982. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>\u4f7f\u7528\u6a21\u5757\u524d\u7f00\u5bf9\u76f8\u4f3c\u8868\u8fdb\u884c\u5206\u7ec4, \u4f8b\u5982. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>\u8de8\u8868\u547d\u540d\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u5177\u4f53\u7684\u547d\u540d\u662f\u53ef\u4ee5\u7684, \u4f8b\u5982.</li> <li>\u5728\u6240\u6709\u8868\u4e2d\u4f7f\u7528 <code>profile_id</code>\uff0c\u4f46\u5982\u679c\u5176\u4e2d\u4e00\u4e9b\u53ea\u9700\u8981\u4f5c\u4e3a\u521b\u5efa\u8005\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528 <code>creator_id</code></li> <li>\u5728\u6240\u6709\u62bd\u8c61\u8868\uff0c\u5f62\u5982 <code>post_like</code> \u3001 <code>post_view</code> \u4e2d\u4f7f\u7528 <code>post_id</code> \uff0c\u4f46\u5728\u76f8\u5173\u6a21\u5757\u4e2d\u4f7f\u7528\u5177\u4f53\u547d\u540d\uff0c\u5982 <code>chapters.course_id</code> \u4e2d\u7684 <code>course_id</code> \u3002</li> <li><code>_at</code> \u4f5c\u4e3a <code>datetime</code> \u7c7b\u578b\u7684\u540e\u7f00</li> <li><code>_date</code> \u4f5c\u4e3a <code>date</code> \u7c7b\u578b\u7684\u540e\u7f00</li> </ol>"},{"location":"#14-\u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","title":"14. \u4ece\u7b2c0\u5929\u5f00\u59cb\u5199\u57fa\u4e8e\u5f02\u6b65\u7684\u6d4b\u8bd5","text":"<p>\u57fa\u4e8eDB\u5199\u96c6\u6210\u6d4b\u8bd5\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u5728\u5c06\u6765\u51fa\u73b0\u57fa\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u9519\u8bef\u3002</p> <p>\u7acb\u5373\u5f00\u59cb\u57fa\u4e8e\u5f02\u6b65\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u6d4b\u8bd5\uff0c \u4f8b\u5982. async_asgi_testclient \u6216 httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>\u9664\u975e\u4f60\u6709\u540c\u6b65\u5230\u6570\u636e\u5e93\u8fde\u63a5\uff08\u6253\u6270\u4e86\uff1f\uff09\u6216\u8005\u4e0d\u6253\u7b97\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\u3002</p>"},{"location":"#15-\u540e\u53f0\u4efb\u52a1\u4f7f\u7528-asynciocreate_task","title":"15. \u540e\u53f0\u4efb\u52a1\u4f7f\u7528 asyncio.create_task","text":"<p>BackgroundTasks \u53ef\u4ee5 \u6709\u6548\u8fd0\u884c \u6240\u6709\u7684\u963b\u585e\u548c\u975e\u963b\u585eI/O\u64cd\u4f5c, \u5c31\u50cfFastAPI \u5904\u7406\u963b\u585e\u8def\u7531\u4e00\u6837\u3002 (<code>sync</code>(\u540c\u6b65)\u4efb\u52a1\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c, \u800c <code>async</code>(\u5f02\u6b65) \u4eba\u7269\u5219\u7b49\u5f85\u4e2d\u7a0d\u540e\u8fd0\u884c\u3002)</p> <ul> <li>\u4e0d\u8981\u6b3a\u9a97\u5de5\u4f5c\u4f8b\u7a0b\u4ee5\u53ca\u5c06\u963b\u585e\u7684I/O\u64cd\u4f5c\u6807\u8bb0\u4e3a<code>async</code>(\u5f02\u6b65).\uff08\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u4f1a\u963b\u585e\u4e8b\u4ef6\u8c03\u7528\u5faa\u73af\uff0c\u5bfc\u81f4\u5f71\u54cd\u5176\u4ed6\u7684\u5f02\u6b65\u4efb\u52a1\u8c03\u7528\uff09</li> <li>\u4e0d\u8981\u5c06\u5b83\u7528\u4e8e\u7e41\u91cd\u7684CPU\u5bc6\u96c6\u578b\u4efb\u52a1\u3002</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n\"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"#16-\u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","title":"16. \u7c7b\u578b\u6ce8\u89e3\u5f88\u91cd\u8981","text":"<p>FastAPI, Pydantic, \u4ee5\u53ca\u73b0\u4ee3\u7684 IDE \u9f13\u52b1\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u6ca1\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p> <p>\u6709\u7c7b\u578b\u63d0\u793a:</p> <p></p>"},{"location":"#17-\u4ee5chunks\u5757\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","title":"17. \u4ee5chunks(\u5757)\u7684\u5f62\u5f0f\u4fdd\u5b58\u6587\u4ef6","text":"<p>\u4e0d\u8981\u671f\u671b\u60a8\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u5c0f\u6587\u4ef6\u3002</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes MB(\u5146\u5b57\u8282)\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre>"},{"location":"#18-\u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","title":"18. \u5c0f\u5fc3pydantic\u7684\u52a8\u6001\u5b57\u6bb5","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u8054\u5408\u7c7b\u578b(Union)\u7684 pydantic \u5b57\u6bb5\uff0c\u8bf7\u786e\u4fdd\u9a8c\u8bc1\u5668\u660e\u786e\u77e5\u9053\u8fd9\u4e9b\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article \u975e\u5e38\u5305\u5bb9\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u5b57\u5178\u751f\u6548\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848:</p> <ol> <li> <p>\u9a8c\u8bc1\u8f93\u5165\u53ea\u5141\u8bb8\u6709\u6548\u5b57\u6bb5\u5e76\u5728\u63d0\u4f9b\u672a\u77e5\u6570\u65f6\u5f15\u53d1\u9519\u8bef</p> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> </li> <li> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u8bf7\u4f7f\u7528 Pydantic \u7684 Smart Union (&gt;v1.9)</p> <p>\u5982\u679c\u5b57\u6bb5\u5f88\u7b80\u5355\uff0c\u5982 <code>int</code> \u6216 <code>bool</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u4e0d\u9002\u7528\u4e8e\u7c7b\u7b49\u590d\u6742\u5b57\u6bb5\u3002</p> <p>\u6ca1\u6709 Smart Union :</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>\u6709 Smart Union :</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, \u56e0\u4e3a smart_union \u4e0d\u9002\u7528\u4e8e\u50cf\u7c7b\u8fd9\u6837\u7684\u590d\u6742\u5b57\u6bb5\n</code></pre> </li> <li> <p>\u5feb\u901f\u89e3\u51b3\u65b9\u6cd5</p> <p>\u6b63\u786e\u6392\u5e8f\u5b57\u6bb5\u7c7b\u578b: \u4ece\u6700\u4e25\u683c\u7684\u5230\u5bbd\u677e\u7684\u6821\u9a8c\u3002</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre> </li> </ol>"},{"location":"#19-sql-\u7b2c\u4e00-pydantic-\u7b2c\u4e8c","title":"19. SQL-\u7b2c\u4e00, Pydantic-\u7b2c\u4e8c","text":"<ul> <li>\u901a\u5e38\uff0c\u6570\u636e\u5e93\u5904\u7406\u6570\u636e\u7684\u901f\u5ea6\u6bd4 CPython \u66f4\u5feb\u3001\u66f4\u5e72\u51c0\u3002</li> <li>\u6700\u597d\u4f7f\u7528 SQL \u6267\u884c\u6240\u6709\u590d\u6742\u7684\u8fde\u63a5\u548c\u7b80\u5355\u7684\u6570\u636e\u64cd\u4f5c\u3002</li> <li>\u6700\u597d\u5728\u6570\u636e\u5e93\u4e2d\u805a\u5408 JSON \u4ee5\u54cd\u5e94\u5d4c\u5957\u5bf9\u8c61\u3002</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                   text(\"'id', profiles.id\"),\n                   text(\"'first_name', profiles.first_name\"),\n                   text(\"'last_name', profiles.last_name\"),\n                   text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n       if isinstance(creator, str):  # i.e. json\n          return orjson.loads(creator)\n\n       return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\n   posts = await service.get_posts(creator[\"id\"])\n\n   return posts\n</code></pre> <p>\u5982\u679c\u805a\u5408\u6570\u636e\u8868\u5355 DB \u662f\u4e00\u4e2a\u7b80\u5355\u7684 JSON\uff0c\u90a3\u4e48\u770b\u770b Pydantic \u7684<code>Json</code>\u5b57\u6bb5\u7c7b\u578b\uff0c\u5b83\u5c06\u9996\u5148\u52a0\u8f7d\u539f\u59cb JSON\u3002</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre>"},{"location":"#20-\u9a8c\u8bc1host\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684-url","title":"20. \u9a8c\u8bc1host\uff0c\u5982\u679c\u7528\u6237\u53ef\u4ee5\u53d1\u9001\u516c\u5f00\u53ef\u7528\u7684 URL","text":"<p>\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5165\u53e3\uff1a</p> <ol> <li>\u63a5\u53d7\u6765\u81ea\u7528\u6237\u7684\u5a92\u4f53\u6587\u4ef6\uff0c</li> <li>\u4e3a\u6b64\u6587\u4ef6\u751f\u6210\u552f\u4e00\u7684 url\uff0c</li> <li>\u8fd4\u56de url \u7ed9\u7528\u6237\uff0c</li> <li>\u4ed6\u4eec\u5c06\u5728\u5176\u4ed6\u5165\u53e3\u4f7f\u7528\u5b83\u4eec\uff0c\u4f8b\u5982 <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>\u8fd9\u4e9b\u7aef\u70b9\u53ea\u63a5\u53d7\u6765\u81ea\u767d\u540d\u5355\u4e3b\u673a\u7684\u6587\u4ef6</li> <li>\u4f7f\u7528\u6b64\u540d\u79f0\u548c\u5339\u914d\u7684 URL \u5c06\u6587\u4ef6\u4e0a\u4f20\u5230 AWS\u3002</li> </ol> <p>\u5982\u679c\u6211\u4eec\u4e0d\u5c06 URL \u4e3b\u673a\u5217\u5165\u767d\u540d\u5355\uff0c\u90a3\u4e48\u4e0d\u826f\u7528\u6237\u5c31\u6709\u673a\u4f1a\u4e0a\u4f20\u5371\u9669\u94fe\u63a5\u3002</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n\"\"\"\u5c06 pydantic \u7684 AnyUrl \u9a8c\u8bc1\u6269\u5c55\u5230\u767d\u540d\u5355 URL \u4e3b\u673a\u3002\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre>"},{"location":"#21-\u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51favalueerror","title":"21. \u5982\u679cschema\u76f4\u63a5\u9762\u5411\u5ba2\u6237\u7aef\uff0c\u5728pydantic\u7684\u81ea\u5b9a\u4e49\u6821\u9a8c\u4e2d\u629b\u51faValueError","text":"<p>\u5b83\u5c06\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u5f88\u597d\u7684\u8be6\u7ec6\u54cd\u5e94\u3002</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response \u4f8b\u5b50:</p> <p></p>"},{"location":"#22-\u4e0d\u8981\u5fd8\u8bb0-fastapi-\u5c06-response-\u7684-pydantic-\u5bf9\u8c61\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-responsemodel-\u7684\u5b9e\u4f8b\u7136\u540e\u8f6c\u6362\u4e3a-dict\u7136\u540e\u8f6c\u6362\u4e3a-json","title":"22. \u4e0d\u8981\u5fd8\u8bb0 FastAPI \u5c06 Response \u7684 Pydantic \u5bf9\u8c61\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a ResponseModel \u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u8f6c\u6362\u4e3a Dict\uff0c\u7136\u540e\u8f6c\u6362\u4e3a JSON","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>\u65e5\u5fd7\u8f93\u51fa:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre>"},{"location":"#23-\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync\u540c\u6b65-sdk-\u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","title":"23. \u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528sync(\u540c\u6b65) SDK, \u8bf7\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c","text":"<p>\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u5e93\u4e0e\u5916\u90e8\u670d\u52a1\u4ea4\u4e92\uff0c\u5e76\u4e14\u5b83\u4e0d\u652f\u6301<code>async</code>(\u5f02\u6b65)\uff0c\u5219\u5728\u5916\u90e8\u5de5\u4f5c\u7ebf\u7a0b\u4e2d\u8fdb\u884c HTTP \u8c03\u7528\u3002</p> <p>\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea starlette \u7684\u8457\u540d\u7684<code>run_in_threadpool</code>\u3002</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"#24-\u4f7f\u7528-linters-black-isort-autoflake","title":"24. \u4f7f\u7528 linters (black, isort, autoflake)","text":"<p>\u4f7f\u7528 linters, \u60a8\u53ef\u4ee5\u5fd8\u8bb0\u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u4e13\u6ce8\u4e8e\u7f16\u5199\u4e1a\u52a1\u903b\u8f91\u3002</p> <p>Black \u662f\u4e00\u4e2a\u6beb\u4e0d\u59a5\u534f\u7684\u4ee3\u7801\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5b83\u6d88\u9664\u4e86\u60a8\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u505a\u51fa\u7684\u8bb8\u591a\u5c0f\u51b3\u5b9a\u3002 \u5176\u4ed6 linter \u53ef\u5e2e\u52a9\u60a8\u7f16\u5199\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u5e76\u9075\u5faa PEP8\u3002</p> <p>\u4f7f\u7528<code>pre-commit hook</code>(\u9884\u63d0\u4ea4\u94a9\u5b50)\u662f\u4e00\u79cd\u6d41\u884c\u7684\u826f\u597d\u505a\u6cd5\uff0c\u4f46\u4ec5\u4f7f\u7528\u811a\u672c\u5bf9\u6211\u4eec\u6765\u8bf4\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre>"},{"location":"#\u60ca\u559c\u90e8\u5206","title":"\u60ca\u559c\u90e8\u5206","text":"<p>\u4e00\u4e9b\u975e\u5e38\u5584\u826f\u7684\u4eba\u5206\u4eab\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u7ecf\u9a8c\u548c\u6700\u4f73\u5b9e\u8df5\uff0c\u7edd\u5bf9\u503c\u5f97\u4e00\u8bfb\u3002</p> <p>\u5728\u9879\u76ee\u7684 issues \u90e8\u5206\u67e5\u770b\u5b83\u4eec\u3002</p> <p>\u4f8b\u5982\uff0clowercase00 \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u4eec\u4f7f\u7528\u6743\u9650\u548c\u6388\u6743\u3001\u57fa\u4e8e\u7c7b\u7684\u670d\u52a1\u548c\u89c6\u56fe\u3001\u4efb\u52a1\u961f\u5217\u7684\u6700\u4f73\u5b9e\u8df5\uff0c \u81ea\u5b9a\u4e49\u54cd\u5e94\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f7f\u7528 dynaconf \u8fdb\u884c\u914d\u7f6e\u7b49\u3002</p> <p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5173\u4e8e\u4f7f\u7528 FastAPI \u7684\u7ecf\u9a8c\u8981\u5206\u4eab\uff0c\u65e0\u8bba\u662f\u597d\u662f\u574f\uff0c\u90fd\u975e\u5e38\u6b22\u8fce\u60a8\u521b\u5efa\u4e00\u4e2a\u65b0\u95ee\u9898\u3002 \u9605\u8bfb\u5b83\u662f\u6211\u4eec\u7684\u8363\u5e78\u3002</p>"},{"location":"about/","title":"\u5173\u4e8e","text":"<ul> <li>\u7ffb\u8bd1\u81ea https://github.com/zhanymkanov/fastapi-best-practices \u6709\u6548\u6027\u53c2\u8003\u539f\u6587\u3002</li> </ul>"},{"location":"about/#\u57fa\u7840","title":"\u57fa\u7840","text":"<ul> <li>\u7f51\u7edc\u57fa\u7840, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09</li> <li>HTTP Referer \u6559\u7a0b, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP Referer \u6559\u7a0b</li> <li>HTTPS \u5347\u7ea7\u6307\u5357, \u53c2\u8003: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTPS \u5347\u7ea7\u6307\u5357</li> </ul>"},{"location":"about/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>\u4f5c\u8005\u8fd8\u6709\u4e00\u4e2a\u4ed3\u5e93: https://github.com/zhanymkanov/fastapi_production_template - \u4e00\u4e2a\u57fa\u4e8efastapi\u7684\u751f\u4ea7\u6a21\u7248\u4ed3\u5e93\uff0c\u4e5f\u633a\u4e0d\u9519\u7684\u3002</p>"},{"location":"asyncio/","title":"\u5f02\u6b65IO\uff08 asyncio\uff09 \u534f\u7a0b","text":"<p>\u8f6c\u81ea: https://www.jianshu.com/p/b5e347b3a17c</p> <p>\u672c\u6587\u662f17\u5e74\u5199\u7684\uff0c\u81f3\u4eca\u8fc7\u53bb\u591a\u5e74\uff0c\u6709\u4e00\u7bc7\u66f4\u597d\u7684\u6587\u6863\uff1a https://superfastpython.com/python-asyncio/</p>"},{"location":"asyncio/#python-asyncio","title":"python asyncio","text":"<p>\u7f51\u7edc\u6a21\u578b\u6709\u5f88\u591a\u4e2d\uff0c\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u5e76\u53d1\u4e5f\u6709\u5f88\u591a\u65b9\u6848\uff0c\u591a\u7ebf\u7a0b\uff0c\u591a\u8fdb\u7a0b\u3002\u65e0\u8bba\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\uff0cIO\u7684\u8c03\u5ea6\u66f4\u591a\u53d6\u51b3\u4e8e\u7cfb\u7edf\uff0c\u800c\u534f\u7a0b\u7684\u65b9\u5f0f\uff0c\u8c03\u5ea6\u6765\u81ea\u7528\u6237\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d<code>yield</code>\u4e00\u4e2a\u72b6\u6001\u3002\u4f7f\u7528\u534f\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5e76\u53d1\u4efb\u52a1\u3002Python\u7684\u5728<code>3.4</code>\u4e2d\u5f15\u5165\u4e86\u534f\u7a0b\u7684\u6982\u5ff5\uff0c\u53ef\u662f\u8fd9\u4e2a\u8fd8\u662f\u4ee5\u751f\u6210\u5668\u5bf9\u8c61\u4e3a\u57fa\u7840\uff0c<code>3.5</code>\u5219\u786e\u5b9a\u4e86\u534f\u7a0b\u7684\u8bed\u6cd5\u3002\u4e0b\u9762\u5c06\u7b80\u5355\u4ecb\u7ecd<code>asyncio</code>\u7684\u4f7f\u7528\u3002\u5b9e\u73b0\u534f\u7a0b\u7684\u4e0d\u4ec5\u4ec5\u662f<code>asyncio</code>\uff0c<code>tornado</code>\u548c<code>gevent</code>\u90fd\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\u3002</p> event_loop \u4e8b\u4ef6\u5faa\u73af \u7a0b\u5e8f\u5f00\u542f\u4e00\u4e2a\u65e0\u9650\u7684\u5faa\u73af\uff0c\u7a0b\u5e8f\u5458\u4f1a\u628a\u4e00\u4e9b\u51fd\u6570\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e0a\u3002\u5f53\u6ee1\u8db3\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u534f\u7a0b\u51fd\u6570\u3002 coroutine \u534f\u7a0b \u534f\u7a0b\u5bf9\u8c61\uff0c\u6307\u4e00\u4e2a\u4f7f\u7528async\u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u5b83\u7684\u8c03\u7528\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\u51fd\u6570\uff0c\u800c\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002\u534f\u7a0b\u5bf9\u8c61\u9700\u8981\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u7531\u4e8b\u4ef6\u5faa\u73af\u8c03\u7528\u3002 task \u4efb\u52a1 \u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u539f\u751f\u53ef\u4ee5\u6302\u8d77\u7684\u51fd\u6570\uff0c\u4efb\u52a1\u5219\u662f\u5bf9\u534f\u7a0b\u8fdb\u4e00\u6b65\u5c01\u88c5\uff0c\u5176\u4e2d\u5305\u542b\u4efb\u52a1\u7684\u5404\u79cd\u72b6\u6001\u3002 future \u4ee3\u8868\u5c06\u6765\u6267\u884c\u6216\u6ca1\u6709\u6267\u884c\u7684\u4efb\u52a1\u7684\u7ed3\u679c\u3002\u5b83\u548ctask\u4e0a\u6ca1\u6709\u672c\u8d28\u7684\u533a\u522b async/await \u5173\u952e\u5b57 python3.5 \u7528\u4e8e\u5b9a\u4e49\u534f\u7a0b\u7684\u5173\u952e\u5b57\uff0casync\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff0cawait\u7528\u4e8e\u6302\u8d77\u963b\u585e\u7684\u5f02\u6b65\u8c03\u7528\u63a5\u53e3\u3002 <p>\u4e0a\u8ff0\u7684\u6982\u5ff5\u5355\u72ec\u62ce\u51fa\u6765\u90fd\u4e0d\u597d\u61c2\uff0c\u6bd4\u8f83\u4ed6\u4eec\u4e4b\u95f4\u662f\u76f8\u4e92\u8054\u7cfb\uff0c\u4e00\u8d77\u5de5\u4f5c\u3002\u4e0b\u9762\u770b\u4f8b\u5b50\uff0c\u518d\u56de\u6eaf\u4e0a\u8ff0\u6982\u5ff5\uff0c\u66f4\u5229\u4e8e\u7406\u89e3\u3002</p>"},{"location":"asyncio/#\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b","title":"\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\u5f88\u7b80\u5355\uff0c\u4f7f\u7528async\u5173\u952e\u5b57\uff0c\u5c31\u50cf\u5b9a\u4e49\u666e\u901a\u51fd\u6570\u4e00\u6837\uff1a</p> <pre><code>import time\nimport asyncio\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(coroutine)\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u901a\u8fc7async\u5173\u952e\u5b57\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff08coroutine\uff09\uff0c\u534f\u7a0b\u4e5f\u662f\u4e00\u79cd\u5bf9\u8c61\u3002 \u534f\u7a0b\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u9700\u8981\u628a\u534f\u7a0b\u52a0\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\uff08event loop\uff09\uff0c\u7531\u540e\u8005\u5728\u9002\u5f53\u7684\u65f6\u5019\u8c03\u7528\u534f\u7a0b\u3002</p> <p><code>asyncio.get_event_loop</code>\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u4f7f\u7528<code>run_until_complete</code>\u5c06\u534f\u7a0b\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u5e76\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u56e0\u4e3a\u672c\u4f8b\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\uff0c\u4e8e\u662f\u53ef\u4ee5\u770b\u89c1\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>Waiting:  2\nTIME:  0.0004658699035644531\n</code></pre>"},{"location":"asyncio/#\u521b\u5efa\u4e00\u4e2atask","title":"\u521b\u5efa\u4e00\u4e2atask","text":"<p>\u534f\u7a0b\u5bf9\u8c61\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u5728\u6ce8\u518c\u4e8b\u4ef6\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f<code>run_until_complete</code>\u65b9\u6cd5\u5c06\u534f\u7a0b\u5305\u88c5\u6210\u4e3a\u4e86\u4e00\u4e2a\u4efb\u52a1\uff08<code>task</code>\uff09\u5bf9\u8c61\u3002\u6240\u8c13<code>task\u5bf9\u8c61</code>\u662f<code>Future\u7c7b</code>\u7684\u5b50\u7c7b\u3002\u4fdd\u5b58\u4e86\u534f\u7a0b\u8fd0\u884c\u540e\u7684\u72b6\u6001\uff0c\u7528\u4e8e\u672a\u6765\u83b7\u53d6\u534f\u7a0b\u7684\u7ed3\u679c\u3002</p> <pre><code>import asyncio\nimport time\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\n\nloop = asyncio.get_event_loop()\n\n# task = asyncio.ensure_future(coroutine)\ntask = loop.create_task(coroutine)\nprint(task)\n\nloop.run_until_complete(task)\nprint(task)\nprint('TIME: ', now() - start)\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>&lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:17&gt;&gt;\nWaiting:  2\n&lt;Task finished coro=&lt;do_some_work() done, defined at /Users/ghost/Rsj217/python3.6/async/async-main.py:17&gt; result=None&gt;\nTIME:  0.0003490447998046875 \n</code></pre> <p>\u521b\u5efa<code>task</code>\u540e\uff0c<code>task</code>\u5728\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\u662f<code>pending</code>\u72b6\u6001\uff0c\u56e0\u4e3a<code>do_some_work</code>\u4e2d\u6ca1\u6709\u8017\u65f6\u7684\u963b\u585e\u64cd\u4f5c\uff0c<code>task</code>\u5f88\u5feb\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86\u3002\u540e\u9762\u6253\u5370\u7684<code>finished</code>\u72b6\u6001\u3002</p> <p><code>asyncio.ensure_future(coroutine)</code> \u548c <code>loop.create_task(coroutine)</code>\u90fd\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a<code>task</code>\uff0c<code>run_until_complete</code>\u7684\u53c2\u6570\u662f\u4e00\u4e2a<code>futrue</code>\u5bf9\u8c61\u3002\u5f53\u4f20\u5165\u4e00\u4e2a\u534f\u7a0b\uff0c\u5176\u5185\u90e8\u4f1a\u81ea\u52a8\u5c01\u88c5\u6210<code>task</code>\uff0c<code>task</code>\u662f<code>Future</code>\u7684\u5b50\u7c7b\u3002<code>isinstance(task, asyncio.Future)</code>\u5c06\u4f1a\u8f93\u51fa<code>True</code>\u3002</p>"},{"location":"asyncio/#\u7ed1\u5b9a\u56de\u8c03","title":"\u7ed1\u5b9a\u56de\u8c03","text":"<p>\u7ed1\u5b9a\u56de\u8c03\uff0c\u5728<code>task</code>\u6267\u884c\u5b8c\u6bd5\u7684\u65f6\u5019\u53ef\u4ee5\u83b7\u53d6\u6267\u884c\u7684\u7ed3\u679c\uff0c\u56de\u8c03\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f<code>future</code>\u5bf9\u8c61\uff0c\u901a\u8fc7\u8be5\u5bf9\u8c61\u53ef\u4ee5\u83b7\u53d6\u534f\u7a0b\u8fd4\u56de\u503c\u3002\u5982\u679c\u56de\u8c03\u9700\u8981\u591a\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u504f\u51fd\u6570\u5bfc\u5165\u3002</p> <pre><code>import time\nimport asyncio\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n    return 'Done after {}s'.format(x)\n\ndef callback(future):\n    print('Callback: ', future.result())\n\nstart = now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\ntask.add_done_callback(callback)\nloop.run_until_complete(task)\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u504f\u51fd\u6570\u56fa\u5b9a\u53c2\u6570:</p> <pre><code>def callback(t, future):\n    print('Callback:', t, future.result())\n\ntask.add_done_callback(functools.partial(callback, 2))\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c<code>coroutine</code>\u6267\u884c\u7ed3\u675f\u65f6\u5019\u4f1a\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\u5e76\u901a\u8fc7\u53c2\u6570<code>future</code>\u83b7\u53d6\u534f\u7a0b\u6267\u884c\u7684\u7ed3\u679c\u3002\u6211\u4eec\u521b\u5efa\u7684<code>task</code>\u548c\u56de\u8c03\u91cc\u7684future\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002</p>"},{"location":"asyncio/#future-\u4e0e-result","title":"future \u4e0e result","text":"<p>\u56de\u8c03\u4e00\u76f4\u662f\u5f88\u591a\u5f02\u6b65\u7f16\u7a0b\u7684\u6076\u68a6\uff0c\u7a0b\u5e8f\u5458\u66f4\u559c\u6b22\u4f7f\u7528\u540c\u6b65\u7684\u7f16\u5199\u65b9\u5f0f\u5199\u5f02\u6b65\u4ee3\u7801\uff0c\u4ee5\u907f\u514d\u56de\u8c03\u7684\u6076\u68a6\u3002\u56de\u8c03\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86<code>future</code>\u5bf9\u8c61\u7684<code>result</code>\u65b9\u6cd5\u3002\u524d\u9762\u4e0d\u7ed1\u5b9a\u56de\u8c03\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230<code>task</code>\u6709<code>fiinished</code>\u72b6\u6001\u3002\u5728\u90a3\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6<code>task</code>\u7684<code>result</code>\u65b9\u6cd5\u3002</p> <pre><code>import asyncio\n\nfrom datetime import datetime\n\nasync def do_some_work(x):\n    print(f'Waiting {x=}'.format(x))\n    return 'Done after {}s'.format(x)\n\nstart = datetime.now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\nloop.run_until_complete(task)\n\nprint(f'Task ret: {task.result()=}')\nprint(f'TIME: {datetime.now() - start =}')\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\uff1a</p> <pre><code>Waiting x=2\nTask ret: task.result()='Done after 2s'\nTIME: datetime.now() - start =datetime.timedelta(microseconds=329)\n</code></pre>"},{"location":"asyncio/#\u963b\u585e\u548cawait","title":"\u963b\u585e\u548cawait","text":"<p>\u4f7f\u7528<code>async</code>\u53ef\u4ee5\u5b9a\u4e49\u534f\u7a0b\u5bf9\u8c61\uff0c\u4f7f\u7528<code>await</code>\u53ef\u4ee5\u9488\u5bf9\u8017\u65f6\u7684\u64cd\u4f5c\u8fdb\u884c\u6302\u8d77\uff0c\u5c31\u50cf\u751f\u6210\u5668\u91cc\u7684<code>yield</code>\u4e00\u6837\uff0c\u51fd\u6570\u8ba9\u51fa\u63a7\u5236\u6743\u3002\u534f\u7a0b\u9047\u5230<code>await</code>\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u4f1a\u6302\u8d77\u8be5\u534f\u7a0b\uff0c\u6267\u884c\u522b\u7684\u534f\u7a0b\uff0c\u76f4\u5230\u5176\u4ed6\u7684\u534f\u7a0b\u4e5f\u6302\u8d77\u6216\u8005\u6267\u884c\u5b8c\u6bd5\uff0c\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a\u534f\u7a0b\u7684\u6267\u884c\u3002</p> <p>\u8017\u65f6\u7684\u64cd\u4f5c\u4e00\u822c\u662f\u4e00\u4e9bIO\u64cd\u4f5c\uff0c\u4f8b\u5982\u7f51\u7edc\u8bf7\u6c42\uff0c\u6587\u4ef6\u8bfb\u53d6\u7b49\u3002\u6211\u4eec\u4f7f\u7528<code>asyncio.sleep</code>\u51fd\u6570\u6765\u6a21\u62dfIO\u64cd\u4f5c\u3002\u534f\u7a0b\u7684\u76ee\u7684\u4e5f\u662f\u8ba9\u8fd9\u4e9bIO\u64cd\u4f5c\u5f02\u6b65\u5316\u3002</p> <pre><code>import asyncio\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\nloop.run_until_complete(task)\n\nprint('Task ret: ', task.result())\nprint('TIME: ', now() - start)  \n</code></pre> <p>\u5728 <code>sleep</code>\u7684\u65f6\u5019\uff0c\u4f7f\u7528<code>await</code>\u8ba9\u51fa\u63a7\u5236\u6743\u3002\u5373\u5f53\u9047\u5230\u963b\u585e\u8c03\u7528\u7684\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528<code>await</code>\u65b9\u6cd5\u5c06\u534f\u7a0b\u7684\u63a7\u5236\u6743\u8ba9\u51fa\uff0c\u4ee5\u4fbf<code>loop</code>\u8c03\u7528\u5176\u4ed6\u7684\u534f\u7a0b\u3002\u73b0\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u5c31\u7528\u8017\u65f6\u7684\u963b\u585e\u64cd\u4f5c\u4e86\u3002</p>"},{"location":"asyncio/#\u5e76\u53d1\u548c\u5e76\u884c","title":"\u5e76\u53d1\u548c\u5e76\u884c","text":"<p>\u5e76\u53d1\u548c\u5e76\u884c\u4e00\u76f4\u662f\u5bb9\u6613\u6df7\u6dc6\u7684\u6982\u5ff5\u3002\u5e76\u53d1\u901a\u5e38\u6307\u6709\u591a\u4e2a\u4efb\u52a1\u9700\u8981\u540c\u65f6\u8fdb\u884c\uff0c\u5e76\u884c\u5219\u662f\u540c\u4e00\u65f6\u523b\u6709\u591a\u4e2a\u4efb\u52a1\u6267\u884c\u3002\u7528\u4e0a\u8bfe\u6765\u4e3e\u4f8b\u5c31\u662f\uff0c\u5e76\u53d1\u60c5\u51b5\u4e0b\u662f\u4e00\u4e2a\u8001\u5e08\u5728\u540c\u4e00\u65f6\u95f4\u6bb5\u8f85\u52a9\u4e0d\u540c\u7684\u4eba\u529f\u8bfe\u3002\u5e76\u884c\u5219\u662f\u597d\u51e0\u4e2a\u8001\u5e08\u5206\u522b\u540c\u65f6\u8f85\u52a9\u591a\u4e2a\u5b66\u751f\u529f\u8bfe\u3002\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u4e00\u4e2a\u4eba\u540c\u65f6\u5403\u4e09\u4e2a\u9992\u5934\u8fd8\u662f\u4e09\u4e2a\u4eba\u540c\u65f6\u5206\u522b\u5403\u4e00\u4e2a\u7684\u60c5\u51b5\uff0c\u5403\u4e00\u4e2a\u9992\u5934\u7b97\u4e00\u4e2a\u4efb\u52a1\u3002</p> <p><code>asyncio</code>\u5b9e\u73b0\u5e76\u53d1\uff0c\u5c31\u9700\u8981\u591a\u4e2a\u534f\u7a0b\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u6bcf\u5f53\u6709\u4efb\u52a1\u963b\u585e\u7684\u65f6\u5019\u5c31<code>await</code>\uff0c\u7136\u540e\u5176\u4ed6\u534f\u7a0b\u7ee7\u7eed\u5de5\u4f5c\u3002\u521b\u5efa\u591a\u4e2a\u534f\u7a0b\u7684\u5217\u8868\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u534f\u7a0b\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nstart = now()\n\ncoroutine1 = do_some_work(1)\ncoroutine2 = do_some_work(2)\ncoroutine3 = do_some_work(4)\n\ntasks = [\n    asyncio.ensure_future(coroutine1),\n    asyncio.ensure_future(coroutine2),\n    asyncio.ensure_future(coroutine3)\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n\nfor task in tasks:\n    print('Task ret: ', task.result())\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u7ed3\u679c\u5982\u4e0b</p> <pre><code>Waiting:  1\nWaiting:  2\nWaiting:  4\nTask ret:  Done after 1s\nTask ret:  Done after 2s\nTask ret:  Done after 4s\nTIME:  4.003541946411133\n</code></pre> <p>\u603b\u65f6\u95f4\u4e3a4s\u5de6\u53f3\u30024s\u7684\u963b\u585e\u65f6\u95f4\uff0c\u8db3\u591f\u524d\u9762\u4e24\u4e2a\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u3002\u5982\u679c\u662f\u540c\u6b65\u987a\u5e8f\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u81f3\u5c11\u9700\u89817s\u3002\u6b64\u65f6\u6211\u4eec\u4f7f\u7528\u4e86<code>aysncio</code>\u5b9e\u73b0\u4e86\u5e76\u53d1\u3002<code>asyncio.wait(tasks)</code> \u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>asyncio.gather(*tasks)</code> ,\u524d\u8005\u63a5\u53d7\u4e00\u4e2a<code>task</code>\u5217\u8868\uff0c\u540e\u8005\u63a5\u6536\u4e00\u5806<code>task</code>\u3002</p>"},{"location":"asyncio/#\u534f\u7a0b\u5d4c\u5957","title":"\u534f\u7a0b\u5d4c\u5957","text":"<p>\u4f7f\u7528<code>async</code>\u53ef\u4ee5\u5b9a\u4e49\u534f\u7a0b\uff0c\u534f\u7a0b\u7528\u4e8e\u8017\u65f6\u7684io\u64cd\u4f5c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c01\u88c5\u66f4\u591a\u7684io\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5d4c\u5957\u7684\u534f\u7a0b\uff0c\u5373\u4e00\u4e2a\u534f\u7a0b\u4e2d<code>await</code>\u4e86\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\uff0c\u5982\u6b64\u8fde\u63a5\u8d77\u6765\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nasync def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    dones, pendings = await asyncio.wait(tasks)\n\n    for task in dones:\n        print('Task ret: ', task.result())\n\nstart = now()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u7684\u662f <code>asyncio.gather</code>\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61\uff0c\u90a3\u4e48<code>await</code>\u7684\u8fd4\u56de\u503c\u5c31\u662f\u534f\u7a0b\u8fd0\u884c\u7684\u7ed3\u679c\u3002</p> <pre><code>    results = await asyncio.gather(*tasks)\n\n    for result in results:\n        print('Task ret: ', result)\n</code></pre> <p>\u4e0d\u5728main\u534f\u7a0b\u51fd\u6570\u91cc\u5904\u7406\u7ed3\u679c\uff0c\u76f4\u63a5\u8fd4\u56de<code>await</code>\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6700\u5916\u5c42\u7684<code>run_until_complete</code>\u5c06\u4f1a\u8fd4\u56de<code>main</code>\u534f\u7a0b\u7684\u7ed3\u679c\u3002</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(2)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    return await asyncio.gather(*tasks)\n\nstart = now()\n\nloop = asyncio.get_event_loop()\nresults = loop.run_until_complete(main())\n\nfor result in results:\n    print('Task ret: ', result)\n</code></pre> <p>\u6216\u8005\u8fd4\u56de\u4f7f\u7528<code>asyncio.wait</code>\u65b9\u5f0f\u6302\u8d77\u534f\u7a0b\u3002</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    return await asyncio.wait(tasks)\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ndone, pending = loop.run_until_complete(main())\n\nfor task in done:\n    print('Task ret: ', task.result())\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>asyncio</code>\u7684<code>as_completed</code>\u65b9\u6cd5</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n    for task in asyncio.as_completed(tasks):\n        result = await task\n        print('Task ret: {}'.format(result))\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ndone = loop.run_until_complete(main())\nprint('TIME: ', now() - start)\n</code></pre> <p>\u7531\u6b64\u53ef\u89c1\uff0c\u534f\u7a0b\u7684\u8c03\u7528\u548c\u7ec4\u5408\u5341\u5206\u7075\u6d3b\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u7ed3\u679c\u7684\u5904\u7406\uff0c\u5982\u4f55\u8fd4\u56de\uff0c\u5982\u4f55\u6302\u8d77\uff0c\u9700\u8981\u9010\u6e10\u79ef\u7d2f\u7ecf\u9a8c\u548c\u524d\u77bb\u7684\u8bbe\u8ba1\u3002</p>"},{"location":"asyncio/#\u534f\u7a0b\u505c\u6b62","title":"\u534f\u7a0b\u505c\u6b62","text":"<p>\u4e0a\u9762\u89c1\u8bc6\u4e86\u534f\u7a0b\u7684\u51e0\u79cd\u5e38\u7528\u7684\u7528\u6cd5\uff0c\u90fd\u662f\u534f\u7a0b\u56f4\u7ed5\u7740\u4e8b\u4ef6\u5faa\u73af\u8fdb\u884c\u7684\u64cd\u4f5c\u3002future\u5bf9\u8c61\u6709\u51e0\u4e2a\u72b6\u6001\uff1a</p> <ul> <li>Pending</li> <li>Running</li> <li>Done</li> <li>Cancelled</li> </ul> <p>\u521b\u5efa<code>future</code>\u7684\u65f6\u5019\uff0c<code>task</code>\u4e3a<code>pending</code>\uff0c\u4e8b\u4ef6\u5faa\u73af\u8c03\u7528\u6267\u884c\u7684\u65f6\u5019\u5f53\u7136\u5c31\u662f<code>running</code>\uff0c\u8c03\u7528\u5b8c\u6bd5\u81ea\u7136\u5c31\u662f<code>done</code>\uff0c\u5982\u679c\u9700\u8981\u505c\u6b62\u4e8b\u4ef6\u5faa\u73af\uff0c\u5c31\u9700\u8981\u5148\u628a<code>task</code>\u53d6\u6d88\u3002\u53ef\u4ee5\u4f7f\u7528<code>asyncio.Task</code>\u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u7684<code>task</code></p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\ncoroutine1 = do_some_work(1)\ncoroutine2 = do_some_work(2)\ncoroutine3 = do_some_work(2)\n\ntasks = [\n    asyncio.ensure_future(coroutine1),\n    asyncio.ensure_future(coroutine2),\n    asyncio.ensure_future(coroutine3)\n]\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(asyncio.wait(tasks))\nexcept KeyboardInterrupt as e:\n    print(asyncio.all_tasks(loop))\n    for task in asyncio.all_tasks(loop):\n        print(task.cancel())\n    loop.stop()\n    loop.run_forever()\nfinally:\n    loop.close()\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u4e4b\u540e\uff0c\u9a6c\u4e0a<code>ctrl+c</code>\uff0c\u4f1a\u89e6\u53d1<code>run_until_complete</code>\u7684\u6267\u884c\u5f02\u5e38 <code>KeyBorardInterrupt</code>\u3002\u7136\u540e\u901a\u8fc7\u5faa\u73af<code>asyncio.all_tasks(loop)</code>\u53d6\u6d88<code>future</code>\u3002\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>Waiting:  1\nWaiting:  2\nWaiting:  2\n{&lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x101230648&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;, &lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x1032b10a8&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;, &lt;Task pending coro=&lt;wait() running at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:307&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x103317d38&gt;()]&gt; cb=[_run_until_complete_cb() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/base_events.py:176]&gt;, &lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x103317be8&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;}\nTrue\nTrue\nTrue\nTrue\nTIME:  0.8858370780944824\n</code></pre> <p><code>True</code>\u8868\u793a<code>cannel</code>\u6210\u529f\uff0c<code>loop stop</code>\u4e4b\u540e\u8fd8\u9700\u8981\u518d\u6b21\u5f00\u542f\u4e8b\u4ef6\u5faa\u73af\uff0c\u6700\u540e\u5728<code>close</code>\uff0c\u4e0d\u7136\u8fd8\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a</p> <pre><code>Task was destroyed but it is pending!\ntask: &lt;Task pending coro=&lt;do_some_work() done,\n</code></pre> <p>\u5faa\u73af<code>task</code>\uff0c\u9010\u4e2a<code>cancel</code>\u662f\u4e00\u79cd\u65b9\u6848\uff0c\u53ef\u662f\u6b63\u5982\u4e0a\u9762\u6211\u4eec\u628a<code>task</code>\u7684\u5217\u8868\u5c01\u88c5\u5728<code>main</code>\u51fd\u6570\u4e2d\uff0c<code>main</code>\u51fd\u6570\u5916\u8fdb\u884c\u4e8b\u4ef6\u5faa\u73af\u7684\u8c03\u7528\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c<code>main</code>\u76f8\u5f53\u4e8e\u6700\u5916\u51fa\u7684\u4e00\u4e2a<code>task</code>\uff0c\u90a3\u4e48\u5904\u7406\u5305\u88c5\u7684<code>main</code>\u51fd\u6570\u5373\u53ef\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nasync def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(2)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n    done, pending = await asyncio.wait(tasks)\n    for task in done:\n        print('Task ret: ', task.result())\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(main())\ntry:\n    loop.run_until_complete(task)\nexcept KeyboardInterrupt as e:\n    print(asyncio.all_tasks(loop))\n    print(asyncio.gather(*asyncio.all_tasks(loop)).cancel())\n    loop.stop()\n    loop.run_forever()\nfinally:\n    loop.close()\n</code></pre>"},{"location":"asyncio/#\u4e0d\u540c\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af","title":"\u4e0d\u540c\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af","text":"<p>\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u7684\u4e8b\u4ef6\u5faa\u73af\u7528\u4e8e\u6ce8\u518c\u534f\u7a0b\uff0c\u800c\u6709\u7684\u534f\u7a0b\u9700\u8981\u52a8\u6001\u7684\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528\u591a\u7ebf\u7a0b\u3002\u5f53\u524d\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u5728\u65b0\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5728\u65b0\u7ebf\u7a0b\u4e2d\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u3002\u5f53\u524d\u7ebf\u7a0b\u4e0d\u4f1a\u88ab<code>block</code>\u3002</p> <pre><code>import time\nimport asyncio\nfrom datetime import datetime\nfrom threading import Thread\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\ndef more_work(x):\n    print('More work {}'.format(x))\n    time.sleep(x)\n    print('Finished more work {}'.format(x))\n\nstart = time.time()\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint('TIME: {}'.format(time.time() - start))\n\nnew_loop.call_soon_threadsafe(more_work, 6)\nnew_loop.call_soon_threadsafe(more_work, 3)\n</code></pre> <p>\u542f\u52a8\u4e0a\u8ff0\u4ee3\u7801\u4e4b\u540e\uff0c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u4f1a\u88ab<code>block</code>\uff0c\u65b0\u7ebf\u7a0b\u4e2d\u4f1a\u6309\u7167\u987a\u5e8f\u6267\u884c<code>call_soon_threadsafe</code>\u65b9\u6cd5\u6ce8\u518c\u7684<code>more_work</code>\u65b9\u6cd5\uff0c\u540e\u8005\u56e0\u4e3a<code>time.sleep</code>\u64cd\u4f5c\u662f\u540c\u6b65\u963b\u585e\u7684\uff0c\u56e0\u6b64\u8fd0\u884c\u5b8c\u6bd5<code>more_work</code>\u9700\u8981\u5927\u81f46 + 3</p>"},{"location":"asyncio/#\u65b0\u7ebf\u7a0b\u534f\u7a0b","title":"\u65b0\u7ebf\u7a0b\u534f\u7a0b","text":"<pre><code>import time\nimport asyncio\nfrom datetime import datetime\nfrom threading import Thread\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\nasync def do_some_work(x):\n    print('Waiting {}'.format(x))\n    await asyncio.sleep(x)\n    print('Done after {}s'.format(x))\n\ndef more_work(x):\n    print('More work {}'.format(x))\n    time.sleep(x)\n    print('Finished more work {}'.format(x))\n\nstart = time.time()\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint('TIME: {}'.format(time.time() - start))\n\nasyncio.run_coroutine_threadsafe(do_some_work(6), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(4), new_loop)\n</code></pre> <p>\u4e0a\u8ff0\u7684\u4f8b\u5b50\uff0c\u4e3b\u7ebf\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a<code>new_loop</code>\uff0c\u7136\u540e\u5728\u53e6\u5916\u7684\u5b50\u7ebf\u7a0b\u4e2d\u5f00\u542f\u4e00\u4e2a\u65e0\u9650\u4e8b\u4ef6\u5faa\u73af\u3002\u4e3b\u7ebf\u7a0b\u901a\u8fc7<code>run_coroutine_threadsafe</code>\u65b0\u6ce8\u518c\u534f\u7a0b\u5bf9\u8c61\u3002\u8fd9\u6837\u5c31\u80fd\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8fdb\u884c\u4e8b\u4ef6\u5faa\u73af\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u540c\u65f6\u4e3b\u7ebf\u7a0b\u53c8\u4e0d\u4f1a\u88ab<code>block</code>\u3002\u4e00\u5171\u6267\u884c\u7684\u65f6\u95f4\u5927\u6982\u5728<code>6s</code>\u5de6\u53f3\u3002</p>"},{"location":"asyncio/#master-worker\u4e3b\u4ece\u6a21\u5f0f","title":"master-worker\u4e3b\u4ece\u6a21\u5f0f","text":"<p>\u5bf9\u4e8e\u5e76\u53d1\u4efb\u52a1\uff0c\u901a\u5e38\u662f\u7528\u751f\u6210\u6d88\u8d39\u6a21\u578b\uff0c\u5bf9\u961f\u5217\u7684\u5904\u7406\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3cmaster-worker\u7684\u65b9\u5f0f\uff0cmaster\u4e3b\u8981\u7528\u6237\u83b7\u53d6\u961f\u5217\u7684msg\uff0cworker\u7528\u6237\u5904\u7406\u6d88\u606f\u3002</p> <p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5e76\u4e14\u534f\u7a0b\u66f4\u9002\u5408\u5355\u7ebf\u7a0b\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u7684\u4e3b\u7ebf\u7a0b\u7528\u6765\u76d1\u542c\u961f\u5217\uff0c\u5b50\u7ebf\u7a0b\u7528\u4e8e\u5904\u7406\u961f\u5217\u3002\u8fd9\u91cc\u4f7f\u7528redis\u7684\u961f\u5217\u3002\u4e3b\u7ebf\u7a0b\u4e2d\u6709\u4e00\u4e2a\u662f\u65e0\u9650\u5faa\u73af\uff0c\u7528\u6237\u6d88\u8d39\u961f\u5217\u3002</p> <pre><code>    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\n</code></pre> <p>\u7ed9\u961f\u5217\u6dfb\u52a0\u4e00\u4e9b\u6570\u636e\uff1a</p> <pre><code>127.0.0.1:6379[3]&gt; lpush queue 2\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 5\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n</code></pre> <p>\u53ef\u4ee5\u770b\u89c1\u8f93\u51fa\uff1a</p> <pre><code>Waiting  2\nDone 2\nWaiting  5\nWaiting  1\nDone 1\nWaiting  1\nDone 1\nDone 5\n</code></pre> <p>\u6211\u4eec\u53d1\u8d77\u4e86\u4e00\u4e2a\u8017\u65f65s\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53c8\u53d1\u8d77\u4e86\u8fde\u4e2a1s\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u89c1\u5b50\u7ebf\u7a0b\u5e76\u53d1\u7684\u6267\u884c\u4e86\u8fd9\u51e0\u4e2a\u4efb\u52a1\uff0c\u5176\u4e2d5s await\u7684\u65f6\u5019\uff0c\u76f8\u7ee7\u6267\u884c\u4e861s\u7684\u4e24\u4e2a\u4efb\u52a1\u3002</p>"},{"location":"asyncio/#\u505c\u6b62\u5b50\u7ebf\u7a0b","title":"\u505c\u6b62\u5b50\u7ebf\u7a0b","text":"<p>\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u4f8b\u5b50\u5f88\u5b8c\u7f8e\u3002\u53ef\u662f\uff0c\u9700\u8981\u505c\u6b62\u7a0b\u5e8f\uff0c\u76f4\u63a5<code>ctrl+c</code>\uff0c\u4f1a\u629b\u51fa<code>KeyboardInterrupt</code>\u9519\u8bef\uff0c\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4e3b\u5faa\u73af\uff1a</p> <pre><code>try:\n    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept KeyboardInterrupt as e:\n    print(e)\n    new_loop.stop()\n</code></pre> <p>\u53ef\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u597d\u4f7f\uff0c\u867d\u7136\u4e3b\u7ebf\u7a0b<code>try</code>\u4e86<code>KeyboardInterrupt</code>\u5f02\u5e38\uff0c\u4f46\u662f\u5b50\u7ebf\u7a0b\u5e76\u6ca1\u6709\u9000\u51fa\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u8fd9\u6837\u5f53\u4e3b\u7ebf\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5b50\u7ebf\u7a0b\u4e5f\u968f\u673a\u9000\u51fa\u3002</p> <pre><code>new_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.setDaemon(True)    # \u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u4e3a\u5b88\u62a4\u7ebf\u7a0b\nt.start()\n\ntry:\n    while True:\n        # print('start rpop')\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept KeyboardInterrupt as e:\n    print(e)\n    new_loop.stop()\n</code></pre> <p>\u7ebf\u7a0b\u505c\u6b62\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e3b\u7ebf\u7a0b\u9000\u51fa\u540e\uff0c\u5b50\u7ebf\u7a0b\u4e5f\u968f\u673a\u9000\u51fa\u624d\u4e86\uff0c\u5e76\u4e14\u505c\u6b62\u4e86\u5b50\u7ebf\u7a0b\u7684\u534f\u7a0b\u4efb\u52a1\u3002</p>"},{"location":"asyncio/#aiohttp","title":"aiohttp","text":"<p>\u5728\u6d88\u8d39\u961f\u5217\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528<code>asyncio</code>\u7684<code>sleep</code>\u7528\u4e8e\u6a21\u62df\u8017\u65f6\u7684<code>io\u64cd\u4f5c</code>\u3002\u4ee5\u524d\u6709\u4e00\u4e2a\u77ed\u4fe1\u670d\u52a1\uff0c\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u8bf7\u6c42\u8fdc\u7a0b\u7684\u77ed\u4fe1<code>api</code>\uff0c\u6b64\u65f6\u9700\u8981\u662f\u9700\u8981\u4f7f\u7528<code>aiohttp</code>\u8fdb\u884c\u5f02\u6b65\u7684<code>http</code>\u8bf7\u6c42\u3002\u5927\u81f4\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>server.py</p> <pre><code>import time\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/&lt;int:x&gt;')\ndef index(x):\n    time.sleep(x)\n    return \"{} It works\".format(x)\n\n@app.route('/error')\ndef error():\n    time.sleep(3)\n    return \"error!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p><code>/</code>\u63a5\u53e3\u8868\u793a\u77ed\u4fe1\u63a5\u53e3\uff0c<code>/error</code>\u8868\u793a\u8bf7\u6c42<code>/</code>\u5931\u8d25\u4e4b\u540e\u7684\u62a5\u8b66\u3002</p> <p>async-custoimer.py</p> <pre><code>import time\nimport asyncio\nfrom threading import Thread\nimport redis\nimport aiohttp\n\ndef get_redis():\n    connection_pool = redis.ConnectionPool(host='127.0.0.1', db=3)\n    return redis.Redis(connection_pool=connection_pool)\n\nrcon = get_redis()\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\nasync def fetch(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as resp:\n            print(resp.status)\n            return await resp.text()\n\nasync def do_some_work(x):\n    print('Waiting ', x)\n    try:\n        ret = await fetch(url='http://127.0.0.1:5000/{}'.format(x))\n        print(ret)\n    except Exception as e:\n        try:\n            print(await fetch(url='http://127.0.0.1:5000/error'))\n        except Exception as e:\n            print(e)\n    else:\n        print('Done {}'.format(x))\n\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.setDaemon(True)\nt.start()\n\ntry:\n    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept Exception as e:\n    print('error')\n    new_loop.stop()\nfinally:\n    pass\n</code></pre> <p>\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u5728<code>fetch</code>\u7684\u65f6\u5019<code>try</code>\u4e86\u5f02\u5e38\uff0c\u5982\u679c\u6ca1\u6709<code>try</code>\u8fd9\u4e2a\u5f02\u5e38\uff0c\u5373\u4f7f\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u5b50\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u4e5f\u4e0d\u4f1a\u9000\u51fa\u3002\u4e3b\u7ebf\u7a0b\u4e5f\u4e0d\u4f1a\u9000\u51fa\uff0c\u6682\u65f6\u6ca1\u627e\u5230\u529e\u6cd5\u53ef\u4ee5\u628a\u5b50\u7ebf\u7a0b\u7684\u5f02\u5e38<code>raise</code>\u4f20\u64ad\u5230\u4e3b\u7ebf\u7a0b\u3002\uff08\u5982\u679c\u8c01\u627e\u5230\u4e86\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e26\u5e26\u6211\uff09\u3002</p> <p>\u5bf9\u4e8e<code>redis</code>\u7684\u6d88\u8d39\uff0c\u8fd8\u6709\u4e00\u4e2a<code>block</code>\u7684\u65b9\u6cd5\uff1a</p> <pre><code>try:\n    while True:\n        _, task = rcon.brpop(\"queue\")\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept Exception as e:\n    print('error', e)\n    new_loop.stop()\nfinally:\n    pass\n</code></pre> <p>\u4f7f\u7528 <code>brpop</code>\u65b9\u6cd5\uff0c\u4f1a<code>block</code>\u4f4f<code>task</code>\uff0c\u5982\u679c\u4e3b\u7ebf\u7a0b\u6709\u6d88\u606f\uff0c\u624d\u4f1a\u6d88\u8d39\u3002\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4f3c\u4e4e<code>brpop</code>\u7684\u65b9\u5f0f\u66f4\u9002\u5408\u8fd9\u79cd\u961f\u5217\u6d88\u8d39\u7684\u6a21\u578b\u3002</p> <pre><code>127.0.0.1:6379[3]&gt; lpush queue 5\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7ed3\u679c</p> <pre><code>Waiting  5\nWaiting  1\nWaiting  1\n200\n1 It works\nDone 1\n200\n1 It works\nDone 1\n200\n5 It works\nDone 5\n</code></pre>"},{"location":"asyncio/#\u534f\u7a0b\u6d88\u8d39","title":"\u534f\u7a0b\u6d88\u8d39","text":"<p>\u4e3b\u7ebf\u7a0b\u7528\u4e8e\u76d1\u542c\u961f\u5217\uff0c\u7136\u540e\u5b50\u7ebf\u7a0b\u7684\u505a\u4e8b\u4ef6\u5faa\u73af\u7684<code>worker</code>\u662f\u4e00\u79cd\u65b9\u5f0f\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u79cd\u7c7b\u4f3c<code>master-worker</code>\u7684\u65b9\u6848\u3002\u5373\u628a\u76d1\u542c\u961f\u5217\u7684\u65e0\u9650\u5faa\u73af\u903b\u8f91\u4e00\u9053\u534f\u7a0b\u4e2d\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u5c31\u521b\u5efa\u82e5\u5e72\u4e2a\u534f\u7a0b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u5e76\u884c\u7684\u6548\u679c\u3002</p> <pre><code>import time\nimport asyncio\nimport redis\n\nnow = lambda : time.time()\n\ndef get_redis():\n    connection_pool = redis.ConnectionPool(host='127.0.0.1', db=3)\n    return redis.Redis(connection_pool=connection_pool)\n\nrcon = get_redis()\n\nasync def worker():\n    print('Start worker')\n\n    while True:\n        start = now()\n        task = rcon.rpop(\"queue\")\n        if not task:\n            await asyncio.sleep(1)\n            continue\n        print('Wait ', int(task))\n        await asyncio.sleep(int(task))\n        print('Done ', task, now() - start)\n\ndef main():\n    asyncio.ensure_future(worker())\n    asyncio.ensure_future(worker())\n\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt as e:\n        print(asyncio.gather(*asyncio.Task.all_tasks()).cancel())\n        loop.stop()\n        loop.run_forever()\n    finally:\n        loop.close()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>\u8fd9\u6837\u505a\u5c31\u53ef\u4ee5\u591a\u591a\u542f\u52a8\u51e0\u4e2a<code>worker</code>\u6765\u76d1\u542c\u961f\u5217\u3002\u4e00\u6837\u53ef\u4ee5\u5230\u8fbe\u6548\u679c\u3002</p>"},{"location":"asyncio/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u4e0a\u8ff0\u7b80\u5355\u7684\u4ecb\u7ecd\u4e86<code>asyncio</code>\u7684\u7528\u6cd5\uff0c\u4e3b\u8981\u662f\u7406\u89e3\u4e8b\u4ef6\u5faa\u73af\uff0c\u534f\u7a0b\u548c\u4efb\u52a1\uff0cfuture\u7684\u5173\u7cfb\u3002\u5f02\u6b65\u7f16\u7a0b\u4e0d\u540c\u4e8e\u5e38\u89c1\u7684\u540c\u6b65\u7f16\u7a0b\uff0c\u8bbe\u8ba1\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7684\u65f6\u5019\uff0c\u9700\u8981\u7279\u522b\u7684\u6ce8\u610f\u3002\u6bd5\u7adf\u8fd9\u548c\u4ee5\u5f80\u7684\u7f16\u7801\u7ecf\u9a8c\u6709\u70b9\u4e0d\u4e00\u6837\u3002\u53ef\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u5e73\u65f6\u5904\u4e8b\u7684\u65f6\u5019\uff0c\u5927\u8111\u4f1a\u81ea\u7136\u800c\u7136\u7684\u5b9e\u73b0\u5f02\u6b65\u534f\u7a0b\u3002\u6bd4\u5982\u7b49\u5f85\u716e\u8336\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u591a\u5199\u51e0\u884c\u4ee3\u7801\u3002</p> <p>\u76f8\u5173\u4ee3\u7801\u6587\u4ef6\u7684Gist</p> <p>\u53c2\u8003\uff1a</p> <ul> <li>Threaded Asynchronous Magic and How to Wield It</li> <li>Python Asyncio: The Complete Guide</li> </ul>"},{"location":"asyncio_en/","title":"Python Asyncio: \u5b8c\u6574\u6307\u5357","text":"<p>Python Asyncio: The Complete Guide</p> EnglishChinese <p>Asyncio allows us to use asynchronous programming with coroutine-based concurrency in Python.</p> <p>Although asyncio has been available in Python for many years now, it remains one of the most interesting and yet one of the most frustrating areas of Python.</p> <p>It is just plain hard to get started with asyncio for new developers.</p> <p>This guide provides a detailed and comprehensive(\u5168\u9762\u7684) review of asyncio in Python, including how to define, create and run coroutines, what is asynchronous programming, what is non-blocking-io, concurrency primitives(\u539f\u59cb\u5e76\u53d1) used with coroutines, common questions, and best practices.</p> <p>This is a massive 29,000+ word guide. You may want to bookmark it so you can refer to it as you develop your concurrent programs.</p> <p>Let\u2019s dive in.</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5728 Python \u4e2d\u4f7f\u7528\u57fa\u4e8e\u534f\u7a0b\u7684\u5e76\u53d1\u7684\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u5c3d\u7ba1 asyncio \u5df2\u7ecf\u5728 Python \u4e2d\u4f7f\u7528\u5f88\u591a\u5e74\u4e86\uff0c\u4f46\u5b83\u4ecd\u7136\u662f Python \u4e2d\u6700\u6709\u8da3\u4f46\u4e5f\u662f\u6700\u4ee4\u4eba\u6cae\u4e27\u7684\u9886\u57df\u4e4b\u4e00\u3002</p> <p>\u5bf9\u4e8e\u65b0\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u5f00\u59cb\u4f7f\u7528 asyncio \u975e\u5e38\u56f0\u96be\u3002</p> <p>\u672c\u6307\u5357\u5bf9 Python \u4e2d\u7684 asyncio \u8fdb\u884c\u4e86\u8be6\u7ec6\u800c\u5168\u9762\u7684\u56de\u987e\uff0c\u5305\u62ec\u5982\u4f55\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b\u3001\u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b\u3001\u4ec0\u4e48\u662f\u975e\u963b\u585e io\u3001\u4e0e\u534f\u7a0b\u4e00\u8d77\u4f7f\u7528\u7684\u5e76\u53d1\u539f\u8bed\u3001 \u5e38\u89c1\u95ee\u9898\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p> <p>\u8fd9\u662f\u4e00\u672c\u8d85\u8fc7 29,000 \u5b57\u7684\u6d77\u91cf\u6307\u5357\u3002 \u60a8\u53ef\u80fd\u9700\u8981\u4e3a\u5176\u6dfb\u52a0\u4e66\u7b7e\uff0c\u4ee5\u4fbf\u5728\u5f00\u53d1\u5e76\u53d1\u7a0b\u5e8f\u65f6\u53ef\u4ee5\u53c2\u8003\u5b83\u3002</p> <p>\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b\u3002</p>"},{"location":"asyncio_en/#1-\u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b","title":"1. \u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b","text":"<p>1. What is Asynchronous Programming</p> EnglishChinese"},{"location":"asyncio_en/#11-\u5f02\u6b65\u4efb\u52a1","title":"1.1 \u5f02\u6b65\u4efb\u52a1","text":"<p>1.1 Asynchronous Tasks</p> EnglishChinese"},{"location":"asyncio_en/#12-\u5f02\u6b65\u7f16\u7a0b","title":"1.2 \u5f02\u6b65\u7f16\u7a0b","text":"<p>1.2 Asynchronous Programming</p> EnglishChinese"},{"location":"asyncio_en/#13-python-\u5f02\u6b65\u7f16\u7a0b","title":"1.3 Python \u5f02\u6b65\u7f16\u7a0b","text":"<p>1.3 Asynchronous Programming in Python</p> EnglishChinese"},{"location":"asyncio_en/#2-asyncio-\u662f\u4ec0\u4e48","title":"2. Asyncio \u662f\u4ec0\u4e48","text":"<p>2. What is Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#21-\u5bf9-python-\u8fdb\u884c\u66f4\u6539\u4ee5\u6dfb\u52a0\u5bf9\u534f\u7a0b\u7684\u652f\u6301","title":"2.1 \u5bf9 Python \u8fdb\u884c\u66f4\u6539\u4ee5\u6dfb\u52a0\u5bf9\u534f\u7a0b\u7684\u652f\u6301","text":"<p>2.1 Changes to Python to add Support for Coroutines</p> EnglishChinese"},{"location":"asyncio_en/#22-asyncio-\u6a21\u5757","title":"2.2 asyncio \u6a21\u5757","text":"<p>2.2 The asyncio Module</p> EnglishChinese"},{"location":"asyncio_en/#3-asyncio-\u5728\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528","title":"3. Asyncio \u5728\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528","text":"<p>3. When to Use Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#31-\u4f7f\u7528python-asyncio\u7684\u539f\u56e0","title":"3.1 \u4f7f\u7528Python Asyncio\u7684\u539f\u56e0","text":"<p>3.1 Reasons to Use Asyncio in Python</p> EnglishChinese"},{"location":"asyncio_en/#311-\u539f\u56e0-1-\u4f7f\u7528\u534f\u7a0b","title":"3.1.1 \u539f\u56e0 1: \u4f7f\u7528\u534f\u7a0b","text":"<p>3.1.1 Reason 1: To Use Coroutines</p> EnglishChinese"},{"location":"asyncio_en/#312-\u539f\u56e0-2-\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b","title":"3.1.2 \u539f\u56e0 2: \u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b","text":"<p>3.1.2 Reason 2: To Use Asynchronous Programming</p> EnglishChinese"},{"location":"asyncio_en/#313-\u539f\u56e0-3-\u4f7f\u7528\u975e\u963b\u585eio","title":"3.1.3 \u539f\u56e0 3: \u4f7f\u7528\u975e\u963b\u585eI/O","text":"<p>3.1.3 Reason 3: To Use Non-Blocking I/O</p> EnglishChinese"},{"location":"asyncio_en/#32-\u4f7f\u7528asyncio\u7684\u5176\u4ed6\u539f\u56e0","title":"3.2 \u4f7f\u7528Asyncio\u7684\u5176\u4ed6\u539f\u56e0","text":"<p>3.2 Other Reasons to Use Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#33-asyncio\u5728\u4ec0\u4e48\u65f6\u5019\u4e0d\u9002\u7528","title":"3.3 Asyncio\u5728\u4ec0\u4e48\u65f6\u5019\u4e0d\u9002\u7528","text":"<p>3.3 When to Not Use Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#4-python-\u4e2d\u7684\u534f\u7a0b","title":"4. Python \u4e2d\u7684\u534f\u7a0b","text":"<p>4. Coroutines in Python</p> EnglishChinese"},{"location":"asyncio_en/#41-\u4ec0\u4e48\u662f\u534f\u7a0b","title":"4.1 \u4ec0\u4e48\u662f\u534f\u7a0b","text":"<p>4.1 What is a Coroutine</p> EnglishChinese"},{"location":"asyncio_en/#42-\u534f\u7a0b\u4e0e\u4f8b\u7a0b\u548c\u5b50\u4f8b\u7a0b","title":"4.2 \u534f\u7a0b\u4e0e\u4f8b\u7a0b\u548c\u5b50\u4f8b\u7a0b","text":"<p>4.2 Coroutine vs Routine and Subroutine</p> EnglishChinese"},{"location":"asyncio_en/#43-\u534f\u7a0b\u4e0e\u751f\u6210\u5668","title":"4.3 \u534f\u7a0b\u4e0e\u751f\u6210\u5668","text":"<p>4.3 Coroutine vs Generator</p> EnglishChinese"},{"location":"asyncio_en/#44-\u534f\u7a0b\u4e0e\u4efb\u52a1","title":"4.4 \u534f\u7a0b\u4e0e\u4efb\u52a1","text":"<p>4.4 Coroutine vs Task</p> EnglishChinese"},{"location":"asyncio_en/#45-\u534f\u7a0b\u4e0e\u7ebf\u7a0b","title":"4.5 \u534f\u7a0b\u4e0e\u7ebf\u7a0b","text":"<p>4.5 Coroutine vs Thread</p> EnglishChinese"},{"location":"asyncio_en/#46-\u534f\u7a0b\u4e0e\u8fdb\u7a0b","title":"4.6 \u534f\u7a0b\u4e0e\u8fdb\u7a0b","text":"<p>4.6 Coroutine vs Process</p> EnglishChinese"},{"location":"asyncio_en/#47-python-\u4f55\u65f6\u6dfb\u52a0\u4e86\u534f\u7a0b","title":"4.7 Python \u4f55\u65f6\u6dfb\u52a0\u4e86\u534f\u7a0b","text":"<p>4.7 When Were Coroutines Added to Python</p> EnglishChinese"},{"location":"asyncio_en/#5-\u5b9a\u4e49\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b","title":"5. \u5b9a\u4e49\u3001\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b","text":"<p>5. Define, Create and Run Coroutines</p> EnglishChinese"},{"location":"asyncio_en/#51-\u5982\u4f55\u5b9a\u4e49\u534f\u7a0b","title":"5.1 \u5982\u4f55\u5b9a\u4e49\u534f\u7a0b","text":"<p>5.1 How to Define a Coroutine</p> EnglishChinese"},{"location":"asyncio_en/#52-\u5982\u4f55\u521b\u5efa\u534f\u7a0b","title":"5.2 \u5982\u4f55\u521b\u5efa\u534f\u7a0b","text":"<p>5.2 How to Create a Coroutine</p> EnglishChinese"},{"location":"asyncio_en/#53-python\u4e2d\u5982\u4f55\u8fd0\u884c\u534f\u7a0b","title":"5.3 Python\u4e2d\u5982\u4f55\u8fd0\u884c\u534f\u7a0b","text":"<p>5.3 How to Run a Coroutine From Python</p> EnglishChinese"},{"location":"asyncio_en/#6-\u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","title":"6. \u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","text":"<p>6. What is the Event Loop</p> EnglishChinese"},{"location":"asyncio_en/#61-asyncio-\u7684\u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","title":"6.1 Asyncio \u7684\u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","text":"<p>6.1 What is the Asyncio Event Loop</p> EnglishChinese"},{"location":"asyncio_en/#62-\u4e8b\u4ef6\u5faa\u73af\u5982\u4f55\u83b7\u53d6\u548c\u542f\u52a8","title":"6.2 \u4e8b\u4ef6\u5faa\u73af\u5982\u4f55\u83b7\u53d6\u548c\u542f\u52a8","text":"<p>6.2 How To Start and Get An Event Loop</p> EnglishChinese"},{"location":"asyncio_en/#63-\u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u662f\u4ec0\u4e48","title":"6.3 \u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u662f\u4ec0\u4e48","text":"<p>6.3 What is an Event Loop Object</p> EnglishChinese"},{"location":"asyncio_en/#64-\u4e3a\u4ec0\u4e48\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af","title":"6.4 \u4e3a\u4ec0\u4e48\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af","text":"<p>6.4 Why Get Access to The Event Loop</p> EnglishChinese"},{"location":"asyncio_en/#7-asyncio-\u4efb\u52a1\u7684\u521b\u5efa\u548c\u8fd0\u884c","title":"7. Asyncio \u4efb\u52a1\u7684\u521b\u5efa\u548c\u8fd0\u884c","text":"<p>7. Create and Run Asyncio Tasks</p> EnglishChinese"},{"location":"asyncio_en/#71-asyncio-\u4efb\u52a1\u662f\u4ec0\u4e48","title":"7.1 Asyncio \u4efb\u52a1\u662f\u4ec0\u4e48","text":"<p>7.1 What is an Asyncio Task</p> EnglishChinese"},{"location":"asyncio_en/#72-\u600e\u4e48\u521b\u5efa\u4efb\u52a1","title":"7.2 \u600e\u4e48\u521b\u5efa\u4efb\u52a1","text":"<p>7.2 How to Create a Task</p> EnglishChinese"},{"location":"asyncio_en/#721-\u4f7f\u7528\u9ad8\u7ea7-api-\u521b\u5efa\u4efb\u52a1","title":"7.2.1 \u4f7f\u7528\u9ad8\u7ea7 API \u521b\u5efa\u4efb\u52a1","text":"<p>7.2.1 Create Task With High-Level API</p> EnglishChinese"},{"location":"asyncio_en/#722-\u4f7f\u7528\u4f4e\u7ea7-api-\u521b\u5efa\u4efb\u52a1","title":"7.2.2 \u4f7f\u7528\u4f4e\u7ea7 API \u521b\u5efa\u4efb\u52a1","text":"<p>7.2.2 Create Task With Low-Level API</p> EnglishChinese"},{"location":"asyncio_en/#73-\u4f55\u65f6\u8fd0\u884c\u4efb\u52a1","title":"7.3 \u4f55\u65f6\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>7.3 When Does a Task Run?</p> EnglishChinese"},{"location":"asyncio_en/#8-\u4f7f\u7528\u548c\u67e5\u8be2\u4efb\u52a1","title":"8. \u4f7f\u7528\u548c\u67e5\u8be2\u4efb\u52a1","text":"<p>8. Work With and Query Tasks</p> EnglishChinese"},{"location":"asyncio_en/#81-\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f","title":"8.1 \u4efb\u52a1\u7684\u751f\u547d\u5468\u671f","text":"<p>8.1 Task Life-Cycle</p> EnglishChinese"},{"location":"asyncio_en/#82-\u5982\u4f55\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001","title":"8.2 \u5982\u4f55\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001","text":"<p>8.2 How to Check Task Status</p> EnglishChinese"},{"location":"asyncio_en/#821-\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210","title":"8.2.1 \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210","text":"<p>8.2.1 Check if a Task is Done</p> EnglishChinese"},{"location":"asyncio_en/#822-\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88","title":"8.2.2 \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88","text":"<p>8.2.2 Check if a Task is Canceled</p> EnglishChinese"},{"location":"asyncio_en/#83-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c","title":"8.3 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c","text":"<p>8.3 How to Get Task Result</p> EnglishChinese"},{"location":"asyncio_en/#84-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u5f02\u5e38","title":"8.4 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u5f02\u5e38","text":"<p>8.4 How to Get Task Exception</p> EnglishChinese"},{"location":"asyncio_en/#85-\u5982\u4f55\u53d6\u6d88\u4efb\u52a1","title":"8.5 \u5982\u4f55\u53d6\u6d88\u4efb\u52a1","text":"<p>8.5 How to Cancel a Task</p> EnglishChinese"},{"location":"asyncio_en/#86-\u5982\u4f55\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\u56de\u8c03","title":"8.6 \u5982\u4f55\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\u56de\u8c03","text":"<p>8.6 How to Use Callback With a Task</p> EnglishChinese"},{"location":"asyncio_en/#87-\u5982\u4f55\u8bbe\u7f6e\u4efb\u52a1\u540d\u79f0","title":"8.7 \u5982\u4f55\u8bbe\u7f6e\u4efb\u52a1\u540d\u79f0","text":"<p>8.7 How to Set the Task Name</p> EnglishChinese"},{"location":"asyncio_en/#9-\u5f53\u524d\u548c\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1","title":"9. \u5f53\u524d\u548c\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1","text":"<p>9. Current and Running Tasks</p> EnglishChinese"},{"location":"asyncio_en/#91-\u5982\u4f55\u83b7\u53d6\u5f53\u524d\u4efb\u52a1","title":"9.1 \u5982\u4f55\u83b7\u53d6\u5f53\u524d\u4efb\u52a1","text":"<p>9.1 How to Get the Current Task</p> EnglishChinese"},{"location":"asyncio_en/#92-\u5982\u4f55\u83b7\u53d6\u6240\u6709\u4efb\u52a1","title":"9.2 \u5982\u4f55\u83b7\u53d6\u6240\u6709\u4efb\u52a1","text":"<p>9.2 How to Get All Tasks</p> EnglishChinese"},{"location":"asyncio_en/#10-\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","title":"10. \u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","text":"<p>10. Run Many Coroutines Concurrently</p> EnglishChinese"},{"location":"asyncio_en/#101-\u4ec0\u4e48\u662f-asyncio-gather","title":"10.1 \u4ec0\u4e48\u662f Asyncio Gather()","text":"<p>10.1 What is Asyncio gather()</p> EnglishChinese"},{"location":"asyncio_en/#102-\u5982\u4f55\u4f7f\u7528-asyncio-gather","title":"10.2 \u5982\u4f55\u4f7f\u7528 Asyncio Gather()","text":"<p>10.2 How to use Asyncio gather()</p> EnglishChinese"},{"location":"asyncio_en/#103-\u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u534f\u7a0b\u7684-gather-\u793a\u4f8b","title":"10.3 \u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u534f\u7a0b\u7684 Gather() \u793a\u4f8b","text":"<p>10.3 Example of gather() For Many Coroutines in a List</p> EnglishChinese"},{"location":"asyncio_en/#11-\u7b49\u5f85\u4efb\u52a1\u7684\u96c6\u5408","title":"11. \u7b49\u5f85\u4efb\u52a1\u7684\u96c6\u5408","text":"<p>11. Wait for A Collection of Tasks</p> EnglishChinese"},{"location":"asyncio_en/#111-\u4ec0\u4e48\u662f-asynciowait","title":"11.1 \u4ec0\u4e48\u662f asyncio.wait()","text":"<p>11.1 What is asyncio.wait()</p> EnglishChinese"},{"location":"asyncio_en/#112-\u5982\u4f55\u4f7f\u7528-asynciowait","title":"11.2 \u5982\u4f55\u4f7f\u7528 asyncio.wait()","text":"<p>11.2 How to Use asyncio.wait()</p> EnglishChinese"},{"location":"asyncio_en/#113-\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","title":"11.3 \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","text":"<p>11.3 Example of Waiting for All Tasks</p> EnglishChinese"},{"location":"asyncio_en/#12-\u7b49\u5f85\u6709\u65f6\u95f4\u9650\u5236\u7684\u534f\u7a0b","title":"12. \u7b49\u5f85\u6709\u65f6\u95f4\u9650\u5236\u7684\u534f\u7a0b","text":"<p>12. Wait for a Coroutine with a Time Limit</p> EnglishChinese"},{"location":"asyncio_en/#121-\u4ec0\u4e48\u662f-asyncio-wait_for","title":"12.1 \u4ec0\u4e48\u662f Asyncio wait_for()","text":"<p>12.1 What is Asyncio wait_for()</p> EnglishChinese"},{"location":"asyncio_en/#122-\u5982\u4f55\u4f7f\u7528-asyncio-wait_for","title":"12.2 \u5982\u4f55\u4f7f\u7528 Asyncio wait_for()","text":"<p>12.2 How to Use Asyncio wait_for()</p> EnglishChinese"},{"location":"asyncio_en/#123-\u5e26\u6709\u8d85\u65f6\u7684-asyncio-wait_for-\u793a\u4f8b","title":"12.3 \u5e26\u6709\u8d85\u65f6\u7684 Asyncio wait_for() \u793a\u4f8b","text":"<p>12.3 Example of Asyncio wait_for() With a Timeout</p> EnglishChinese"},{"location":"asyncio_en/#13-\u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88","title":"13. \u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88","text":"<p>13. Shield Tasks from Cancellation</p> EnglishChinese"},{"location":"asyncio_en/#131-\u4ec0\u4e48\u662f-asyncio-shield","title":"13.1 \u4ec0\u4e48\u662f Asyncio shield()","text":"<p>13.1 What is Asyncio shield()</p> EnglishChinese"},{"location":"asyncio_en/#132-\u5982\u4f55\u4f7f\u7528-asyncioshield","title":"13.2 \u5982\u4f55\u4f7f\u7528 Asyncioshield()","text":"<p>13.2 How to Use Asyncio shield()</p> EnglishChinese"},{"location":"asyncio_en/#133-\u4efb\u52a1\u7684-asyncioshield-\u793a\u4f8b","title":"13.3 \u4efb\u52a1\u7684 Asyncioshield() \u793a\u4f8b","text":"<p>13.3 Example of Asyncio shield() for a Task</p> EnglishChinese"},{"location":"asyncio_en/#14-\u5728-asyncio-\u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","title":"14. \u5728 Asyncio \u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>14. Run a Blocking Task in Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#141-\u9700\u8981\u5728-asyncio-\u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","title":"14.1 \u9700\u8981\u5728 Asyncio \u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>14.1 Need to Run Blocking Tasks in Asyncio</p> EnglishChinese"},{"location":"asyncio_en/#142-\u5982\u4f55\u8fd0\u884c\u963b\u585e\u4efb\u52a1","title":"14.2 \u5982\u4f55\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>14.2 How to Run Blocking Tasks</p> EnglishChinese"},{"location":"asyncio_en/#143-\u4f7f\u7528-to_thread-\u5728-asyncio-\u4e2d\u8fd0\u884c-io-\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u793a\u4f8b","title":"14.3 \u4f7f\u7528 to_thread() \u5728 Asyncio \u4e2d\u8fd0\u884c I/O \u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u793a\u4f8b","text":"<p>14.3 Example of Running I/O-Bound Task in Asyncio with to_thread()</p> EnglishChinese"},{"location":"asyncio_en/#15-\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15. \u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15. Asynchronous Iterators</p> EnglishChinese"},{"location":"asyncio_en/#151-\u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15.1 What Are Asynchronous Iterators</p> EnglishChinese"},{"location":"asyncio_en/#1511-\u8fed\u4ee3\u5668","title":"15.1.1 \u8fed\u4ee3\u5668","text":"<p>15.1.1 Iterators</p> EnglishChinese"},{"location":"asyncio_en/#1512-\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.1.2 \u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15.1.2 Asynchronous Iterators</p> EnglishChinese"},{"location":"asyncio_en/#152-\u4ec0\u4e48\u662fasync-for\u5faa\u73af","title":"15.2 \u4ec0\u4e48\u662f\u201casync for\u201d\u5faa\u73af\uff1f","text":"<p>15.2 What is the \u201casync for\u201d loop?</p> EnglishChinese"},{"location":"asyncio_en/#153-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.3 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15.3 How to Use Asynchronous Iterators</p> EnglishChinese"},{"location":"asyncio_en/#1531-\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.3.1 \u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15.3.1 Define an Asynchronous Iterator</p> EnglishChinese"},{"location":"asyncio_en/#1532-\u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.3.2 \u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>15.3.2 Create Asynchronous Iterator</p> EnglishChinese"},{"location":"asyncio_en/#1533-\u5355\u6b65\u6267\u884c\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.3.3 \u5355\u6b65\u6267\u884c\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>Step an Asynchronous Iterator</p> EnglishChinese"},{"location":"asyncio_en/#1534-\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668","title":"15.3.4 \u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>Traverse an Asynchronous Iterator</p> EnglishChinese"},{"location":"asyncio_en/#154-\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u793a\u4f8b","title":"15.4 \u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u793a\u4f8b","text":"<p>15.4 Example of an Asynchronous Iterator</p> EnglishChinese"},{"location":"asyncio_en/#16-\u5f02\u6b65\u751f\u6210\u5668","title":"16. \u5f02\u6b65\u751f\u6210\u5668","text":"<p>16. Asynchronous Generators</p> EnglishChinese <p>Generators are a fundamental part of Python.</p> <p>A generator is a function that has at least one \u201cyield\u201d expression. They are functions that can be suspended and resumed, just like coroutines.</p> <p>In fact, Python coroutines are an extension of Python generators.</p> <p>Asyncio allows us to develop asynchronous generators.</p> <p>We can create an asynchronous generator by defining a coroutine that makes use of the \u201cyield\u201d expression.</p> <p>Let\u2019s take a closer look.</p> <p>\u751f\u6210\u5668\u662f Python \u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002</p> <p>\u751f\u6210\u5668\u662f\u4e00\u79cd\u81f3\u5c11\u5177\u6709\u4e00\u4e2a\u201cyield\u201d\u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u3002 \u5b83\u4eec\u662f\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u51fd\u6570\uff0c\u5c31\u50cf\u534f\u7a0b\u4e00\u6837\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0cPython \u534f\u7a0b\u662f Python \u751f\u6210\u5668\u7684\u6269\u5c55\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5f00\u53d1\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4f7f\u7528\u201cyield\u201d\u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u6765\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p>"},{"location":"asyncio_en/#161-\u4ec0\u4e48\u662f\u5f02\u6b65\u751f\u6210\u5668","title":"16.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.1 What Are Asynchronous Generators</p> EnglishChinese <p>An asynchronous generator is a coroutine that uses the yield expression.</p> <p>Before we dive into the details of asynchronous generators, let\u2019s first review classical Python generators.</p> <p>\u5f02\u6b65\u751f\u6210\u5668\u662f\u4f7f\u7528yield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u3002</p> <p>\u5728\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u5f02\u6b65\u751f\u6210\u5668\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u9996\u5148\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684 Python \u751f\u6210\u5668\u3002</p>"},{"location":"asyncio_en/#1611-\u751f\u6210\u5668","title":"16.1.1 \u751f\u6210\u5668","text":"<p>16.1.1 Generators</p> EnglishChinese <p>A generator is a Python function that returns a value via a yield expression.</p> <p>For example:</p> <pre><code># define a generator\ndef generator():\n    for i in range(10):\n        yield i\n</code></pre> <p>The generator is executed to the yield expression, after which a value is returned. This suspends the generator at that point. The next time the generator is executed it is resumed from the point it was resumed and runs until the next yield expression.</p> <p>generator: A function which returns a generator iterator. It looks like a normal function except that it contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next() function.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>Technically, a generator function creates and returns a generator iterator. The generator iterator executes the content of the generator function, yielding and resuming as needed.</p> <p>generator iterator: An object created by a generator function. Each yield temporarily suspends processing, remembering the location execution state [\u2026] When the generator iterator resumes, it picks up where it left off \u2026</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A generator can be executed in steps by using the next() built-in function.</p> <p>For example:</p> <pre><code>...\n# create the generator\ngen = generator()\n# step the generator\nresult = next(gen)\n</code></pre> <p>Although, it is more common to iterate the generator to completion, such as using a for-loop or a list comprehension.</p> <p>For example:</p> <pre><code>...\n# traverse the generator and collect results\nresults = [item for item in generator()]\n</code></pre> <p>Next, let\u2019s take a closer look at asynchronous generators.</p> <p>\u751f\u6210\u5668\u662f\u4e00\u4e2aPython\u51fd\u6570\uff0c\u5b83\u901a\u8fc7yield\u8868\u8fbe\u5f0f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u751f\u6210\u5668\ndef generator():\n    for i in range(10):\n        yield i\n</code></pre> <p>\u751f\u6210\u5668\u6267\u884c\u5230yield\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u8fd9\u4f1a\u5728\u6b64\u65f6\u6682\u505c\u751f\u6210\u5668\u3002 \u4e0b\u6b21\u6267\u884c\u751f\u6210\u5668\u65f6\uff0c\u5b83\u5c06\u4ece\u6062\u590d\u70b9\u6062\u590d\u5e76\u8fd0\u884c\u5230\u4e0b\u4e00\u4e2a yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u751f\u6210\u5668: \u8fd4\u56de\u751f\u6210\u5668\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u542b\u7528\u4e8e\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u503c\u7684yield \u8868\u8fbe\u5f0f\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528 next() \u51fd\u6570\u4e00\u6b21\u68c0\u7d22\u4e00\u4e2a\u503c\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u5e76\u8fd4\u56de\u751f\u6210\u5668\u8fed\u4ee3\u5668\u3002 \u751f\u6210\u5668\u8fed\u4ee3\u5668\u6267\u884c\u751f\u6210\u5668\u51fd\u6570\u7684\u5185\u5bb9\uff0c\u6839\u636e\u9700\u8981\u4ea7\u751f\u5e76\u6062\u590d\u3002</p> <p>\u751f\u6210\u8fed\u4ee3\u5668: \u7531\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2ayield\u90fd\u4f1a\u6682\u65f6\u6302\u8d77\u5904\u7406\uff0c\u8bb0\u4f4f\u4f4d\u7f6e\u6267\u884c\u72b6\u6001[...]\u5f53\u751f\u6210\u5668\u8fed\u4ee3\u5668\u6062\u590d\u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed...</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u9010\u6b65\u6267\u884c\u751f\u6210\u5668\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u751f\u6210\u5668\ngen = generator()\n# \u751f\u6210\u5668\u7684\u4e0b\u4e00\u6b65\nresult = next(gen)\n</code></pre> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u66f4\u5e38\u89c1\u7684\u662f\u8fed\u4ee3\u751f\u6210\u5668\u4ee5\u5b8c\u6210\uff0c\u4f8b\u5982\u4f7f\u7528 for \u5faa\u73af\u6216\u5217\u8868\u7406\u89e3\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u904d\u5386\u751f\u6210\u5668\u5e76\u6536\u96c6\u7ed3\u679c\nresults = [item for item in generator()]\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5f02\u6b65\u751f\u6210\u5668\u3002</p>"},{"location":"asyncio_en/#1612-\u5f02\u6b65\u751f\u6210\u5668","title":"16.1.2 \u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.1.2 Asynchronous Generators</p> EnglishChinese <p>An asynchronous generator is a coroutine that uses the yield expression.</p> <p>Unlike a function generator, the coroutine can schedule and await other coroutines and tasks.</p> <p>asynchronous generator: A function which returns an asynchronous generator iterator. It looks like a coroutine function defined with async def except that it contains yield expressions for producing a series of values usable in an async for loop.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>Like a classical generator, an asynchronous generator function can be used to create an asynchronous generator iterator that can be traversed using the built-in anext() function, instead of the next() function.</p> <p>asynchronous generator iterator: An object created by a asynchronous generator function. This is an asynchronous iterator which when called using the anext() method returns an awaitable object which will execute the body of the asynchronous generator function until the next yield expression.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>This means that the asynchronous generator iterator implements the __anext__() method and can be used with the async for expression.</p> <p>This means that each iteration of the generator is scheduled and executed as awaitable. The \u201casync for\u201d expression will schedule and execute each iteration of the generator, suspending the calling coroutine and awaiting the result.</p> <p>You can learn more about the \u201casync for\u201d expression in the tutorial:</p> <ul> <li>Asyncio async for loop</li> </ul> <p>\u5f02\u6b65\u751f\u6210\u5668\u662f\u4f7f\u7528yield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u3002</p> <p>\u4e0e\u51fd\u6570\u751f\u6210\u5668\u4e0d\u540c\uff0c\u534f\u7a0b\u53ef\u4ee5\u8c03\u5ea6\u548c\u7b49\u5f85\u5176\u4ed6\u534f\u7a0b\u548c\u4efb\u52a1\u3002</p> <p>\u5f02\u6b65\u751f\u6210\u5668: \u8fd4\u56de\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4f7f\u7528 async def \u5b9a\u4e49\u7684\u534f\u7a0b\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u542b\u7528\u4e8e\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u5728 async for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u503c\u7684 yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u4e0e\u7ecf\u5178\u751f\u6210\u5668\u4e00\u6837\uff0c\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u53ef\u7528\u4e8e\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e anext() \u51fd\u6570\uff08\u800c\u4e0d\u662f next() \u51fd\u6570\uff09\u8fdb\u884c\u904d\u5386\u3002</p> <p>\u57fa\u4e8e\u5f02\u6b65\u751f\u6210\u5668\u7684\u8fed\u4ee3\u5668\uff1a\u7531\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u5f53\u4f7f\u7528 __anext__() \u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u6267\u884c\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u7684\u4e3b\u4f53\uff0c\u76f4\u5230\u4e0b\u4e00\u4e2a yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u8fd9\u610f\u5473\u7740\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86 __anext__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e0e async for \u8868\u8fbe\u5f0f\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u751f\u6210\u5668\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u88ab\u8c03\u5ea6\u5e76\u4f5c\u4e3a\u53ef\u7b49\u5f85\u6267\u884c\u3002 \u201casync for\u201d\u8868\u8fbe\u5f0f\u5c06\u8c03\u5ea6\u5e76\u6267\u884c\u751f\u6210\u5668\u7684\u6bcf\u6b21\u8fed\u4ee3\uff0c\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u5e76\u7b49\u5f85\u7ed3\u679c\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync for\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u7684\u5f02\u6b65 for \u5faa\u73af</li> </ul>"},{"location":"asyncio_en/#162-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","title":"16.2 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.2 How to Use an Asynchronous Generator</p> EnglishChinese <p>In this section, we will take a close look at how to define, create, step, and traverse an asynchronous generator in asyncio programs.</p> <p>Let\u2019s start with how to define an asynchronous generator.</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ed4\u7ec6\u7814\u7a76\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u3001\u521b\u5efa\u3001\u5355\u6b65\u6267\u884c\u548c\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece\u5982\u4f55\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668\u5f00\u59cb\u3002</p>"},{"location":"asyncio_en/#1621-\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668","title":"16.2.1 \u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.2.1 Define an Asynchronous Generator</p> EnglishChinese <p>We can define an asynchronous generator by defining a coroutine that has at least one yield expression.</p> <p>This means that the function is defined using the \u201casync def\u201d expression.</p> <p>For example:</p> <pre><code># define an asynchronous generator\nasync def async_generator():\n    for i in range(10)\n        yield i\n</code></pre> <p>Because the asynchronous generator is a coroutine and each iterator returns an awaitable that is scheduled and executed in the asyncio event loop, we can execute and await awaitables within the body of the generator.</p> <p>For example:</p> <pre><code># define an asynchronous generator that awaits\nasync def async_generator():\n    for i in range(10)\n        # suspend and sleep a moment\n        await asyncio.sleep(1)\n        # yield a value to the caller\n        yield i\n</code></pre> <p>Next, let\u2019s look at how we might use an asynchronous generator.</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u81f3\u5c11\u5177\u6709\u4e00\u4e2ayield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u6765\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u8be5\u51fd\u6570\u662f\u4f7f\u7528\u201casync def\u201d\u8868\u8fbe\u5f0f\u5b9a\u4e49\u7684\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\nasync def async_generator():\n    for i in range(10)\n        yield i\n</code></pre> <p>\u56e0\u4e3a\u5f02\u6b65\u751f\u6210\u5668\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8fed\u4ee3\u5668\u8fd4\u56de\u4e00\u4e2a\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8c03\u5ea6\u548c\u6267\u884c\u7684\u7b49\u5f85\u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u751f\u6210\u5668\u7684\u4e3b\u4f53\u5185\u6267\u884c\u548c\u7b49\u5f85\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u7b49\u5f85\u7684\u5f02\u6b65\u751f\u6210\u5668\nasync def async_generator():\n    for i in range(10)\n        # \u6682\u505c\u5e76\u7761\u7720\u4e00\u4f1a\u513f\n        await asyncio.sleep(1)\n        # \u5411\u8c03\u7528\u8005\u4ea7\u751f\u4e00\u4e2a\u503c\n        yield i\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u3002</p>"},{"location":"asyncio_en/#1622-\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668","title":"16.2.2 \u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.2.2 Create Asynchronous Generator</p> EnglishChinese <p>To use an asynchronous generator we must create the generator.</p> <p>This looks like calling it, but instead creates and returns an iterator object.</p> <p>For example:</p> <pre><code>...\n# create the iterator\nit = async_generator()\n</code></pre> <p>This returns a type of asynchronous iterator called an asynchronous generator iterator.</p> <p>\u8981\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u751f\u6210\u5668\u3002</p> <p>\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u8c03\u7528\u5b83\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8fed\u4ee3\u5668\nit = async_generator()\n</code></pre> <p>\u8fd9\u4f1a\u8fd4\u56de\u4e00\u79cd\u79f0\u4e3a\u5f02\u6b65\u751f\u6210\u5668\u7684\u53ef\u8fed\u4ee3\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p>"},{"location":"asyncio_en/#1623-\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","title":"16.2.3 \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.2.3 Step an Asynchronous Generator</p> EnglishChinese <p>One step of the generator can be traversed using the anext() built-in function, just like a classical generator using the next() function.</p> <p>The result is an awaitable that is awaited.</p> <p>For example:</p> <pre><code>...\n# get an awaitable for one step of the generator\nawaitable = anext(gen)\n# execute the one step of the generator and get the result\nresult = await awaitable\n</code></pre> <p>This can be achieved in one step.</p> <p>For example:</p> <pre><code>...\n# step the async generator\nresult = await anext(gen)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 anext() \u5185\u7f6e\u51fd\u6570\u904d\u5386\u751f\u6210\u5668\u7684\u4e00\u6b65\uff0c\u5c31\u50cf\u4f7f\u7528 next() \u51fd\u6570\u7684\u7ecf\u5178\u751f\u6210\u5668\u4e00\u6837 \u3002</p> <p>\u7ed3\u679c\u662f\u4e00\u4e2a\u503c\u5f97\u671f\u5f85\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u751f\u6210\u5668\u4e00\u6b65\u7684\u7b49\u5f85\u503c\nawaitable = anext(gen)\n# \u6267\u884c\u751f\u6210\u5668\u7684\u4e00\u6b65\u5e76\u5f97\u5230\u7ed3\u679c\nresult = await awaitable\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u4e00\u6b65\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u5f02\u6b65\u751f\u6210\u5668\nresult = await anext(gen)\n</code></pre>"},{"location":"asyncio_en/#1624-\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668","title":"16.2.4 \u904d\u5386\u5f02\u6b65\u751f\u6210\u5668","text":"<p>16.2.4 Traverse an Asynchronous Generator</p> EnglishChinese <p>The asynchronous generator can also be traversed in a loop using the \u201casync for\u201d expression that will await each iteration of the loop automatically.</p> <p>For example:</p> <pre><code>...\n# traverse an asynchronous generator\nasync for result in async_generator():\n    print(result)\n</code></pre> <p>You can learn more about the \u201casync for\u201d expression in the tutorial:</p> <p>We may also use an asynchronous list comprehension with the \u201casync for\u201d expression to collect the results of the generator.</p> <p>For example:</p> <pre><code>...\n# async list comprehension with async generator\nresults = [item async for item in async_generator()]\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u5728\u5faa\u73af\u4e2d\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u81ea\u52a8\u7b49\u5f85\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\nasync for result in async_generator():\n    print(result)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync for\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u5217\u8868\u7406\u89e3\u548c\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u6536\u96c6\u751f\u6210\u5668\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u7684\u5f02\u6b65\u5217\u8868\u63a8\u5bfc\u5f0f\nresults = [item async for item in async_generator()]\n</code></pre>"},{"location":"asyncio_en/#163-\u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b","title":"16.3 \u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b","text":"<p>16.3 Example of an Asynchronous Generator</p> EnglishChinese <p>We can explore how to traverse an asynchronous generator using the \u201casync for\u201d expression.</p> <p>In this example, we will update the previous example to traverse the generator to completion using an \u201casync for\u201d loop.</p> <p>This loop will automatically await each awaitable returned from the generator, retrieve the yielded value, and make it available within the loop body so that in this case it can be reported.</p> <p>This is perhaps the most common usage pattern for asynchronous generators.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of asynchronous generator with async for loop\nimport asyncio\n\n# define an asynchronous generator\nasync def async_generator():\n    # normal loop\n    for i in range(10):\n        # block to simulate doing work\n        await asyncio.sleep(1)\n        # yield the result\n        yield i\n\n# main coroutine\nasync def main():\n    # loop over async generator with async for loop\n    async for item in async_generator():\n        print(item)\n\n# execute the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and starts the for loop.</p> <p>An instance of the asynchronous generator is created and the loop automatically steps it using the anext() function to return an awaitable. The loop then awaits the awaitable and retrieves a value which is made available to the body of the loop where it is reported.</p> <p>This process is then repeated, suspending the main() coroutine, executing an iteration of the generator, and suspending, and resuming the main() coroutine until the generator is exhausted.</p> <p>This highlights how an asynchronous generator can be traversed using an async for expression.</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>You can learn more about async generators in the tutorial:</p> <ul> <li>Asynchronous Generators in Python</li> </ul> <p>Next, we will explore asynchronous context managers.</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u524d\u9762\u7684\u793a\u4f8b\uff0c\u4ee5\u4f7f\u7528\u201casync for\u201d\u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u76f4\u81f3\u5b8c\u6210\u3002</p> <p>\u8be5\u5faa\u73af\u5c06\u81ea\u52a8\u7b49\u5f85\u4ece\u751f\u6210\u5668\u8fd4\u56de\u7684\u6bcf\u4e2a\u7b49\u5f85\uff0c\u68c0\u7d22\u751f\u6210\u7684\u503c\uff0c\u5e76\u4f7f\u5176\u5728\u5faa\u73af\u4f53\u5185\u53ef\u7528\uff0c\u4ee5\u4fbf\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62a5\u544a\u5b83\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u5f02\u6b65\u751f\u6210\u5668\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u5e26\u6709 async for \u5faa\u73af\u7684\u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b\nimport asyncio\n\n# define an asynchronous generator\nasync def async_generator():\n    # \u6b63\u5e38\u5faa\u73af\n    for i in range(10):\n        # \u5757\u6765\u6a21\u62df\u505a\u5de5\u4f5c\n        await asyncio.sleep(1)\n        # \u4ea7\u751f\u7ed3\u679c\n        yield i\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u4f7f\u7528 async for \u5faa\u73af\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\n    async for item in async_generator():\n        print(item)\n\n# \u6267\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u542f\u52a8 for \u5faa\u73af\u3002</p> <p>\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u7684\u5b9e\u4f8b\uff0c\u5faa\u73af\u4f7f\u7528 anext() \u51fd\u6570\u81ea\u52a8\u6b65\u8fdb\u5b83\u4ee5\u8fd4\u56de\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u5faa\u73af\u7b49\u5f85\u53ef\u7b49\u5f85\u5bf9\u8c61\u5e76\u68c0\u7d22\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u53ef\u4f9b\u62a5\u544a\u8be5\u503c\u7684\u5faa\u73af\u4f53\u4f7f\u7528\u3002</p> <p>\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6302\u8d77 main() \u534f\u7a0b\uff0c\u6267\u884c\u751f\u6210\u5668\u7684\u8fed\u4ee3\uff0c\u6302\u8d77\u5e76\u6062\u590d main() \u534f\u7a0b\uff0c\u76f4\u5230\u751f\u6210\u5668\u8017\u5c3d\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 async for \u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u751f\u6210\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u751f\u6210\u5668</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p>"},{"location":"asyncio_en/#17-\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17. \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17. Asynchronous Context Managers</p> EnglishChinese <p>A context manager is a Python construct that provides a try-finally like environment with a consistent interface and handy syntax, e.g. via the \u201cwith\u201d expression.</p> <p>It is commonly used with resources, ensuring the resource is always closed or released after we are finished with it, regardless of whether the usage of the resources was successful or failed with an exception.</p> <p>Asyncio allows us to develop asynchronous context managers.</p> <p>We can create and use asynchronous context managers in asyncio programs by defining an object that implements the __aenter__() and __aexit__() methods as coroutines.</p> <p>Let\u2019s take a closer look.</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a Python \u7ed3\u6784\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3c try-finally \u7684\u73af\u5883\uff0c\u5177\u6709\u4e00\u81f4\u7684\u63a5\u53e3\u548c\u65b9\u4fbf\u7684\u8bed\u6cd5\uff0c\u4f8b\u5982 \u901a\u8fc7\u201cwith\u201d\u8868\u8fbe\u3002</p> <p>\u5b83\u901a\u5e38\u4e0e\u8d44\u6e90\u4e00\u8d77\u4f7f\u7528\uff0c\u786e\u4fdd\u8d44\u6e90\u5728\u4f7f\u7528\u5b8c\u6bd5\u540e\u59cb\u7ec8\u5173\u95ed\u6216\u91ca\u653e\uff0c\u65e0\u8bba\u8d44\u6e90\u7684\u4f7f\u7528\u662f\u5426\u6210\u529f\u6216\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5f00\u53d1\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u4f5c\u4e3a\u534f\u7a0b\u6765\u5728 asyncio \u7a0b\u5e8f\u4e2d\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p>"},{"location":"asyncio_en/#171-\u4ec0\u4e48\u662f\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.1 What is an Asynchronous Context Manager</p> EnglishChinese <p>An asynchronous context manager is a Python object that implements the __aenter__() and __aexit_ _() methods.</p> <p>Before we dive into the details of asynchronous context managers, let\u2019s review classical context managers.</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u5728\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p>"},{"location":"asyncio_en/#1711--\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.1.1  \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.1.1  Context Manager</p> EnglishChinese <p>A context manager is a Python object that implements the __enter__() and __exit__() methods.</p> <p>A context manager is an object that defines the runtime context to be established when executing a with statement. The context manager handles the entry into, and the exit from, the desired runtime context for the execution of the block of code.</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <ul> <li>The __enter__() method defines what happens at the beginning of a block, such as opening or preparing resources, like a file, socket or thread pool.</li> <li>The __exit__() method defines what happens when the block is exited, such as closing a prepared resource.</li> </ul> <p>Typical uses of context managers include saving and restoring various kinds of global state, locking and unlocking resources, closing opened files, etc.</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <p>A context manager is used via the \u201cwith\u201d expression.</p> <p>Typically the context manager object is created in the beginning of the \u201cwith\u201d expression and the __enter__() method is called automatically. The body of the content makes use of the resource via the named context manager object, then the __aexit__() method is called automatically when the block is exited, normally or via an exception.</p> <p>For example:</p> <pre><code>...\n# open a context manager\nwith ContextManager() as manager:\n    # ...\n# closed automatically\nThis mirrors a try-finally expression.\n</code></pre> <p>For example:</p> <pre><code>...\n# create the object\nmanager = ContextManager()\ntry:\n    manager.__enter__()\n    # ...\nfinally:\n    manager.__exit__()\n</code></pre> <p>Next, let\u2019s take a look at asynchronous context managers.</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0 __enter__() \u548c __exit__() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5b9a\u4e49\u6267\u884c with \u8bed\u53e5\u65f6\u8981\u5efa\u7acb\u7684\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5904\u7406\u6267\u884c\u4ee3\u7801\u5757\u6240\u9700\u7684\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u7684\u8fdb\u5165\u548c\u9000\u51fa\u3002</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <ul> <li>__enter__() \u65b9\u6cd5\u5b9a\u4e49\u5728\u5757\u5f00\u59cb\u65f6\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u6253\u5f00\u6216\u51c6\u5907\u8d44\u6e90\uff0c\u5982\u6587\u4ef6\u3001\u5957\u63a5\u5b57\u6216\u7ebf\u7a0b\u6c60\u3002</li> <li>__exit__() \u65b9\u6cd5\u5b9a\u4e49\u9000\u51fa\u5757\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f8b\u5982\u5173\u95ed\u51c6\u5907\u597d\u7684\u8d44\u6e90\u3002</li> </ul> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5178\u578b\u7528\u9014\u5305\u62ec\u4fdd\u5b58\u548c\u6062\u590d\u5404\u79cd\u5168\u5c40\u72b6\u6001\u3001\u9501\u5b9a\u548c\u89e3\u9501\u8d44\u6e90\u3001\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u7b49\u3002</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u901a\u8fc7\u201cwith\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u3002</p> <p>\u901a\u5e38\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u662f\u5728\u201cwith\u201d\u8868\u8fbe\u5f0f\u7684\u5f00\u5934\u521b\u5efa\u7684\uff0c\u5e76\u4e14\u81ea\u52a8\u8c03\u7528 __enter__() \u65b9\u6cd5\u3002 \u5185\u5bb9\u7684\u4e3b\u4f53\u901a\u8fc7\u6307\u5b9a\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u4f7f\u7528\u8d44\u6e90\uff0c\u7136\u540e\u5f53\u5757\u6b63\u5e38\u6216\u901a\u8fc7\u5f02\u5e38\u9000\u51fa\u65f6\uff0c\u81ea\u52a8\u8c03\u7528 __aexit__() \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nwith ContextManager() as manager:\n    # ...\n# \u81ea\u52a8\u5173\u95ed\nThis mirrors a try-finally expression.\n</code></pre> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5bf9\u8c61\nmanager = ContextManager()\ntry:\n    manager.__enter__()\n    # ...\nfinally:\n    manager.__exit__()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p>"},{"location":"asyncio_en/#1712-\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.1.2 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.1.2  Asynchronous Context Manager</p> EnglishChinese <p>Asynchronous context managers were introduced in \u201cPEP 492 \u2013 Coroutines with async and await syntax\u201c.</p> <p>They provide a context manager that can be suspended when entering and exiting.</p> <p>An asynchronous context manager is a context manager that is able to suspend execution in its __aenter__ and __aexit__ methods.</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS</p> <p>The __aenter__ and __aexit__ methods are defined as coroutines and are awaited by the caller.</p> <p>This is achieved using the \u201casync with\u201d expression.</p> <p>You can learn more about the \u201casync with\u201d expression in the tutorial:</p> <ul> <li>What is Asyncio async with</li> </ul> <p>As such, asynchronous context managers can only be used within asyncio programs, such as within calling coroutines.</p> <p>What is \u201casync with\u201d</p> <p>The \u201casync with\u201d expression is for creating and using asynchronous context managers.</p> <p>It is an extension of the \u201cwith\u201d expression for use in coroutines within asyncio programs.</p> <p>The \u201casync with\u201d expression is just like the \u201cwith\u201d expression used for context managers, except it allows asynchronous context managers to be used within coroutines.</p> <p>In order to better understand \u201casync with\u201c, let\u2019s take a closer look at asynchronous context managers.</p> <p>The async with expression allows a coroutine to create and use an asynchronous version of a context manager.</p> <p>For example:</p> <pre><code>...\n# create and use an asynchronous context manager\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>This is equivalent to something like:</p> <pre><code>...\n# create or enter the async context manager\nmanager = await AsyncContextManager()\ntry:\n    # ...\nfinally:\n    # close or exit the context manager\n    await manager.close()\n</code></pre> <p>Notice that we are implementing much the same pattern as a traditional context manager, except that creating and closing the context manager involve awaiting coroutines.</p> <p>This suspends the execution of the current coroutine, schedules a new coroutine and waits for it to complete.</p> <p>As such an asynchronous context manager must implement the __aenter__() and __aexit__() methods that must be defined via the async def expression. This makes them coroutines themselves which may also await.</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5728\u201cPEP 492 \u2013 \u5177\u6709\u5f02\u6b65\u548c\u7b49\u5f85\u8bed\u6cd5\u7684\u534f\u7a0b\u201d\u4e2d\u5f15\u5165\u3002</p> <p>\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5728\u8fdb\u5165\u548c\u9000\u51fa\u65f6\u6682\u505c\u3002</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u80fd\u591f\u5728\u5176 __aenter__ \u548c __aexit__ \u65b9\u6cd5\u4e2d\u6682\u505c\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS</p> <p>__aenter__ \u548c __aexit__ \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u534f\u7a0b\u5e76\u7531\u8c03\u7528\u8005\u7b49\u5f85\u3002</p> <p>\u8fd9\u662f\u4f7f\u7528\u201casync with\u201d\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync with\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u5f02\u6b65\u662f\u4ec0\u4e48</li> </ul> <p>\u56e0\u6b64\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u53ea\u80fd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728\u8c03\u7528\u534f\u7a0b\u4e2d\u3002</p> <p>\u4ec0\u4e48\u662f\u201c\u5f02\u6b65\u201d</p> <p>\u201casync with\u201d\u8868\u8fbe\u5f0f\u7528\u4e8e\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5b83\u662f\u201cwith\u201d\u8868\u8fbe\u5f0f\u7684\u6269\u5c55\uff0c\u7528\u4e8e asyncio \u7a0b\u5e8f\u4e2d\u7684\u534f\u7a0b\u3002</p> <p>\u201casync with\u201d\u8868\u8fbe\u5f0f\u5c31\u50cf\u7528\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u201cwith\u201d\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5141\u8bb8\u5728\u534f\u7a0b\u4e2d\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u201casync with\u201d\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>async with \u8868\u8fbe\u5f0f\u5141\u8bb8\u534f\u7a0b\u521b\u5efa\u548c\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5f02\u6b65\u7248\u672c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5e76\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>\u8fd9\u76f8\u5f53\u4e8e\uff1a</p> <pre><code>...\n# \u521b\u5efa\u6216\u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nmanager = await AsyncContextManager()\ntry:\n    # ...\nfinally:\n    # \u5173\u95ed\u6216\u9000\u51fa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    await manager.close()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5b9e\u73b0\u7684\u6a21\u5f0f\u4e0e\u4f20\u7edf\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51e0\u4e4e\u76f8\u540c\uff0c\u53ea\u662f\u521b\u5efa\u548c\u5173\u95ed\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6d89\u53ca\u7b49\u5f85\u534f\u7a0b\u3002</p> <p>\u8fd9\u4f1a\u6682\u505c\u5f53\u524d\u534f\u7a0b\u7684\u6267\u884c\uff0c\u5b89\u6392\u4e00\u4e2a\u65b0\u7684\u534f\u7a0b\u5e76\u7b49\u5f85\u5176\u5b8c\u6210\u3002</p> <p>\u56e0\u6b64\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5fc5\u987b\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7 async def \u8868\u8fbe\u5f0f\u5b9a\u4e49\u3002 \u8fd9\u4f7f\u5f97\u5b83\u4eec\u672c\u8eab\u6210\u4e3a\u534f\u7a0b\uff0c\u4e5f\u53ef\u80fd\u7b49\u5f85\u3002</p>"},{"location":"asyncio_en/#172-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.2 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.2 How to Use Asynchronous Context Managers</p> EnglishChinese <p>In this section, we will explore how we can define, create, and use asynchronous context managers in our asyncio programs.</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p>"},{"location":"asyncio_en/#1721-\u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.2.1 \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.2.1 Define an Asynchronous Context Manager</p> EnglishChinese <p>We can define an asynchronous context manager as a Python object that implements the aenter() and aexit() methods.</p> <p>Importantly, both methods must be defined as coroutines using the \u201casync def\u201d and therefore must return awaitables.</p> <p>For example:</p> <pre><code># define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n</code></pre> <p>Because each of the methods are coroutines, they may themselves await coroutines or tasks.</p> <p>For example:</p> <pre><code># define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9a\u4e49\u4e3a\u5b9e\u73b0 aenter() \u548c aexit() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u5fc5\u987b\u4f7f\u7528\u201casync def\u201d\u5b9a\u4e49\u4e3a\u534f\u7a0b\uff0c\u56e0\u6b64\u5fc5\u987b\u8fd4\u56de\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n</code></pre> <p>\u56e0\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u662f\u534f\u7a0b\uff0c\u6240\u4ee5\u5b83\u4eec\u672c\u8eab\u53ef\u80fd\u7b49\u5f85\u534f\u7a0b\u6216\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"asyncio_en/#1722-\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"17.2.2 \u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>17.2.2 Use an Asynchronous Context Manager</p> EnglishChinese <p>An asynchronous context manager is used via the \u201casync with\u201d expression.</p> <p>This will automatically await the enter and exit coroutines, suspending the calling coroutine as needed.</p> <p>For example:</p> <pre><code>...\n# use an asynchronous context manager\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>As such, the \u201casync with\u201d expression and asynchronous context managers more generally can only be used within asyncio programs, such as within coroutines.</p> <p>Now that we know how to use asynchronous context managers, let\u2019s look at a worked example.</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u901a\u8fc7\u201casync with\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u3002</p> <p>\u8fd9\u5c06\u81ea\u52a8\u7b49\u5f85\u8fdb\u5165\u548c\u9000\u51fa\u534f\u7a0b\uff0c\u5e76\u6839\u636e\u9700\u8981\u6682\u505c\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>\u56e0\u6b64\uff0c\u201casync with\u201d\u8868\u8fbe\u5f0f\u548c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u66f4\u4e00\u822c\u5730\u53ea\u80fd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728\u534f\u7a0b\u4e2d\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u6709\u6548\u7684\u793a\u4f8b\u3002</p>"},{"location":"asyncio_en/#173-\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u548casync-with\u7684\u793a\u4f8b","title":"17.3 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u548c\u201casync with\u201d\u7684\u793a\u4f8b","text":"<p>17.3 Example of an Asynchronous Context Manager and \u201casync with\u201d</p> EnglishChinese <p>We can explore how to use an asynchronous context manager via the \u201casync with\u201d expression.</p> <p>In this example, we will update the above example to use the context manager in a normal manner.</p> <p>We will use an \u201casync with\u201d expression and on one line, create and enter the context manager. This will automatically await the enter method.</p> <p>We can then make use of the manager within the inner block. In this case, we will just report a message.</p> <p>Exiting the inner block will automatically await the exit method of the context manager.</p> <p>Contrasting this example with the previous example shows how much heavy lifting the \u201casync with\u201d expression does for us in an asyncio program.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of an asynchronous context manager via async with\nimport asyncio\n\n# define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n# define a simple coroutine\nasync def custom_coroutine():\n    # create and use the asynchronous context manager\n    async with AsyncContextManager() as manager:\n        # report the result\n        print(f'within the manager')\n\n# start the asyncio program\nasyncio.run(custom_coroutine())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and creates an instance of our AsyncContextManager class in an \u201casync with\u201d expression.</p> <p>This expression automatically calls the enter method and awaits the coroutine. A message is reported and the coroutine blocks for a moment.</p> <p>The main() coroutine resumes and executes the body of the context manager, printing a message.</p> <p>The block is exited and the exit method of the context manager is awaited automatically, reporting a message and sleeping a moment.</p> <p>This highlights the normal usage pattern for an asynchronous context manager in an asyncio program.</p> <pre><code>&gt;entering the context manager\nwithin the manager\n&gt;exiting the context manager\n</code></pre> <p>You can learn more about async context managers in the tutorial:</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul> <p>Next, we will explore asynchronous comprehensions.</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u201casync with\u201d\u8868\u8fbe\u5f0f\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u4e0a\u9762\u7684\u793a\u4f8b\u4ee5\u6b63\u5e38\u65b9\u5f0f\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u201casync with\u201d\u8868\u8fbe\u5f0f\uff0c\u5e76\u5728\u4e00\u884c\u4e2d\u521b\u5efa\u5e76\u8f93\u5165\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u8fd9\u5c06\u81ea\u52a8\u7b49\u5f85\u8f93\u5165\u65b9\u6cd5\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u5185\u90e8\u5757\u4e2d\u4f7f\u7528\u7ba1\u7406\u5668\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u4f1a\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u9000\u51fa\u5185\u90e8\u5757\u5c06\u81ea\u52a8\u7b49\u5f85\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u9000\u51fa\u65b9\u6cd5\u3002</p> <p>\u5c06\u6b64\u793a\u4f8b\u4e0e\u524d\u9762\u7684\u793a\u4f8b\u8fdb\u884c\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u770b\u51fa\u201casync with\u201d\u8868\u8fbe\u5f0f\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4e3a\u6211\u4eec\u5e26\u6765\u4e86\u591a\u5927\u7684\u8d1f\u62c5\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u901a\u8fc7 async with \u5b9e\u73b0\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u793a\u4f8b\nimport asyncio\n\n# \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n# \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u534f\u7a0b\nasync def custom_coroutine():\n    # \u521b\u5efa\u5e76\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async with AsyncContextManager() as manager:\n        # \u62a5\u544a\u7ed3\u679c\n        print(f'within the manager')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(custom_coroutine())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u5728\u201casync with\u201d\u8868\u8fbe\u5f0f\u4e2d\u521b\u5efa AsyncContextManager \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u8be5\u8868\u8fbe\u5f0f\u81ea\u52a8\u8c03\u7528 Enter \u65b9\u6cd5\u5e76\u7b49\u5f85\u534f\u7a0b\u3002 \u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u534f\u7a0b\u963b\u585e\u7247\u523b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u6267\u884c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4e3b\u4f53\uff0c\u6253\u5370\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u8be5\u5757\u9000\u51fa\u5e76\u81ea\u52a8\u7b49\u5f85\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u9000\u51fa\u65b9\u6cd5\uff0c\u62a5\u544a\u6d88\u606f\u5e76\u4f11\u7720\u4e00\u4f1a\u513f\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86 asyncio \u7a0b\u5e8f\u4e2d\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u6b63\u5e38\u4f7f\u7528\u6a21\u5f0f\u3002</p> <pre><code>&gt;entering the context manager\nwithin the manager\n&gt;exiting the context manager\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5f02\u6b65\u63a8\u5bfc\u5f0f\u3002</p>"},{"location":"asyncio_en/#18-\u5f02\u6b65\u63a8\u5bfc\u5f0f","title":"18. \u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>18. Asynchronous Comprehensions</p> EnglishChinese <p>Comprehensions, like list and dict comprehensions are one feature of Python when we think of \u201cpythonic\u201c.</p> <p>It is a way we do loops that is different to many other languages.</p> <p>Asyncio allows us to use asynchronous comprehensions.</p> <p>We can traverse an asynchronous generators and asynchronous iterators using an asynchronous comprehension via the \u201casync for\u201d expression.</p> <p>Let\u2019s take a closer look.</p> <p>\u5f53\u6211\u4eec\u60f3\u5230\u201cPythonic\u201d\u65f6\uff0c\u63a8\u5bfc\u5f0f\uff08\u4f8b\u5982\u5217\u8868\u63a8\u5bfc\u5f0f\u548c\u5b57\u5178\u63a8\u5bfc\u5f0f\uff09\u662f Python \u7684\u7279\u5f81\u4e4b\u4e00\u3002</p> <p>\u8fd9\u662f\u6211\u4eec\u6267\u884c\u5faa\u73af\u7684\u4e00\u79cd\u4e0e\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u65b9\u5f0f\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5f02\u6b65\u63a8\u5bfc\u5f0f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u201casync for\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u5f02\u6b65\u63a8\u5bfc\u5f0f\u6765\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u548c\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p>"},{"location":"asyncio_en/#181-\u4ec0\u4e48\u662f\u5f02\u6b65\u63a8\u5bfc\u5f0f","title":"18.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>18.1 What are Asynchronous Comprehensions</p> EnglishChinese <p>An async comprehension is an asynchronous version of a classical comprehension.</p> <p>Asyncio supports two types of asynchronous comprehensions, they are the \u201casync for\u201d comprehension and the \u201cawait\u201d comprehension.</p> <p>PEP 530 adds support for using async for in list, set, dict comprehensions and generator expressions</p> <p>\u2014 PEP 530: ASYNCHRONOUS COMPREHENSIONS, WHAT\u2019S NEW IN PYTHON 3.6.</p> <p>Before we look at each, let\u2019s first recall classical comprehensions.</p> <p>\u5f02\u6b65\u63a8\u5bfc\u5f0f\u662f\u7ecf\u5178\u63a8\u5bfc\u5f0f\u7684\u5f02\u6b65\u7248\u672c\u3002</p> <p>Asyncio \u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u5f02\u6b65\u63a8\u5bfc\u5f0f\uff0c\u5b83\u4eec\u662f\u201casync for\u201d\u63a8\u5bfc\u548c\u201cawait\u201d\u63a8\u5bfc\u3002</p> <p>PEP 530 \u6dfb\u52a0\u4e86\u5bf9\u5728 \u5217\u8868\u3001\u96c6\u5408\u3001\u5b57\u5178\u63a8\u5bfc\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4f7f\u7528\u5f02\u6b65\u7684\u652f\u6301</p> <p>\u2014 PEP 530: ASYNCHRONOUS COMPREHENSIONS, WHAT\u2019S NEW IN PYTHON 3.6.</p> <p>\u5728\u6211\u4eec\u8ba8\u8bba\u6bcf\u4e00\u4e2a\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u9996\u5148\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684\u63a8\u5bfc\u5f0f\u3002</p>"},{"location":"asyncio_en/#182-\u63a8\u5bfc\u5f0f","title":"18.2 \u63a8\u5bfc\u5f0f","text":"<p>18.2 Comprehensions</p> EnglishChinese <p>Comprehensions allow data collections like lists, dicts, and sets to be created in a concise way.</p> <p>List comprehensions provide a concise way to create lists.</p> <p>\u2014 LIST COMPREHENSIONS</p> <p>A list comprehension allows a list to be created from a for expression within the new list expression.</p> <p>For example:</p> <pre><code>...\n# create a list using a list comprehension\nresult = [a*2 for a in range(100)]\n</code></pre> <p>Comprehensions are also supported for creating dicts and sets.</p> <p>For example:</p> <pre><code>...\n# create a dict using a comprehension\nresult = {a:i for a,i in zip(['a','b','c'],range(3))}\n# create a set using a comprehension\nresult = {a for a in [1, 2, 3, 2, 3, 1, 5, 4]}\n</code></pre> <p>\u63a8\u5bfc\u5f0f\u5141\u8bb8\u4ee5\u7b80\u6d01\u7684\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u3001\u5b57\u5178\u548c\u96c6\u5408\u7b49\u6570\u636e\u96c6\u5408\u3002</p> <p>\u5217\u8868\u63a8\u5bfc\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u521b\u5efa\u5217\u8868\u7684\u7b80\u6d01\u65b9\u6cd5\u3002</p> <p>\u2014 LIST COMPREHENSIONS</p> <p>\u5217\u8868\u63a8\u5bfc\u5f0f\u5141\u8bb8\u4ece\u65b0\u5217\u8868\u8868\u8fbe\u5f0f\u4e2d\u7684 for \u8868\u8fbe\u5f0f\u521b\u5efa\u5217\u8868\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5217\u8868\u7406\u89e3\u521b\u5efa\u5217\u8868\nresult = [a*2 for a in range(100)]\n</code></pre> <p>\u8fd8\u652f\u6301\u521b\u5efa\u5b57\u5178\u548c\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u7406\u89e3\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\nresult = {a:i for a,i in zip(['a','b','c'],range(3))}\n# \u4f7f\u7528\u63a8\u5bfc\u5f0f\u521b\u5efa\u4e00\u4e2a\u96c6\u5408\nresult = {a for a in [1, 2, 3, 2, 3, 1, 5, 4]}\n</code></pre>"},{"location":"asyncio_en/#183-\u5f02\u6b65\u63a8\u5bfc\u5f0f","title":"18.3 \u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>18.3 Asynchronous Comprehensions</p> EnglishChinese <p>An asynchronous comprehension allows a list, set, or dict to be created using the \u201casync for\u201d expression with an asynchronous iterable.</p> <p>We propose to allow using async for inside list, set and dict comprehensions.</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>For example:</p> <pre><code>...\n# async list comprehension with an async iterator\nresult = [a async for a in aiterable]\n</code></pre> <p>This will create and schedule coroutines or tasks as needed and yield their results into a list.</p> <p>Recall that the \u201casync for\u201d expression may only be used within coroutines and tasks.</p> <p>Also, recall that an asynchronous iterator is an iterator that yields awaitables.</p> <p>The \u201casync for\u201d expression allows the caller to traverse an asynchronous iterator of awaitables and retrieve the result from each.</p> <p>Internally, the async for loop will automatically resolve or await each awaitable, scheduling coroutines as needed.</p> <p>An async generator automatically implements the methods for the async iterator and may also be used in an asynchronous comprehension.</p> <p>For example:</p> <pre><code>...\n# async list comprehension with an async generator\nresult = [a async for a in agenerator]\n</code></pre> <p>\u5f02\u6b65\u7406\u89e3\u5141\u8bb8\u4f7f\u7528\u5e26\u6709\u5f02\u6b65\u8fed\u4ee3\u7684\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u521b\u5efa\u5217\u8868\u3001\u96c6\u5408\u6216\u5b57\u5178\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u5141\u8bb8\u5bf9\u5185\u90e8\u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u7406\u89e3\u4f7f\u7528\u5f02\u6b65\u3002</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u5f02\u6b65\u5217\u8868\u7406\u89e3\nresult = [a async for a in aiterable]\n</code></pre> <p>\u8fd9\u5c06\u6839\u636e\u9700\u8981\u521b\u5efa\u548c\u8c03\u5ea6\u534f\u7a0b\u6216\u4efb\u52a1\uff0c\u5e76\u5c06\u5176\u7ed3\u679c\u751f\u6210\u5230\u5217\u8868\u4e2d\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u201casync for\u201d\u8868\u8fbe\u5f0f\u53ea\u80fd\u5728\u534f\u7a0b\u548c\u4efb\u52a1\u4e2d\u4f7f\u7528\u3002</p> <p>\u53e6\u5916\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4ea7\u751f\u53ef\u7b49\u5f85\u9879\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u201casync for\u201d\u8868\u8fbe\u5f0f\u5141\u8bb8\u8c03\u7528\u8005\u904d\u5386\u53ef\u7b49\u5f85\u9879\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u5e76\u4ece\u6bcf\u4e2a\u8fed\u4ee3\u5668\u4e2d\u68c0\u7d22\u7ed3\u679c\u3002</p> <p>\u5728\u5185\u90e8\uff0casync for \u5faa\u73af\u5c06\u81ea\u52a8\u89e3\u6790\u6216\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u7684\u3001\u6839\u636e\u9700\u8981\u8c03\u5ea6\u534f\u7a0b\u3002</p> <p>\u5f02\u6b65\u751f\u6210\u5668\u81ea\u52a8\u5b9e\u73b0\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u63a8\u5bfc\u5f0f\u4e2d\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u7684\u5f02\u6b65\u5217\u8868\u63a8\u5bfc\u5f0f\nresult = [a async for a in agenerator]\n</code></pre>"},{"location":"asyncio_en/#184-await-\u63a8\u5bfc\u5f0f","title":"18.4 Await \u63a8\u5bfc\u5f0f","text":"<p>18.4 Await Comprehensions</p> EnglishChinese <p>The \u201cawait\u201d expression may also be used within a list, set, or dict comprehension, referred to as an await comprehension.</p> <p>We propose to allow the use of await expressions in both asynchronous and synchronous comprehensions</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>Like an async comprehension, it may only be used within an asyncio coroutine or task.</p> <p>This allows a data structure, like a list, to be created by suspending and awaiting a series of awaitables.</p> <p>For example:</p> <pre><code>...\n# await list compression with a collection of awaitables\nresults = [await a for a in awaitables]\n</code></pre> <p>This will create a list of results by awaiting each awaitable in turn.</p> <p>The current coroutine will be suspended to execute awaitables sequentially, which is different and perhaps slower than executing them concurrently using asyncio.gather().</p> <p>You can learn more about async comprehensions in the tutorial:</p> <ul> <li>Asynchronous Comprehensions in Python</li> </ul> <p>Next, we will explore how to run commands using subprocesses from asyncio.</p> <p>\u201cawait\u201d \u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u5728\u5217\u8868\u3001\u96c6\u5408\u6216\u5b57\u5178\u7406\u89e3\u4e2d\u4f7f\u7528\uff0c\u79f0\u4e3aawait \u63a8\u5bfc\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u5728\u5f02\u6b65\u548c\u540c\u6b65\u4e2d\u90fd\u4f7f\u7528await\u63a8\u5bfc\u6216\u5217\u8868\u63a8\u5bfc</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>\u4e0e\u5f02\u6b65\u7406\u89e3\u4e00\u6837\uff0c\u5b83\u53ea\u80fd\u5728\u5f02\u6b65\u534f\u7a0b\u6216\u4efb\u52a1\u4e2d\u4f7f\u7528\u3002</p> <p>\u8fd9\u5141\u8bb8\u901a\u8fc7\u6302\u8d77\u548c\u7b49\u5f85\u4e00\u7cfb\u5217\u53ef\u7b49\u5f85\u9879\u6765\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u5217\u8868\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u53ef\u7b49\u5f85\u5bf9\u8c61\u5408\u96c6\u4e2d\u4f7f\u7528await\u5217\u8868\u63a8\u5bfc\nresults = [await a for a in awaitables]\n</code></pre> <p>\u8fd9\u5c06\u901a\u8fc7\u4f9d\u6b21\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u9879\u6765\u521b\u5efa\u7ed3\u679c\u5217\u8868\u3002</p> <p>\u5f53\u524d\u534f\u7a0b\u5c06\u88ab\u6302\u8d77\u4ee5\u987a\u5e8f\u6267\u884c\u53ef\u7b49\u5f85\u9879\uff0c\u8fd9\u4e0e\u4f7f\u7528 asyncio.gather() \u5e76\u53d1\u6267\u884c\u5b83\u4eec\u4e0d\u540c\uff0c\u5e76\u4e14\u53ef\u80fd\u66f4\u6162\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u63a8\u5bfc\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u63a8\u5bfc\u5f0f</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 asyncio \u4e2d\u7684\u5b50\u8fdb\u7a0b\u6765\u8fd0\u884c\u547d\u4ee4\u3002</p>"},{"location":"asyncio_en/#19-\u5728\u975e\u963b\u585e\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4","title":"19. \u5728\u975e\u963b\u585e\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4","text":"<p>19. Run Commands in Non-Blocking Subprocesses</p> EnglishChinese <p>We can execute commands from asyncio.</p> <p>The command will run in a subprocess that we can write to and read from using non-blocking I/O.</p> <p>Let\u2019s take a closer look.</p> <p>We can execute commands from asyncio.</p> <p>The command will run in a subprocess that we can write to and read from using non-blocking I/O.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio_en/#191-\u4ec0\u4e48\u662f-asynciosubprocessprocess","title":"19.1 \u4ec0\u4e48\u662f asyncio.subprocess.Process","text":"<p>19.1 What is asyncio.subprocess.Process</p> EnglishChinese <p>The asyncio.subprocess.Process class provides a representation of a subprocess run by asyncio.</p> <p>It provides a handle on a subprocess in asyncio programs, allowing actions to be performed on it, such as waiting and terminating it.</p> <p>Process is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>The API is very similar to the multiprocessing.Process class and perhaps more so with the subprocess.Popen class.</p> <p>Specifically, it shares methods such as wait(), communicate(), and send_signal() and attributes such as stdin, stdout, and stderr with the subprocess.Popen.</p> <p>Now that we know what the asyncio.subprocess.Process class is, let\u2019s look at how we might use it in our asyncio programs.</p> <p>We do not create a asyncio.subprocess.Process directly.</p> <p>Instead, an instance of the class is created for us when executing a subprocess in an asyncio program.</p> <p>An object that wraps OS processes created by the create_subprocess_exec() and create_subprocess_shell() functions.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>There are two ways to execute an external program as a subprocess and acquire a Process instance, they are:</p> <ul> <li>asyncio.create_subprocess_exec() for running commands directly.</li> <li>asyncio.create_subprocess_shell() for running commands via the shell.</li> </ul> <p>Let\u2019s look at examples of each in turn.</p> <p>asyncio\u901a\u8fc7asyncio.subprocess.Process \u7c7b\u63d0\u4f9b\u4e86\u5bf9\u4e8e\u8fd0\u884c\u5b50\u8fdb\u7a0b\u7684\u652f\u6301\u548c\u8868\u793a\u3002</p> <p>\u5b83\u63d0\u4f9b\u4e86 asyncio \u7a0b\u5e8f\u4e2d\u5b50\u8fdb\u7a0b\u7684\u53e5\u67c4\uff0c\u5141\u8bb8\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\u7b49\u5f85\u548c\u7ec8\u6b62\u5b83\u3002</p> <p>Process\u662f\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u8fc7\u540e\u7684\u7c7b\uff0c\u5141\u8bb8\u4e0e\u5b50\u8fdb\u7a0b\u901a\u4fe1\u5e76\u76d1\u89c6\u5176\u5b8c\u6210\u60c5\u51b5\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>\u8be5 API \u4e0e multiprocessing.Process \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u4e5f\u8bb8\u4e0e subprocess.Popen \u7c7b\u66f4\u65b0\u76f8\u4f3c\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u4e0e subprocess.Popen \u5171\u4eab wait()\u3001communicate() \u548c send_signal() \u7b49\u65b9\u6cd5\u4ee5\u53ca <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u7b49\u5c5e\u6027\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.subprocess.Process \u7c7b\u662f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>\u6211\u4eec\u4e0d\u76f4\u63a5\u521b\u5efa asyncio.subprocess.Process\u3002</p> <p>\u76f8\u53cd\uff0c\u5f53\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u5b50\u8fdb\u7a0b\u65f6\uff0c\u4f1a\u4e3a\u6211\u4eec\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u5305\u88c5\u7531 create_subprocess_exec() \u548c create_subprocess_shell() \u51fd\u6570\u521b\u5efa\u7684\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u7684\u5bf9\u8c61\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5916\u90e8\u7a0b\u5e8f\u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c\u5e76\u83b7\u53d6 Process \u5b9e\u4f8b\uff0c\u5b83\u4eec\u662f\uff1a</p> <ul> <li>asyncio.create_subprocess_exec() \u7528\u4e8e\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4\u3002</li> <li>asyncio.create_subprocess_shell() \u7528\u4e8e\u901a\u8fc7 shell \u8fd0\u884c\u547d\u4ee4\u3002</li> </ul> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u770b\u4e00\u4e0b\u6bcf\u4e2a\u4f8b\u5b50\u3002</p>"},{"location":"asyncio_en/#192-\u5982\u4f55\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4","title":"19.2 \u5982\u4f55\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4","text":"<p>19.2 How to Run a Command Directly</p> EnglishChinese <p>A command is a program executed on the command line (terminal or command prompt). It is another program that is run directly.</p> <p>Common examples on Linux and macOS might be:</p> <ul> <li>\u2018ls\u2018 to list the contents of a directory</li> <li>\u2018cat\u2018 to report the content of a file</li> <li>\u2018date\u2018 to report the date</li> <li>\u2018echo\u2018 to report back a string</li> <li>\u2018sleep\u2018 to sleep for a number of seconds</li> </ul> <p>And so on.</p> <p>We can execute a command from an asyncio program via the create_subprocess_exec() function.</p> <p>The asyncio.create_subprocess_exec() function takes a command and executes it directly.</p> <p>This is helpful as it allows the command to be executed in a subprocess and for asyncio coroutines to read, write, and wait for it.</p> <p>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>Unlike the asyncio.create_subprocess_shell() function, the asyncio.create_subprocess_exec() will not execute the command using the shell.</p> <p>This means that the capabilities provided by the shell, such as shell variables, scripting, and wildcards are not available when executing the command.</p> <p>It also means that executing the command may be more secure as there is no opportunity for a shell injection.</p> <p>Now that we know what asyncio.create_subprocess_exec() does, let\u2019s look at how to use it.</p> <p>command \u662f\u5728\u547d\u4ee4\u884c\uff08\u7ec8\u7aef\u6216\u547d\u4ee4\u63d0\u793a\u7b26\uff09\u4e0a\u6267\u884c\u7684\u7a0b\u5e8f\u3002 \u8fd9\u662f\u53e6\u4e00\u4e2a\u76f4\u63a5\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002</p> <p>Linux \u548c macOS \u4e0a\u7684\u5e38\u89c1\u793a\u4f8b\u53ef\u80fd\u662f\uff1a</p> <ul> <li>\u2018ls\u2018 \u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9</li> <li>\u2018cat\u2018 \u62a5\u544a\u6587\u4ef6\u7684\u5185\u5bb9</li> <li>\u2018date\u2018 \u62a5\u544a\u65e5\u671f</li> <li>\u2018echo\u2018 \u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32</li> <li>\u2018sleep\u2018 \u7761\u7720\u51e0\u79d2\u949f</li> </ul> <p>\u7b49\u7b49\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 create_subprocess_exec() \u51fd\u6570\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <p>asyncio.create_subprocess_exec() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u5e76\u76f4\u63a5\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u5141\u8bb8\u5f02\u6b65\u534f\u7a0b\u8bfb\u53d6\u3001\u5199\u5165\u548c\u7b49\u5f85\u5b83\u3002</p> <p>\u56e0\u4e3a\u6240\u6709 asyncio \u5b50\u8fdb\u7a0b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14 asyncio \u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5e76\u884c\u6267\u884c\u548c\u76d1\u89c6\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u4e0e asyncio.create_subprocess_shell() \u51fd\u6570\u4e0d\u540c\uff0casyncio.create_subprocess_exec() \u4e0d\u4f1a\u4f7f\u7528 shell \u6267\u884c\u547d\u4ee4\u3002</p> <p>\u8fd9\u610f\u5473\u7740 shell \u63d0\u4f9b\u7684\u529f\u80fd\uff08\u4f8b\u5982 shell \u53d8\u91cf\u3001\u811a\u672c\u548c\u901a\u914d\u7b26\uff09\u5728\u6267\u884c\u547d\u4ee4\u65f6\u4e0d\u53ef\u7528\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\u6267\u884c\u547d\u4ee4\u53ef\u80fd\u66f4\u5b89\u5168\uff0c\u56e0\u4e3a\u6ca1\u6709\u673a\u4f1a\u8fdb\u884cshell\u6ce8\u5165\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.create_subprocess_exec() \u7684\u4f5c\u7528\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p>"},{"location":"asyncio_en/#1921-\u5982\u4f55\u4f7f\u7528-asyncio-\u7684-create_subprocess_exec","title":"19.2.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u7684 create_subprocess_exec()","text":"<p>19.2.1 How to Use Asyncio create_subprocess_exec()</p> EnglishChinese <p>The asyncio.create_subprocess_exec() function will execute a given string command in a subprocess.</p> <p>It returns a asyncio.subprocess.Process object that represents the subprocess.</p> <p>Process is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>The create_subprocess_exec() function is a coroutine, which means we must await it. It will return once the subprocess has been started, not when the subprocess is finished.</p> <p>For example:</p> <pre><code>...\n# execute a command in a subprocess\nprocess = await asyncio.create_subprocess_exec('ls')\n</code></pre> <p>Arguments to the command being executed must be provided as subsequent arguments to the create_subprocess_exec() function.</p> <p>For example:</p> <pre><code>...\n# execute a command with arguments in a subprocess\nprocess = await asyncio.create_subprocess_exec('ls', '-l')\n</code></pre> <p>We can wait for the subprocess to finish by awaiting the wait() method.</p> <p>For example:</p> <pre><code>...\n# wait for the subprocess to terminate\nawait process.wait()\n</code></pre> <p>We can stop the subprocess directly by calling the terminate() or kill() methods, which will raise a signal in the subprocess.</p> <p>For example:</p> <pre><code>...\n# terminate the subprocess\nprocess.terminate()\n</code></pre> <p>The input and output of the command will be handled by stdin, stderr, and stdout.</p> <p>We can have the asyncio program handle the input or output for the subprocess.</p> <p>This can be achieved by specifying the input or output stream and specifying a constant to redirect, such as asyncio.subprocess.PIPE.</p> <p>For example, we can redirect the output of a command to the asyncio program:</p> <pre><code>...\n# start a subprocess and redirect output\nprocess = await asyncio.create_subprocess_exec('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>We can then read the output of the program via the asyncio.subprocess.Process instance via the communicate() method.</p> <p>This method is a coroutine and must be awaited. It is used to both send and receive data with the subprocess.</p> <p>For example:</p> <pre><code>...\n# read data from the subprocess\nline = process.communicate()\n</code></pre> <p>We can also send data to the subprocess via the communicate() method by setting the \u201cinput\u201d argument in bytes.</p> <p>For example:</p> <pre><code>...\n# start a subprocess and redirect input\nprocess = await asyncio.create_subprocess_exec('ls', stdin=asyncio.subprocess.PIPE)\n# send data to the subprocess\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>Behind the scenes the asyncio.subprocess.PIPE configures the subprocess to point to a StreamReader or StreamWriter for sending data to or from the subprocess, and the communicate() method will read or write bytes from the configured reader.</p> <p>If PIPE is passed to stdin argument, the Process.stdin attribute will point to a StreamWriter instance. If PIPE is passed to stdout or stderr arguments, the Process.stdout and Process.stderr attributes will point to StreamReader instances.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>We can interact with the StreamReader or StreamWriter directly via the subprocess via the stdin, stdout, and stderr attributes.</p> <p>For example:</p> <pre><code>...\n# read a line from the subprocess output stream\nline = await process.stdout.readline()\n</code></pre> <p>Now that we know how to use the create_subprocess_exec() function, let\u2019s look at some worked examples.</p> <p>asyncio.create_subprocess_exec() \u51fd\u6570\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5b50\u8fdb\u7a0b\u7684 asyncio.subprocess.Process \u5bf9\u8c61\u3002</p> <p>Process\u662f\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u5141\u8bb8\u4e0e\u5b50\u8fdb\u7a0b\u901a\u4fe1\u5e76\u76d1\u89c6\u5176\u5b8c\u6210\u60c5\u51b5\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>create_subprocess_exec() \u51fd\u6570\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u5b83\u3002 \u5b83\u4f1a\u5728\u5b50\u8fdb\u7a0b\u542f\u52a8\u540e\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u5728\u5b50\u8fdb\u7a0b\u5b8c\u6210\u65f6\u8fd4\u56de\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\nprocess = await asyncio.create_subprocess_exec('ls')\n</code></pre> <p>\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u7684\u53c2\u6570\u5fc5\u987b\u4f5c\u4e3a create_subprocess_exec() \u51fd\u6570\u7684\u540e\u7eed\u53c2\u6570\u63d0\u4f9b\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u5e26\u53c2\u6570\u7684\u547d\u4ee4\nprocess = await asyncio.create_subprocess_exec('ls', '-l')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85 wait() \u65b9\u6cd5\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\nawait process.wait()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 terminate() \u6216 kill() \u65b9\u6cd5\u76f4\u63a5\u505c\u6b62\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f15\u53d1\u4e00\u4e2a\u4fe1\u53f7\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7ec8\u6b62\u5b50\u8fdb\u7a0b\nprocess.terminate()\n</code></pre> <p>\u547d\u4ee4\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5c06\u7531 stdin\u3001stderr \u548c stdout \u5904\u7406\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8ba9 asyncio \u7a0b\u5e8f\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u8f93\u5165\u6216\u8f93\u51fa\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u8f93\u5165\u6216\u8f93\u51fa\u6d41\u5e76\u6307\u5b9a\u8981\u91cd\u5b9a\u5411\u7684\u5e38\u91cf\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 asyncio.subprocess.PIPE\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 asyncio \u7a0b\u5e8f\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u51fa\nprocess = await asyncio.create_subprocess_exec('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7asyncio.subprocess.Process\u5b9e\u4f8b\u901a\u8fc7communicate()\u65b9\u6cd5\u8bfb\u53d6\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002</p> <p>\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002 \u5b83\u7528\u4e8e\u901a\u8fc7\u5b50\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8bfb\u53d6\u6570\u636e\nline = process.communicate()\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 communicate() \u65b9\u6cd5\u901a\u8fc7\u8bbe\u7f6e \u201cinput\u201d \u53c2\u6570\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u5c06\u6570\u636e\u53d1\u9001\u5230\u5b50\u8fdb\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u5165\nprocess = await asyncio.create_subprocess_exec('ls', stdin=asyncio.subprocess.PIPE)\n# \u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>\u5728\u80cc\u540e\uff0c asyncio.subprocess.PIPE \u5c06\u5b50\u8fdb\u7a0b\u914d\u7f6e\u4e3a\u6307\u5411 StreamReader \u6216 StreamWriter \u7528\u4e8e\u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u6216\u4ece\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\uff0c\u4ee5\u53ca communicate() \u65b9\u6cd5 \u5c06\u4ece\u914d\u7f6e\u7684\u8bfb\u53d6\u5668\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u8282\u3002</p> <p>\u5982\u679c PIPE \u4f20\u9012\u7ed9 stdin \u53c2\u6570\uff0c\u5219 Process.stdin \u5c5e\u6027\u5c06\u6307\u5411 StreamWriter \u5b9e\u4f8b\u3002 \u5982\u679c PIPE \u4f20\u9012\u7ed9 stdout \u6216 stderr \u53c2\u6570\uff0c\u5219 Process.stdout \u548c Process.stderr \u5c5e\u6027\u5c06\u6307\u5411 StreamReader \u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u8fdb\u7a0b\u901a\u8fc7 <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u5c5e\u6027\u76f4\u63a5\u4e0e StreamReader \u6216 StreamWriter \u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8f93\u51fa\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\nline = await process.stdout.readline()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 create_subprocess_exec() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p>"},{"location":"asyncio_en/#1922-asyncio-\u7684-create_subprocess_exec-\u7684\u793a\u4f8b","title":"19.2.2 Asyncio \u7684 create_subprocess_exec() \u7684\u793a\u4f8b","text":"<p>19.2.2 Example of Asyncio create_subprocess_exec()</p> EnglishChinese <p>We can explore how to run a command in a subprocess from asyncio.</p> <p>In this example, we will execute the \u201cecho\u201d command to report back a string.</p> <p>The echo command will report the provided string on standard output directly.</p> <p>The complete example is listed below.</p> <p>Note, this example assumes you have access to the \u201cecho\u201d command, I\u2019m not sure it will work on Windows.</p> <pre><code># SuperFastPython.com\n# example of executing a command as a subprocess with asyncio\nimport asyncio\n\n# main coroutine\nasync def main():\n    # start executing a command in a subprocess\n    process = await asyncio.create_subprocess_exec('echo', 'Hello World')\n    # report the details of the subprocess\n    print(f'subprocess: {process}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and executes it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and calls the create_subprocess_exec() function to execute a command.</p> <p>The main() coroutine suspends while the subprocess is created. A Process instance is returned.</p> <p>The main() coroutine resumes and reports the details of the subprocess. The main() process terminates and the asyncio program terminates.</p> <p>The output of the echo command is reported on the command line.</p> <p>This highlights how we can execute a command from an asyncio program.</p> <pre><code>Hello World\nsubprocess: &lt;Process 50249&gt;\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u5728 asyncio \u7684\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c \u201cecho\u201d \u547d\u4ee4\u6765\u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>echo \u547d\u4ee4\u5c06\u76f4\u63a5\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u62a5\u544a\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <p>\u6ce8\u610f\uff0c\u6b64\u793a\u4f8b\u5047\u8bbe\u60a8\u6709\u6743\u8bbf\u95ee \u201cecho\u201d \u547d\u4ee4\uff0c\u6211\u4e0d\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e Windows\u3002</p> <pre><code># SuperFastPython.com\n# \u4f7f\u7528 asyncio \u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4\u7684\u793a\u4f8b\nimport asyncio\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u5f00\u59cb\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\n    process = await asyncio.create_subprocess_exec('echo', 'Hello World')\n    # \u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\n    print(f'subprocess: {process}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u6267\u884c\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u8c03\u7528 create_subprocess_exec() \u51fd\u6570\u6765\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u521b\u5efa\u5b50\u8fdb\u7a0b\u65f6\uff0cmain() \u534f\u7a0b\u4f1a\u6302\u8d77\u3002 \u8fd4\u56de\u4e00\u4e2a Process \u5b9e\u4f8b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u5b50\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 main() \u8fdb\u7a0b\u7ec8\u6b62\uff0c\u5e76\u4e14 asyncio \u7a0b\u5e8f\u7ec8\u6b62\u3002</p> <p>echo \u547d\u4ee4\u7684\u8f93\u51fa\u5728\u547d\u4ee4\u884c\u4e0a\u62a5\u544a\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <pre><code>Hello World\nsubprocess: &lt;Process 50249&gt;\n</code></pre>"},{"location":"asyncio_en/#193-\u5982\u4f55\u8ddfshell\u4e00\u8d77\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4","title":"19.3 \u5982\u4f55\u8ddfshell\u4e00\u8d77\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4","text":"<p>How to Run a Command Via the Shell</p> EnglishChinese <p>We can execute commands using the shell.</p> <p>The shell is a user interface for the command line, called a command line interpreter (CLI).</p> <p>It will interpret and execute commands on behalf of the user.</p> <p>It also offers features such as a primitive programming language for scripting, wildcards, piping, shell variables (e.g. PATH), and more.</p> <p>For example, we can redirect the output of one command as input to another command, such as the contents of the \u201c/etc/services\u201d file into the word count \u201cwc\u201d command and count the number of lines:</p> <pre><code>cat /etc/services | wc -l\n</code></pre> <p>Examples of shells in the Unix based operating systems include:</p> <ul> <li>\u2018sh\u2019</li> <li>\u2018bash\u2019</li> <li>\u2018zsh\u2019</li> <li>And so on.</li> </ul> <p>On Windows, the shell is probably cmd.exe.</p> <p>See this great list of command line shells:</p> <ul> <li>List of command-line interpreters, Wikipedia</li> </ul> <p>The shell is already running, it was used to start the Python program.</p> <p>You don\u2019t need to do anything special to get or have access to the shell.</p> <p>We can execute a command from an asyncio program via the create_subprocess_shell() function.</p> <p>The asyncio.create_subprocess_shell() function takes a command and executes it using the current user shell.</p> <p>This is helpful as it not only allows the command to be executed, but allows the capabilities of the shell to be used, such as redirection, wildcards and more.</p> <p>\u2026 the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user\u2019s home directory.</p> <p>\u2014 SUBPROCESS \u2014 SUBPROCESS MANAGEMENT</p> <p>The command will be executed in a subprocess of the process executing the asyncio program.</p> <p>Importantly, the asyncio program is able to interact with the subprocess asynchronously, e.g. via coroutines.</p> <p>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>There can be security considerations when executing a command via the shell instead of directly.</p> <p>This is because there is at least one level of indirection and interpretation between the request to execute the command and the command being executed, allowing possible malicious injection.</p> <p>Important It is the application\u2019s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid shell injection vulnerabilities.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>Now that we know what asyncio.create_subprocess_shell() does, let\u2019s look at how to use it.</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528shell\u6267\u884c\u547d\u4ee4\u3002</p> <p>shell \u662f\u547d\u4ee4\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u79f0\u4e3a\u547d\u4ee4\u884c\u89e3\u91ca\u5668 (CLI)\u3002</p> <p>\u5b83\u5c06\u4ee3\u8868\u7528\u6237\u89e3\u91ca\u5e76\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd8\u63d0\u4f9b\u8bf8\u5982\u7528\u4e8e\u811a\u672c\u3001\u901a\u914d\u7b26\u3001\u7ba1\u9053\u3001shell \u53d8\u91cf\uff08\u4f8b\u5982 PATH\uff09\u7b49\u7684\u539f\u59cb\u7f16\u7a0b\u8bed\u8a00\u7b49\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3a\u53e6\u4e00\u4e2a\u547d\u4ee4\u7684\u8f93\u5165\uff0c\u4f8b\u5982\u5c06\u201c/etc/services\u201d\u6587\u4ef6\u7684\u5185\u5bb9\u91cd\u5b9a\u5411\u5230\u5b57\u6570\u7edf\u8ba1\u201cwc\u201d\u547d\u4ee4\u5e76\u7edf\u8ba1\u884c\u6570\uff1a</p> <pre><code>cat /etc/services | wc -l\n</code></pre> <p>\u57fa\u4e8e Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 shell \u793a\u4f8b\u5305\u62ec\uff1a</p> <ul> <li>\u2018sh\u2019</li> <li>\u2018bash\u2019</li> <li>\u2018zsh\u2019</li> <li>\u7b49\u7b49\u3002</li> </ul> <p>\u5728 Windows \u4e0a\uff0cshell \u53ef\u80fd\u662f cmd.exe\u3002</p> <p>\u8bf7\u53c2\u9605\u8fd9\u4e2a\u5f88\u68d2\u7684\u547d\u4ee4\u884c shell \u5217\u8868\uff1a</p> <ul> <li>\u547d\u4ee4\u884c\u89e3\u91ca\u5668\u5217\u8868, Wikipedia</li> </ul> <p>shell\u5df2\u7ecf\u5728\u8fd0\u884c\uff0c\u5b83\u88ab\u7528\u6765\u542f\u52a8Python\u7a0b\u5e8f\u3002</p> <p>\u60a8\u65e0\u9700\u6267\u884c\u4efb\u4f55\u7279\u6b8a\u64cd\u4f5c\u5373\u53ef\u83b7\u53d6\u6216\u8bbf\u95ee shell\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 create_subprocess_shell() \u51fd\u6570\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <p>asyncio.create_subprocess_shell() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u5e76\u4f7f\u7528\u5f53\u524d\u7528\u6237 shell \u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u5141\u8bb8\u6267\u884c\u547d\u4ee4\uff0c\u8fd8\u5141\u8bb8\u4f7f\u7528 shell \u7684\u529f\u80fd\uff0c\u4f8b\u5982\u91cd\u5b9a\u5411\u3001\u901a\u914d\u7b26\u7b49\u3002</p> <p>\u2026 \u6307\u5b9a\u7684\u547d\u4ee4\u5c06\u901a\u8fc7 shell \u6267\u884c\u3002 \u5982\u679c\u60a8\u4f7f\u7528 Python \u4e3b\u8981\u662f\u4e3a\u4e86\u589e\u5f3a\u5b83\u5728\u5927\u591a\u6570\u7cfb\u7edf shell \u4e0a\u63d0\u4f9b\u7684\u63a7\u5236\u6d41\uff0c\u5e76\u4e14\u4ecd\u7136\u5e0c\u671b\u65b9\u4fbf\u5730\u8bbf\u95ee\u5176\u4ed6 shell \u529f\u80fd\uff08\u4f8b\u5982 shell \u7ba1\u9053\u3001\u6587\u4ef6\u540d\u901a\u914d\u7b26\u3001\u73af\u5883\u53d8\u91cf\u6269\u5c55\u4ee5\u53ca\u5c06 ~ \u6269\u5c55\u5230\u7528\u6237\u4e3b\u76ee\u5f55\uff09\uff0c\u90a3\u4e48\u8fd9\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u2014 SUBPROCESS \u2014 SUBPROCESS MANAGEMENT</p> <p>\u8be5\u547d\u4ee4\u5c06\u5728\u6267\u884c asyncio \u7a0b\u5e8f\u7684\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0casyncio \u7a0b\u5e8f\u80fd\u591f\u4e0e\u5b50\u8fdb\u7a0b\u5f02\u6b65\u4ea4\u4e92\uff0c\u4f8b\u5982 \u901a\u8fc7\u534f\u7a0b\u3002</p> <p>\u56e0\u4e3a\u6240\u6709 asyncio \u5b50\u8fdb\u7a0b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14 asyncio \u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5e76\u884c\u6267\u884c\u548c\u76d1\u89c6\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u901a\u8fc7 shell \u800c\u4e0d\u662f\u76f4\u63a5\u6267\u884c\u547d\u4ee4\u65f6\u53ef\u80fd\u5b58\u5728\u5b89\u5168\u8003\u8651\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u6267\u884c\u547d\u4ee4\u7684\u8bf7\u6c42\u548c\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e00\u5c42\u95f4\u63a5\u548c\u89e3\u91ca\uff0c\u4ece\u800c\u5141\u8bb8\u53ef\u80fd\u7684\u6076\u610f\u6ce8\u5165\u3002</p> <p>\u91cd\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u8d23\u4efb\u786e\u4fdd\u6240\u6709\u7a7a\u683c\u548c\u7279\u6b8a\u5b57\u7b26\u90fd\u88ab\u6b63\u786e\u5f15\u7528\uff0c\u4ee5\u907f\u514d shell \u6ce8\u5165\u6f0f\u6d1e\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.create_subprocess_shell() \u7684\u4f5c\u7528\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p>"},{"location":"asyncio_en/#1931-\u5982\u4f55\u4f7f\u7528-asyncio-\u7684-create_subprocess_shell","title":"19.3.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u7684 create_subprocess_shell()","text":"<p>19.3.1 How to Use Asyncio create_subprocess_shell()</p> EnglishChinese <p>The asyncio.create_subprocess_shell() function will execute a given string command via the current shell.</p> <p>It returns a asyncio.subprocess.Process object that represents the process.</p> <p>It is very similar to the create_subprocess_shell() function we saw in a previous section. Nevertheless, we will review how to use the function and interact with the process via the Process instance (in case you skipped straight to this section).</p> <p>The create_subprocess_shell() function is a coroutine, which means we must await it. It will return once the subprocess has been started, not when the subprocess is finished.</p> <p>For example:</p> <pre><code>...\n# start a subprocess\nprocess = await asyncio.create_subprocess_shell('ls')\nWe can wait for the subprocess to finish by awaiting the **wait()** method.\n</code></pre> <p>For example:</p> <pre><code>...\n# wait for the subprocess to terminate\nawait process.wait()\n</code></pre> <p>We can stop the subprocess directly by calling the terminate() or kill() methods, which will raise a signal in the subprocess.</p> <p>The input and output of the command will be handled by the shell, e.g. stdin, stderr, and stdout.</p> <p>We can have the asyncio program handle the input or output for the subprocess.</p> <p>This can be achieved by specifying the input or output stream and specifying a constant to redirect, such as asyncio.subprocess.PIPE.</p> <p>For example, we can redirect the output of a command to the asyncio program:</p> <pre><code>...\n# start a subprocess and redirect output\nprocess = await asyncio.create_subprocess_shell('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>We can then read the output of the program via the asyncio.subprocess.Process instance via the communicate() method.</p> <p>This method is a coroutine and must be awaited. It is used to both send and receive data with the subprocess.</p> <p>For example:</p> <pre><code>...\n# read data from the subprocess\nline = process.communicate()\n</code></pre> <p>We can also send data to the subprocess via the communicate() method by setting the \u201cinput\u201d argument in bytes.</p> <p>For example:</p> <pre><code>...\n# start a subprocess and redirect input\nprocess = await asyncio.create_subprocess_shell('ls', stdin=asyncio.subprocess.PIPE)\n# send data to the subprocess\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>Behind the scenes the asyncio.subprocess.PIPE configures the subprocess to point to a StreamReader or StreamWriter for sending data to or from the subprocess, and the communicate() method will read or write bytes from the configured reader.</p> <p>If PIPE is passed to stdin argument, the Process.stdin attribute will point to a StreamWriter instance. If PIPE is passed to stdout or stderr arguments, the Process.stdout and Process.stderr attributes will point to StreamReader instances.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>We can interact with the StreamReader or StreamWriter directly via the subprocess via the stdin, stdout, and stderr attributes.</p> <p>For example:</p> <pre><code>...\n# read a line from the subprocess output stream\nline = await process.stdout.readline()\n</code></pre> <p>Now that we know how to use the create_subprocess_shell() function, let\u2019s look at some worked examples.</p> <p>asyncio.create_subprocess_shell() \u51fd\u6570\u5c06\u901a\u8fc7\u5f53\u524d shell \u6267\u884c\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8fdb\u7a0b\u7684 asyncio.subprocess.Process \u5bf9\u8c61\u3002</p> <p>\u5b83\u4e0e\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u770b\u5230\u7684 create_subprocess_shell() \u51fd\u6570\u975e\u5e38\u76f8\u4f3c\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u56de\u987e\u5982\u4f55\u4f7f\u7528\u8be5\u51fd\u6570\u5e76\u901a\u8fc7 Process \u5b9e\u4f8b\u4e0e\u6d41\u7a0b\u4ea4\u4e92\uff08\u5982\u679c\u60a8\u76f4\u63a5\u8df3\u5230\u672c\u8282\uff09\u3002</p> <p>create_subprocess_shell() \u51fd\u6570\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u5b83\u3002 \u5b83\u4f1a\u5728\u5b50\u8fdb\u7a0b\u542f\u52a8\u540e\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u5728\u5b50\u8fdb\u7a0b\u5b8c\u6210\u65f6\u8fd4\u56de\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u4e00\u4e2a\u5b50\u8fdb\u7a0b\nprocess = await asyncio.create_subprocess_shell('ls')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85 wait() \u65b9\u6cd5\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\nawait process.wait()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 terminate() \u6216 kill() \u65b9\u6cd5\u76f4\u63a5\u505c\u6b62\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f15\u53d1\u4e00\u4e2a\u4fe1\u53f7\u3002</p> <p>\u547d\u4ee4\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5c06\u7531 shell \u5904\u7406\uff0c\u4f8b\u5982 \u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u9519\u8bef\u548c\u6807\u51c6\u8f93\u51fa\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8ba9 asyncio \u7a0b\u5e8f\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u8f93\u5165\u6216\u8f93\u51fa\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u8f93\u5165\u6216\u8f93\u51fa\u6d41\u5e76\u6307\u5b9a\u8981\u91cd\u5b9a\u5411\u7684\u5e38\u91cf\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 asyncio.subprocess.PIPE\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 asyncio \u7a0b\u5e8f\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u51fa\nprocess = await asyncio.create_subprocess_shell('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7asyncio.subprocess.Process\u5b9e\u4f8b\u901a\u8fc7communicate()\u65b9\u6cd5\u8bfb\u53d6\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002</p> <p>\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002 \u5b83\u7528\u4e8e\u901a\u8fc7\u5b50\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8bfb\u53d6\u6570\u636e\nline = process.communicate()\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u201cinput\u201d\u53c2\u6570\uff0c\u901a\u8fc7 communicate() \u65b9\u6cd5\u5c06\u6570\u636e\u53d1\u9001\u5230\u5b50\u8fdb\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u5165\nprocess = await asyncio.create_subprocess_shell('ls', stdin=asyncio.subprocess.PIPE)\n# \u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>\u5728\u80cc\u540e\uff0c asyncio.subprocess.PIPE \u5c06\u5b50\u8fdb\u7a0b\u914d\u7f6e\u4e3a\u6307\u5411 StreamReader \u6216 StreamWriter \u7528\u4e8e\u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u6216\u4ece\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\uff0c\u4ee5\u53ca communicate() \u65b9\u6cd5 \u5c06\u4ece\u914d\u7f6e\u7684\u8bfb\u53d6\u5668\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u8282\u3002</p> <p>\u5982\u679c PIPE \u4f20\u9012\u7ed9 stdin \u53c2\u6570\uff0c\u5219 Process.stdin \u5c5e\u6027\u5c06\u6307\u5411 StreamWriter \u5b9e\u4f8b\u3002 \u5982\u679c PIPE \u4f20\u9012\u7ed9 stdout \u6216 stderr \u53c2\u6570\uff0c\u5219 Process.stdout \u548c Process.stderr \u5c5e\u6027\u5c06\u6307\u5411 StreamReader \u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u8fdb\u7a0b\u7684 <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u5c5e\u6027\u76f4\u63a5\u4e0e StreamReader \u6216 StreamWriter \u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8f93\u51fa\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\nline = await process.stdout.readline()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 create_subprocess_shell() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p>"},{"location":"asyncio_en/#1932-asyncio-\u7684-create_subprocess_shell-\u7684\u793a\u4f8b","title":"19.3.2 Asyncio \u7684 create_subprocess_shell() \u7684\u793a\u4f8b","text":"<p>19.3.2 Example of Asyncio create_subprocess_shell()</p> EnglishChinese <p>We can explore how to run a command in a subprocess from asyncio using the shell.</p> <p>In this example, we will execute the \u201cecho\u201d command to report back a string.</p> <p>The echo command will report the provided string on standard output directly.</p> <p>The complete example is listed below.</p> <p>Note, this example assumes you have access to the \u201cecho\u201d command, I\u2019m not sure it will work on Windows.</p> <pre><code># SuperFastPython.com\n# example of executing a shell command as a subprocess with asyncio\nimport asyncio\n\n# main coroutine\nasync def main():\n    # start executing a shell command in a subprocess\n    process = await asyncio.create_subprocess_shell('echo Hello World')\n    # report the details of the subprocess\n    print(f'subprocess: {process}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and executes it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and calls the create_subprocess_shell() function to execute a command.</p> <p>The main() coroutine suspends while the subprocess is created. A Process instance is returned.</p> <p>The main() coroutine resumes and reports the details of the subprocess. The main() process terminates and the asyncio program terminates.</p> <p>The output of the echo command is reported on the command line.</p> <p>This highlights how we can execute a command using the shell from an asyncio program.</p> <pre><code>subprocess: &lt;Process 43916&gt;\nHello World\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 shell \u4ece asyncio \u7684\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c \u201cecho\u201d \u547d\u4ee4\u6765\u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>echo \u547d\u4ee4\u5c06\u76f4\u63a5\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u62a5\u544a\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6b64\u793a\u4f8b\u5047\u8bbe\u60a8\u6709\u6743\u8bbf\u95ee\u201cecho\u201d\u547d\u4ee4\uff0c\u6211\u4e0d\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e Windows\u3002</p> <pre><code># SuperFastPython.com\n# \u4f7f\u7528 asyncio \u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c shell \u547d\u4ee4\u7684\u793a\u4f8b\nimport asyncio\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u5f00\u59cb\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c shell \u547d\u4ee4\n    process = await asyncio.create_subprocess_shell('echo Hello World')\n    # \u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\n    print(f'subprocess: {process}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u6267\u884c\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u8c03\u7528 create_subprocess_shell() \u51fd\u6570\u6765\u6267\u884c\u547d\u4ee4\u3002</p> <p>main() \u534f\u7a0b\u5728\u5b50\u8fdb\u7a0b\u521b\u5efa\u65f6\u6302\u8d77\u3002 \u8fd4\u56de\u4e00\u4e2a Process \u5b9e\u4f8b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 main() \u8fdb\u7a0b\u7ec8\u6b62\uff0casyncio \u7a0b\u5e8f\u7ec8\u6b62\u3002</p> <p>echo \u547d\u4ee4\u7684\u8f93\u51fa\u5728\u547d\u4ee4\u884c\u4e0a\u62a5\u544a\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4f7f\u7528 asyncio \u7a0b\u5e8f\u4e2d\u7684 shell \u6267\u884c\u547d\u4ee4\u3002</p> <pre><code>subprocess: &lt;Process 43916&gt;\nHello World\n</code></pre>"},{"location":"asyncio_en/#20-\u975e\u963b\u585e\u6d41","title":"20. \u975e\u963b\u585e\u6d41","text":"<p>20. Non-Blocking Streams</p> EnglishChinese <p>A major benefit of asyncio is the ability to use non-blocking streams.</p> <p>Let\u2019s take a closer look.</p> <p>asyncio \u7684\u4e00\u4e2a\u4e3b\u8981\u597d\u5904\u662f\u80fd\u591f\u4f7f\u7528\u975e\u963b\u585e\u6d41\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p>"},{"location":"asyncio_en/#201-asyncio-\u7684\u6d41","title":"20.1 Asyncio \u7684\u6d41","text":"<p>20.1 Asyncio Streams</p> EnglishChinese <p>Asyncio provides non-blocking I/O socket programming.</p> <p>This is provided via streams.</p> <p>Streams are high-level async/await-ready primitives to work with network connections. Streams allow sending and receiving data without using callbacks or low-level protocols and transports.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Sockets can be opened that provide access to a stream writer and a stream writer.</p> <p>Data can then be written and read from the stream using coroutines, suspending when appropriate.</p> <p>Once finished, the socket can be closed.</p> <p>The asyncio streams capability is low-level meaning that any protocols required must be implemented manually.</p> <p>This might include common web protocols, such as:</p> <ul> <li>HTTP or HTTPS for interacting with web servers</li> <li>SMTP for interacting with email servers</li> <li>FTP for interacting with file servers.</li> </ul> <p>The streams can also be used to create a server to handle requests using a standard protocol, or to develop your own application-specific protocol.</p> <p>Now that we know what asyncio streams are, let\u2019s look at how to use them.</p> <p>Asyncio \u63d0\u4f9b\u975e\u963b\u585e I/O \u5957\u63a5\u5b57\u7f16\u7a0b\u3002</p> <p>\u8fd9\u662f\u901a\u8fc7\u6d41(streams)\u63d0\u4f9b\u7684\u3002</p> <p>\u6d41(streams)\u662f\u9ad8\u7ea7\u5f02\u6b65/\u7b49\u5f85\u5c31\u7eea\u539f\u8bed\uff0c\u53ef\u4e0e\u7f51\u7edc\u8fde\u63a5\u4e00\u8d77\u4f7f\u7528\u3002 \u6d41\u5141\u8bb8\u5728\u4e0d\u4f7f\u7528\u56de\u8c03\u6216\u4f4e\u7ea7\u534f\u8bae\u548c\u4f20\u8f93\u7684\u60c5\u51b5\u4e0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u53ef\u4ee5\u6253\u5f00\u63d0\u4f9b\u5bf9\u6d41\u5199\u5165\u5668\u548c\u6d41\u5199\u5165\u5668\u7684\u8bbf\u95ee\u7684\u5957\u63a5\u5b57\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u534f\u7a0b\u5728\u6d41\u4e2d\u5199\u5165\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u5728\u9002\u5f53\u7684\u65f6\u5019\u6302\u8d77\u3002</p> <p>\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u5f02\u6b65\u6d41\u529f\u80fd\u662f\u4f4e\u7ea7\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u6240\u9700\u7684\u4efb\u4f55\u534f\u8bae\u3002</p> <p>\u8fd9\u53ef\u80fd\u5305\u62ec\u5e38\u89c1\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u7528\u4e8e\u4e0e Web \u670d\u52a1\u5668\u4ea4\u4e92\u7684 HTTP \u6216 HTTPS</li> <li>\u7528\u4e8e\u4e0e\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u4ea4\u4e92\u7684 SMTP</li> <li>\u7528\u4e8e\u4e0e\u6587\u4ef6\u670d\u52a1\u5668\u4ea4\u4e92\u7684 FTP\u3002</li> </ul> <p>\u8fd9\u4e9b\u6d41\u8fd8\u53ef\u7528\u4e8e\u521b\u5efa\u670d\u52a1\u5668\u6765\u4f7f\u7528\u6807\u51c6\u534f\u8bae\u5904\u7406\u8bf7\u6c42\uff0c\u6216\u5f00\u53d1\u60a8\u81ea\u5df1\u7684\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u534f\u8bae\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4ec0\u4e48\u662f\u5f02\u6b65\u6d41\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002</p>"},{"location":"asyncio_en/#202-\u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u8fde\u63a5","title":"20.2 \u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u8fde\u63a5","text":"<p>20.2 How to Open a Connection</p> EnglishChinese <p>An asyncio TCP client socket connection can be opened using the asyncio.open_connection() function.</p> <p>Establish a network connection and return a pair of (reader, writer) objects. The returned reader and writer objects are instances of StreamReader and StreamWriter classes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine that must be awaited and will return once the socket connection is open.</p> <p>The function returns a StreamReader and StreamWriter object for interacting with the socket.</p> <p>For example:</p> <pre><code>...\n# open a connection\nreader, writer = await asyncio.open_connection(...)\n</code></pre> <p>The asyncio.open_connection() function takes many arguments in order to configure the socket connection.</p> <p>The two required arguments are the host and the port.</p> <p>The host is a string that specifies the server to connect to, such as a domain name or an IP address.</p> <p>The port is the socket port number, such as 80 for HTTP servers, 443 for HTTPS servers, 23 for SMTP and so on.</p> <p>For example:</p> <pre><code>...\n# open a connection to an http server\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>Encrypted socket connections are supported over the SSL protocol.</p> <p>The most common example might be HTTPS which is replacing HTTP.</p> <p>This can be achieved by setting the \u201cssl\u201d argument to True.</p> <p>For example:</p> <pre><code>...\n# open a connection to an https server\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.open_connection() \u51fd\u6570\u6253\u5f00 asyncio TCP \u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u5e76\u8fd4\u56de\u4e00\u5bf9\uff08reader\u3001writer\uff09\u5bf9\u8c61\u3002 \u8fd4\u56de\u7684\u8bfb\u53d6\u5668\u548c\u5199\u5165\u5668\u5bf9\u8c61\u662f StreamReader \u548c StreamWriter \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\uff0c\u4e00\u65e6\u5957\u63a5\u5b57\u8fde\u63a5\u6253\u5f00\u5c31\u4f1a\u8fd4\u56de\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a StreamReader \u548c StreamWriter \u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e\u5957\u63a5\u5b57\u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e00\u4e2a\u8fde\u63a5\nreader, writer = await asyncio.open_connection(...)\n</code></pre> <p>asyncio.open_connection() \u51fd\u6570\u9700\u8981\u8bb8\u591a\u53c2\u6570\u6765\u914d\u7f6e\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\u662f\u4e3b\u673a\u548c\u7aef\u53e3\u3002</p> <p>\u4e3b\u673a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u4f8b\u5982\u57df\u540d\u6216IP\u5730\u5740\u3002</p> <p>port \u662f\u5957\u63a5\u5b57\u7aef\u53e3\u53f7\uff0c\u4f8b\u5982 HTTP \u670d\u52a1\u5668\u4e3a 80\uff0cHTTPS \u670d\u52a1\u5668\u4e3a 443\uff0cSMTP \u4e3a 23 \u7b49\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0e http \u670d\u52a1\u5668\u7684\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>SSL \u534f\u8bae\u652f\u6301\u52a0\u5bc6\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u53ef\u80fd\u662f HTTPS\uff0c\u5b83\u6b63\u5728\u53d6\u4ee3 HTTP\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06\u201cssl\u201d\u53c2\u6570\u8bbe\u7f6e\u4e3aTrue\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0e https \u670d\u52a1\u5668\u7684\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre>"},{"location":"asyncio_en/#203-\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u4fa6\u542c\u670d\u52a1","title":"20.3 \u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u4fa6\u542c\u670d\u52a1","text":"<p>20.3 How to Start a Server</p> EnglishChinese <p>An asyncio TCP server socket can be opened using the asyncio.start_server() function.</p> <p>Create a TCP server (socket type SOCK_STREAM) listening on port of the host address.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>This is a coroutine that must be awaited.</p> <p>The function returns an asyncio.Server object that represents the running server.</p> <p>For example:</p> <pre><code>...\n# start a tcp server\nserver = await asyncio.start_server(...)\n</code></pre> <p>The three required arguments are the callback function, the host, and the port.</p> <p>The callback function is a custom function specified by name that will be called each time a client connects to the server.</p> <p>The client_connected_cb callback is called whenever a new client connection is established. It receives a (reader, writer) pair as two arguments, instances of the StreamReader and StreamWriter classes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>The host is the domain name or IP address that clients will specify to connect. The port is the socket port number on which to receive connections, such as 21 for FTP or 80 for HTTP.</p> <p>For example:</p> <pre><code># handle connections\nasync def handler(reader, writer):\n    # ...\n\n...\n# start a server to receive http connections\nserver = await asyncio.start_server(handler, '127.0.0.1', 80)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.start_server() \u51fd\u6570\u6253\u5f00 asyncio TCP \u670d\u52a1\u5668\u5957\u63a5\u5b57\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a TCP \u670d\u52a1\u5668\uff08\u5957\u63a5\u5b57\u7c7b\u578b SOCK_STREAM\uff09\uff0c\u4fa6\u542c\u4e3b\u673a\u5730\u5740\u7684\u7aef\u53e3\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u6b63\u5728\u8fd0\u884c\u7684\u670d\u52a1\u5668\u7684 asyncio.Server \u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u4e00\u4e2atcp\u670d\u52a1\u5668\nserver = await asyncio.start_server(...)\n</code></pre> <p>\u4e09\u4e2a\u5fc5\u9700\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\u3001\u4e3b\u673a\u548c\u7aef\u53e3\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u7531\u540d\u79f0\u6307\u5b9a\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u6bcf\u6b21\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u670d\u52a1\u5668\u65f6\u90fd\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\u3002</p> <p>\u6bcf\u5f53\u5efa\u7acb\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528 <code>client_connected_cb</code> \u56de\u8c03\u3002 \u5b83\u63a5\u6536\u4e00\u4e2a\uff08\u8bfb\u53d6\u5668(reader)\uff0c\u5199\u5165\u5668(writer)\uff09\u5bf9\u4f5c\u4e3a\u4e24\u4e2a\u53c2\u6570\uff0c\u5373 StreamReader \u548c StreamWriter \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u4e3b\u673a\u662f\u5ba2\u6237\u7aef\u6307\u5b9a\u8fde\u63a5\u7684\u57df\u540d\u6216IP\u5730\u5740\u3002 port \u662f\u63a5\u6536\u8fde\u63a5\u7684\u5957\u63a5\u5b57\u7aef\u53e3\u53f7\uff0c\u4f8b\u5982 FTP \u4e3a <code>21</code>\uff0cHTTP \u4e3a <code>80</code>\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5904\u7406\u8fde\u63a5\nasync def handler(reader, writer):\n    # ...\n\n...\n# \u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u6765\u63a5\u6536http\u8fde\u63a5\nserver = await asyncio.start_server(handler, '127.0.0.1', 80)\n</code></pre>"},{"location":"asyncio_en/#204-\u5982\u4f55\u4f7f\u7528-streamwriter-\u5199\u5165\u6570\u636e","title":"20.4 \u5982\u4f55\u4f7f\u7528 StreamWriter \u5199\u5165\u6570\u636e","text":"<p>20.4 How to Write Data with the StreamWriter</p> EnglishChinese <p>We can write data to the socket using an asyncio.StreamWriter.</p> <p>Represents a writer object that provides APIs to write data to the IO stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Data is written as bytes.</p> <p>Byte data can be written to the socket using the write() method.</p> <p>The method attempts to write the data to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>For example:</p> <pre><code>...\n# write byte data\nwriter.write(byte_data)\n</code></pre> <p>Alternatively, multiple \u201clines\u201d of byte data organized into a list or iterable can be written using the writelines() method.</p> <p>For example:</p> <pre><code>...\n# write lines of byte data\nwriter.writelines(byte_lines)\n</code></pre> <p>Neither method for writing data blocks or suspends the calling coroutine.</p> <p>After writing byte data it is a good idea to drain the socket via the drain() method.</p> <p>Wait until it is appropriate to resume writing to the stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine and will suspend the caller until the bytes have been transmitted and the socket is ready.</p> <p>For example:</p> <pre><code>...\n# write byte data\nwriter.write(byte_data)\n# wait for data to be transmitted\nawait writer.drain()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.StreamWriter \u5c06\u6570\u636e\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <p>\u8868\u793a\u4e00\u4e2a writer \u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b API \u5c06\u6570\u636e\u5199\u5165 IO \u6d41\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u6570\u636e\u4ee5\u5b57\u8282\u5f62\u5f0f\u5199\u5165\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 write() \u65b9\u6cd5\u5c06\u5b57\u8282\u6570\u636e\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <p>\u8be5\u65b9\u6cd5\u5c1d\u8bd5\u7acb\u5373\u5c06\u6570\u636e\u5199\u5165\u5e95\u5c42\u5957\u63a5\u5b57\u3002 \u5982\u679c\u5931\u8d25\uff0c\u6570\u636e\u5c06\u5728\u5185\u90e8\u5199\u5165\u7f13\u51b2\u533a\u4e2d\u6392\u961f\uff0c\u76f4\u5230\u53ef\u4ee5\u53d1\u9001\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\nwriter.write(byte_data)\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528 writelines() \u5199\u5165\u7ec4\u7ec7\u6210\u5217\u8868\u6216\u53ef\u8fed\u4ee3\u7684\u591a\u201c\u884c\u201d\u5b57\u8282\u6570\u636e\u3002 writelines) \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\u884c\nwriter.writelines(byte_lines)\n</code></pre> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u5199\u5165\u6570\u636e\u5757\u6216\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u5199\u5165\u5b57\u8282\u6570\u636e\u540e\uff0c\u6700\u597d\u901a\u8fc7 drain() \u65b9\u6cd5\u6392\u7a7a\u5957\u63a5\u5b57\u3002</p> <p>\u7b49\u5230\u5408\u9002\u7684\u65f6\u5019\u518d\u7ee7\u7eed\u5199\u5165\u6d41\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5c06\u6302\u8d77\u8c03\u7528\u8005\uff0c\u76f4\u5230\u5b57\u8282\u5df2\u4f20\u8f93\u4e14\u5957\u63a5\u5b57\u51c6\u5907\u5c31\u7eea\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\nwriter.write(byte_data)\n# \u7b49\u5f85\u6570\u636e\u4f20\u8f93\nawait writer.drain()\n</code></pre>"},{"location":"asyncio_en/#205-\u5982\u4f55\u4f7f\u7528-streamreader-\u8bfb\u53d6\u6570\u636e","title":"20.5 \u5982\u4f55\u4f7f\u7528 StreamReader \u8bfb\u53d6\u6570\u636e","text":"<p>20.5 How to Read Data with the StreamReader</p> EnglishChinese <p>We can read data from the socket using an asyncio.StreamReader.</p> <p>Represents a reader object that provides APIs to read data from the IO stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Data is read in byte format, therefore strings may need to be encoded before being used.</p> <p>All read methods are coroutines that must be awaited.</p> <p>An arbitrary number of bytes can be read via the read() method, which will read until the end of file (EOF).</p> <pre><code>...\n# read byte data\nbyte_data = await reader.read()\n</code></pre> <p>Additionally, the number of bytes to read can be specified via the \u201cn\u201d argument.</p> <p>Read up to n bytes. If n is not provided, or set to -1, read until EOF and return all read bytes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This may be helpful if you know the number of bytes expected from the next response.</p> <p>For example:</p> <pre><code>...\n# read byte data\nbyte_data = await reader.read(n=100)\n</code></pre> <p>A single line of data can be read using the readline() method.</p> <p>This will return bytes until a new line character \u2018\\n\u2019 is encountered, or EOF.</p> <p>Read one line, where \u201cline\u201d is a sequence of bytes ending with \\n. If EOF is received and \\n was not found, the method returns partially read data. If EOF is received and the internal buffer is empty, return an empty bytes object.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is helpful when reading standard protocols that operate with lines of text.</p> <pre><code>...\n# read a line data\nbyte_line = await reader.readline()\n</code></pre> <p>Additionally, there is a readexactly() method to read an exact number of bytes otherwise raise an exception, and a readuntil() that will read bytes until a specified character in byte form is read.</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.StreamReader \u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6570\u636e\u3002</p> <p>\u8868\u793a\u4e00\u4e2a\u8bfb\u53d6\u5668\u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b API \u4ee5\u4ece IO \u6d41\u8bfb\u53d6\u6570\u636e\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u6570\u636e\u4ee5\u5b57\u8282\u683c\u5f0f\u8bfb\u53d6\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5728\u4f7f\u7528\u4e4b\u524d\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u7f16\u7801\u3002</p> <p>\u6240\u6709\u8bfb\u53d6\u65b9\u6cd5\u90fd\u662f\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 read() \u65b9\u6cd5\u8bfb\u53d6\u4efb\u610f\u6570\u91cf\u7684\u5b57\u8282\uff0c\u8be5\u65b9\u6cd5\u5c06\u8bfb\u53d6\u5230\u6587\u4ef6\u672b\u5c3e (EOF)\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u5b57\u8282\u6570\u636e\nbyte_data = await reader.read()\n</code></pre> <p>\u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7\u201cn\u201d\u53c2\u6570\u6307\u5b9a\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002</p> <p>\u6700\u591a\u8bfb\u53d6 n \u4e2a\u5b57\u8282\u3002 \u5982\u679c\u672a\u63d0\u4f9b n \u6216\u8bbe\u7f6e\u4e3a -1\uff0c\u5219\u8bfb\u53d6\u76f4\u5230 EOF \u5e76\u8fd4\u56de\u6240\u6709\u8bfb\u53d6\u7684\u5b57\u8282\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u5982\u679c\u60a8\u77e5\u9053\u4e0b\u4e00\u4e2a\u54cd\u5e94\u7684\u9884\u671f\u5b57\u8282\u6570\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8bfb\u53d6\u5b57\u8282\u6570\u636e\nbyte_data = await reader.read(n=100)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 readline() \u65b9\u6cd5\u8bfb\u53d6\u5355\u884c\u6570\u636e\u3002</p> <p>\u8fd9\u5c06\u8fd4\u56de\u5b57\u8282\uff0c\u76f4\u5230\u9047\u5230\u65b0\u884c\u5b57\u7b26\u201c\\n\u201d\u6216 EOF\u3002</p> <p>\u8bfb\u53d6\u4e00\u884c\uff0c\u5176\u4e2d\u201cline\u201d\u662f\u4ee5\\n\u7ed3\u5c3e\u7684\u5b57\u8282\u5e8f\u5217\u3002 \u5982\u679c\u6536\u5230 EOF \u4f46\u672a\u627e\u5230 \\n\uff0c\u5219\u8be5\u65b9\u6cd5\u8fd4\u56de\u90e8\u5206\u8bfb\u53d6\u7684\u6570\u636e\u3002 \u5982\u679c\u6536\u5230 EOF \u5e76\u4e14\u5185\u90e8\u7f13\u51b2\u533a\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u8282\u5bf9\u8c61\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u5728\u9605\u8bfb\u4f7f\u7528\u6587\u672c\u884c\u64cd\u4f5c\u7684\u6807\u51c6\u534f\u8bae\u65f6\u5f88\u6709\u5e2e\u52a9\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u4e00\u884c\u6570\u636e\nbyte_line = await reader.readline()\n</code></pre> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a readexactly() \u65b9\u6cd5\u7528\u4e8e\u8bfb\u53d6\u786e\u5207\u7684\u5b57\u8282\u6570\uff0c\u5426\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u8fd8\u6709\u4e00\u4e2a readuntil() \u65b9\u6cd5\u5c06\u8bfb\u53d6\u5b57\u8282\uff0c\u76f4\u5230\u8bfb\u53d6\u5b57\u8282\u5f62\u5f0f\u7684\u6307\u5b9a\u5b57\u7b26\u3002</p>"},{"location":"asyncio_en/#206-\u5982\u4f55\u5173\u95ed\u8fde\u63a5","title":"20.6 \u5982\u4f55\u5173\u95ed\u8fde\u63a5","text":"<p>20.6 How to Close Connection</p> EnglishChinese <p>The socket can be closed via the asyncio.StreamWriter.</p> <p>The close() method can be called which will close the socket.</p> <p>The method closes the stream and the underlying socket.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This method does not block.</p> <p>For example:</p> <pre><code>...\n# close the socket\nwriter.close()\n</code></pre> <p>Although the close() method does not block, we can wait for the socket to close completely before continuing on.</p> <p>This can be achieved via the wait_closed() method.</p> <p>Wait until the stream is closed. Should be called after close() to wait until the underlying connection is closed.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine that can be awaited.</p> <p>For example:</p> <pre><code>...\n# close the socket\nwriter.close()\n# wait for the socket to close\nawait writer.wait_closed()\n</code></pre> <p>We can check if the socket has been closed or is in the process of being closed via the is_closing() method.</p> <p>For example:</p> <pre><code>...\n# check if the socket is closed or closing\nif writer.is_closing():\n    # ...\n</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7 asyncio.StreamWriter \u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u53ef\u4ee5\u8c03\u7528 close() \u65b9\u6cd5\u6765\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u8be5\u65b9\u6cd5\u5173\u95ed\u6d41\u548c\u5e95\u5c42\u5957\u63a5\u5b57\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8be5\u65b9\u6cd5\u4e0d\u4f1a\u963b\u585e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5173\u95ed\u5957\u63a5\u5b57\nwriter.close()\n</code></pre> <p>\u867d\u7136 close() \u65b9\u6cd5\u4e0d\u4f1a\u963b\u585e\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u5957\u63a5\u5b57\u5b8c\u5168\u5173\u95ed\u540e\u518d\u7ee7\u7eed\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7 wait_close() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u7b49\u5f85\u6d41\u5173\u95ed\u3002 \u5e94\u5728 close() \u4e4b\u540e\u8c03\u7528\u4ee5\u7b49\u5f85\u5e95\u5c42\u8fde\u63a5\u5173\u95ed\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5173\u95ed\u5957\u63a5\u5b57\nwriter.close()\n# \u7b49\u5f85\u5957\u63a5\u5b57\u5173\u95ed\nawait writer.wait_closed()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 is_close() \u65b9\u6cd5\u68c0\u67e5\u5957\u63a5\u5b57\u662f\u5426\u5df2\u5173\u95ed\u6216\u6b63\u5728\u5173\u95ed\u8fc7\u7a0b\u4e2d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u5957\u63a5\u5b57\u662f\u5426\u5df2\u5173\u95ed\u6216\u6b63\u5728\u5173\u95ed\nif writer.is_closing():\n    # ...\n</code></pre>"},{"location":"asyncio_en/#21-\u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","title":"21. \u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","text":"<p>21. Example of Checking Website Status</p> EnglishChinese <p>We can query the HTTP status of websites using asyncio by opening a stream and writing and reading HTTP requests and responses.</p> <p>We can then use asyncio to query the status of many websites concurrently, and even report the results dynamically.</p> <p>Let\u2019s get started.</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u901a\u8fc7\u6253\u5f00\u6d41\u5e76\u5199\u5165\u548c\u8bfb\u53d6 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u6765\u67e5\u8be2\u7f51\u7ad9\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u540c\u65f6\u67e5\u8be2\u591a\u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\uff0c\u751a\u81f3\u52a8\u6001\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\u3002</p>"},{"location":"asyncio_en/#211-\u5982\u4f55\u4f7f\u7528-asyncio-\u68c0\u67e5-http-\u72b6\u6001","title":"21.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u68c0\u67e5 HTTP \u72b6\u6001","text":"<p>21.1 How to Check HTTP Status with Asyncio</p> EnglishChinese <p>The asyncio module provides support for opening socket connections and reading and writing data via streams.</p> <p>We can use this capability to check the status of web pages.</p> <p>This involves perhaps four steps, they are:</p> <ol> <li>Open a connection</li> <li>Write a request</li> <li>Read a response</li> <li>Close the connection</li> </ol> <p>Let\u2019s take a closer look at each part in turn.</p> <p>asyncio \u6a21\u5757\u63d0\u4f9b\u5bf9\u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\u4ee5\u53ca\u901a\u8fc7\u6d41\u8bfb\u5199\u6570\u636e\u7684\u652f\u6301\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u529f\u80fd\u6765\u68c0\u67e5\u7f51\u9875\u7684\u72b6\u6001\u3002</p> <p>\u8fd9\u53ef\u80fd\u6d89\u53ca\u56db\u4e2a\u6b65\u9aa4\uff0c\u5b83\u4eec\u662f\uff1a</p> <ol> <li>\u6253\u5f00\u8fde\u63a5</li> <li>\u5199\u4e00\u4e2a\u8bf7\u6c42</li> <li>\u8bfb\u4e00\u4e2a\u54cd\u5e94</li> <li>\u5173\u95ed\u8fde\u63a5</li> </ol> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e2a\u90e8\u5206\u3002</p>"},{"location":"asyncio_en/#212-\u6253\u5f00-http-\u8fde\u63a5","title":"21.2 \u6253\u5f00 HTTP \u8fde\u63a5","text":"<p>21.2 Open HTTP Connection</p> EnglishChinese <p>A connection can be opened in asyncio using the asyncio.open_connection() function.</p> <p>Among many arguments, the function takes the string hostname and integer port number</p> <p>This is a coroutine that must be awaited and returns a StreamReader and a StreamWriter for reading and writing with the socket.</p> <p>This can be used to open an HTTP connection on port 80.</p> <p>For example:</p> <pre><code>...\n# open a socket connection\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>We can also open an SSL connection using the ssl=True argument. This can be used to open an HTTPS connection on port 443.</p> <p>For example:</p> <pre><code>...\n# open a socket connection\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.open_connection() \u51fd\u6570\u5728 asyncio \u4e2d\u6253\u5f00\u8fde\u63a5\u3002</p> <p>\u5728\u8bb8\u591a\u53c2\u6570\u4e2d\uff0c\u8be5\u51fd\u6570\u91c7\u7528\u5b57\u7b26\u4e32\u4e3b\u673a\u540d\u548c\u6574\u6570\u7aef\u53e3\u53f7</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a StreamReader \u548c\u4e00\u4e2a StreamWriter\uff0c\u7528\u4e8e\u4f7f\u7528\u5957\u63a5\u5b57\u8fdb\u884c\u8bfb\u5199\u3002</p> <p>\u8fd9\u53ef\u7528\u4e8e\u5728\u7aef\u53e3 80 \u4e0a\u6253\u5f00 HTTP \u8fde\u63a5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 ssl=True \u53c2\u6570\u6253\u5f00 SSL \u8fde\u63a5\u3002 \u8fd9\u53ef\u7528\u4e8e\u5728\u7aef\u53e3 443 \u4e0a\u6253\u5f00 HTTPS \u8fde\u63a5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre>"},{"location":"asyncio_en/#213-\u5199\u5165-http-\u8bf7\u6c42","title":"21.3 \u5199\u5165 HTTP \u8bf7\u6c42","text":"<p>21.3 Write HTTP Request</p> EnglishChinese <p>Once open, we can write a query to the StreamWriter to make an HTTP request.</p> <p>For example, an HTTP version 1.1 request is in plain text. We can request the file path \u2018/\u2019, which may look as follows:</p> <pre><code>GET / HTTP/1.1\nHost: www.google.com\n</code></pre> <p>Importantly, there must be a carriage return and a line feed (\\r\\n) at the end of each line, and an empty line at the end.</p> <p>As Python strings this may look as follows:</p> <pre><code>'GET / HTTP/1.1\\r\\n'\n'Host: www.google.com\\r\\n'\n'\\r\\n'\n</code></pre> <p>You can learn more about HTTP v1.1 request messages here:</p> <ul> <li>HTTP/1.1 request messages</li> </ul> <p>This string must be encoded as bytes before being written to the StreamWriter.</p> <p>This can be achieved using the encode() method on the string itself.</p> <p>The default \u2018utf-8\u2018 encoding may be sufficient.</p> <p>For example:</p> <pre><code>...\n# encode string as bytes\nbyte_data = string.encode()\n</code></pre> <p>You can see a listing of encodings here:</p> <ul> <li>Python Standard Encodings</li> </ul> <p>The bytes can then be written to the socket via the StreamWriter via the write() method.</p> <p>For example:</p> <pre><code>...\n# encode string as bytes\nbyte_data = string.encode()\n</code></pre> <p>You can see a listing of encodings here:</p> <ul> <li>Python Standard Encodings</li> </ul> <p>The bytes can then be written to the socket via the StreamWriter via the write() method.</p> <p>For example:</p> <pre><code>...\n# write query to socket\nwriter.write(byte_data)\n</code></pre> <p>After writing the request, it is a good idea to wait for the byte data to be sent and for the socket to be ready.</p> <p>This can be achieved by the drain() method.</p> <p>This is a coroutine that must be awaited.</p> <p>For example:</p> <pre><code>...\n# wait for the socket to be ready.\nawait writer.drain()\n</code></pre> <p>\u6253\u5f00\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5411 StreamWriter \u5199\u5165\u67e5\u8be2\u4ee5\u53d1\u51fa HTTP \u8bf7\u6c42\u3002</p> <p>\u4f8b\u5982\uff0cHTTP \u7248\u672c 1.1 \u8bf7\u6c42 \u662f\u7eaf\u6587\u672c\u5f62\u5f0f\u3002 \u6211\u4eec\u53ef\u4ee5\u8bf7\u6c42\u6587\u4ef6\u8def\u5f84\u201c/\u201d\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>GET / HTTP/1.1\nHost: www.google.com\n</code></pre> <p>\u91cd\u8981\u7684\u662f\uff0c\u6bcf\u884c\u672b\u5c3e\u5fc5\u987b\u6709\u56de\u8f66\u7b26\u548c\u6362\u884c\u7b26\uff08\\r\\n\uff09\uff0c\u5e76\u4e14\u672b\u5c3e\u6709\u4e00\u4e2a\u7a7a\u884c\u3002</p> <p>\u4f5c\u4e3a Python \u5b57\u7b26\u4e32\uff0c\u8fd9\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>'GET / HTTP/1.1\\r\\n'\n'Host: www.google.com\\r\\n'\n'\\r\\n'\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e86\u89e3\u6709\u5173 HTTP v1.1 \u8bf7\u6c42\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>HTTP/1.1 \u8bf7\u6c42\u6d88\u606f</li> </ul> <p>\u5728\u5199\u5165 StreamWriter \u4e4b\u524d\uff0c\u5fc5\u987b\u5c06\u8be5\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a\u5b57\u8282\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u672c\u8eab\u4f7f\u7528 encode() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u9ed8\u8ba4\u7684\u201cutf-8\u201d\u7f16\u7801\u53ef\u80fd\u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a\u5b57\u8282\nbyte_data = string.encode()\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u67e5\u770b\u7f16\u7801\u5217\u8868\uff1a</p> <ul> <li>Python \u6807\u51c6\u7f16\u7801</li> </ul> <p>\u7136\u540e\u53ef\u4ee5\u901a\u8fc7 StreamWriter \u901a\u8fc7 write() \u5c06\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57 \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\nwriter.write(byte_data)\n</code></pre> <p>\u5199\u5165\u8bf7\u6c42\u540e\uff0c\u6700\u597d\u7b49\u5f85\u5b57\u8282\u6570\u636e\u53d1\u9001\u548c\u5957\u63a5\u5b57\u51c6\u5907\u5c31\u7eea\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7 drain() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5957\u63a5\u5b57\u51c6\u5907\u597d\u3002\nawait writer.drain()\n</code></pre>"},{"location":"asyncio_en/#214-\u8bfb\u53d6-http-\u54cd\u5e94","title":"21.4 \u8bfb\u53d6 HTTP \u54cd\u5e94","text":"<p>21.4 Read HTTP Response</p> EnglishChinese <p>Once the HTTP request has been made, we can read the response.</p> <p>This can be achieved via the StreamReader for the socket.</p> <p>The response can be read using the read() method which will read a chunk of bytes, or the readline() method which will read one line of bytes.</p> <p>We might prefer the readline() method because we are using the text-based HTTP protocol which sends HTML data one line at a time.</p> <p>The readline() method is a coroutine and must be awaited.</p> <p>For example:</p> <pre><code>...\n# read one line of response\nline_bytes = await reader.readline()\n</code></pre> <p>HTTP 1.1 responses are composed of two parts, a header separated by an empty line, then the body terminating with an empty line.</p> <p>The header has information about whether the request was successful and what type of file will be sent, and the body contains the content of the file, such as an HTML webpage.</p> <p>The first line of the HTTP header contains the HTTP status for the requested page on the server.</p> <p>You can learn more about HTTP v1.1 responses here:</p> <ul> <li>HTTP/1.1 response messages</li> </ul> <p>Each line must be decoded from bytes into a string.</p> <p>This can be achieved using the decode() method on the byte data. Again, the default encoding is \u2018utf_8\u2018.</p> <p>For example:</p> <pre><code>...\n# decode bytes into a string\nline_data = line_bytes.decode()\n</code></pre> <p>\u4e00\u65e6\u53d1\u51fa HTTP \u8bf7\u6c42\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u53d6\u54cd\u5e94\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5957\u63a5\u5b57\u7684 StreamReader \u6765\u5b9e\u73b0\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u54cd\u5e94\uff0c\u8be5\u65b9\u6cd5\u5c06\u8bfb\u53d6\u4e00\u5927\u5757\u5b57\u8282\uff0c\u6216\u8005\u4f7f\u7528 readline() \u65b9\u6cd5\u8bfb\u53d6\u4e00\u884c\u5b57\u8282\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u66f4\u559c\u6b22 readline() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u6587\u672c\u7684 HTTP \u534f\u8bae\uff0c\u5b83\u4e00\u6b21\u53d1\u9001\u4e00\u884c HTML \u6570\u636e\u3002</p> <p>readline() \u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8bfb\u53d6\u4e00\u884c\u54cd\u5e94\nline_bytes = await reader.readline()\n</code></pre> <p>HTTP 1.1 \u54cd\u5e94 \u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u7531\u7a7a\u884c\u5206\u9694\u7684\u6807\u5934\uff0c\u7136\u540e\u662f\u7531\u7a7a\u884c\u7ec8\u6b62\u7684\u6b63\u6587\u3002</p> <p>header \u5305\u542b\u6709\u5173\u8bf7\u6c42\u662f\u5426\u6210\u529f\u4ee5\u53ca\u5c06\u53d1\u9001\u4ec0\u4e48\u7c7b\u578b\u7684\u6587\u4ef6\u7684\u4fe1\u606f\uff0cbody \u5305\u542b\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4f8b\u5982 HTML \u7f51\u9875\u3002</p> <p>HTTP \u6807\u5934\u7684\u7b2c\u4e00\u884c\u5305\u542b\u670d\u52a1\u5668\u4e0a\u6240\u8bf7\u6c42\u9875\u9762\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e86\u89e3\u6709\u5173 HTTP v1.1 \u54cd\u5e94\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>HTTP/1.1 \u54cd\u5e94\u6d88\u606f</li> </ul> <p>\u6bcf\u4e00\u884c\u90fd\u5fc5\u987b\u4ece\u5b57\u8282\u89e3\u7801\u4e3a\u5b57\u7b26\u4e32\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5b57\u8282\u6570\u636e\u4f7f\u7528 decode() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u540c\u6837\uff0c\u9ed8\u8ba4\u7f16\u7801\u662f\u201cutf_8\u201d\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u5b57\u8282\u89e3\u7801\u4e3a\u5b57\u7b26\u4e32\nline_data = line_bytes.decode()\n</code></pre>"},{"location":"asyncio_en/#215-\u5173\u95ed-http-\u8fde\u63a5","title":"21.5 \u5173\u95ed HTTP \u8fde\u63a5","text":"<p>21.5 Close HTTP Connection</p> EnglishChinese <p>We can close the socket connection by closing the StreamWriter.</p> <p>This can be achieved by calling the close() method.</p> <p>For example:</p> <pre><code>...\n# close the connection\nwriter.close()\n</code></pre> <p>This does not block and may not close the socket immediately.</p> <p>Now that we know how to make HTTP requests and read responses using asyncio, let\u2019s look at some worked examples of checking web page statuses.</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed StreamWriter \u6765\u5173\u95ed\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 close() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5173\u95ed\u8fde\u63a5\nwriter.close()\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u963b\u585e\u5e76\u4e14\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 asyncio \u53d1\u51fa HTTP \u8bf7\u6c42\u5e76\u8bfb\u53d6\u54cd\u5e94\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u68c0\u67e5\u7f51\u9875\u72b6\u6001\u7684\u793a\u4f8b\u3002</p>"},{"location":"asyncio_en/#216-\u6309\u987a\u5e8f\u68c0\u67e5-http-\u72b6\u6001\u7684\u793a\u4f8b","title":"21.6 \u6309\u987a\u5e8f\u68c0\u67e5 HTTP \u72b6\u6001\u7684\u793a\u4f8b","text":"<p>21.6 Example of Checking HTTP Status Sequentially</p> EnglishChinese <p>We can develop an example to check the HTTP status for multiple websites using asyncio.</p> <p>In this example, we will first develop a coroutine that will check the status of a given URL. We will then call this coroutine once for each of the top 10 websites.</p> <p>Firstly, we can define a coroutine that will take a URL string and return the HTTP status.</p> <pre><code># get the HTTP/S status of a webpage\nasync def get_status(url):\n    # ...\n</code></pre> <p>The URL must be parsed into its constituent components.</p> <p>We require the hostname and file path when making the HTTP request. We also need to know the URL scheme (HTTP or HTTPS) in order to determine whether SSL is required nor not.</p> <p>This can be achieved using the urllib.parse.urlsplit() function that takes a URL string and returns a named tuple of all the URL elements.</p> <pre><code>...\n# split the url into components\nurl_parsed = urlsplit(url)\n</code></pre> <p>We can then open the HTTP connection based on the URL scheme and use the URL hostname.</p> <pre><code>...\n# open the connection\nif url_parsed.scheme == 'https':\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\nelse:\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n</code></pre> <p>Next, we can create the HTTP GET request using the hostname and file path and write the encoded bytes to the socket using the StreamWriter.</p> <pre><code>...\n# send GET request\nquery = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n# write query to socket\nwriter.write(query.encode())\n# wait for the bytes to be written to the socket\nawait writer.drain()\n</code></pre> <p>Next, we can read the HTTP response.</p> <p>We only require the first line of the response that contains the HTTP status.</p> <pre><code>...\n# read the single line response\nresponse = await reader.readline()\n</code></pre> <p>The connection can then be closed.</p> <pre><code>...\n# close the connection\nwriter.close()\n</code></pre> <p>Finally, we can decode the bytes read from the server, remote trailing white space, and return the HTTP status.</p> <pre><code>...\n# decode and strip white space\nstatus = response.decode().strip()\n# return the response\nreturn status\n</code></pre> <p>Tying this together, the complete get_status() coroutine is listed below.</p> <p>It does not have any error handling, such as the case where the host cannot be reached or is slow to respond.</p> <p>These additions would make a nice extension for the reader.</p> <pre><code># get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n</code></pre> <p>Next, we can call the get_status() coroutine for multiple web pages or websites we want to check.</p> <p>In this case, we will define a list of the top 10 web pages in the world.</p> <pre><code>...\n# list of top 10 websites to check\nsites = ['https://www.google.com/',\n    'https://www.youtube.com/',\n    'https://www.facebook.com/',\n    'https://twitter.com/',\n    'https://www.instagram.com/',\n    'https://www.baidu.com/',\n    'https://www.wikipedia.org/',\n    'https://yandex.ru/',\n    'https://yahoo.com/',\n    'https://www.whatsapp.com/'\n    ]\n</code></pre> <p>We can then query each, in turn, using our get_status() coroutine.</p> <p>In this case, we will do so sequentially in a loop, and report the status of each in turn.</p> <pre><code>...\n# check the status of all websites\nfor url in sites:\n    # get the status for the url\n    status = await get_status(url)\n    # report the url and its status\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>We can do better than sequential when using asyncio, but this provides a good starting point that we can improve upon later.</p> <p>Tying this together, the main() coroutine queries the status of the top 10 websites.</p> <pre><code># main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # check the status of all websites\n    for url in sites:\n        # get the status for the url\n        status = await get_status(url)\n        # report the url and its status\n        print(f'{url:30}:\\t{status}')\n</code></pre> <p>Finally, we can create the main() coroutine and use it as the entry point to the asyncio program.</p> <pre><code>...\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># SuperFastPython.com\n# check the status of many webpages\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n\n# main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # check the status of all websites\n    for url in sites:\n        # get the status for the url\n        status = await get_status(url)\n        # report the url and its status\n        print(f'{url:30}:\\t{status}')\n\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the program.</p> <p>The main() coroutine runs, defining a list of the top 10 websites.</p> <p>The list of websites is then traversed sequentially. The main() coroutine suspends and calls the get_status() coroutine to query the status of one website.</p> <p>The get_status() coroutine runs, parses the URL, and opens a connection. It constructs an HTTP GET query and writes it to the host. A response is read, decoded, and returned.</p> <p>The main() coroutine resumes and reports the HTTP status of the URL.</p> <p>This is repeated for each URL in the list.</p> <p>The program takes about 5.6 seconds to complete, or about half a second per URL on average.</p> <p>This highlights how we can use asyncio to query the HTTP status of webpages.</p> <p>Nevertheless, it does not take full advantage of the asyncio to execute tasks concurrently.</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>Next, let\u2019s look at how we might update the example to execute the coroutines concurrently.</p> <p>\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u4e00\u4e2a\u793a\u4f8b\u6765\u4f7f\u7528 asyncio \u68c0\u67e5\u591a\u4e2a\u7f51\u7ad9\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5f00\u53d1\u4e00\u4e2a\u534f\u7a0b\u6765\u68c0\u67e5\u7ed9\u5b9a URL \u7684\u72b6\u6001\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u4e3a\u524d 10 \u4e2a\u7f51\u7ad9\u4e2d\u7684\u6bcf\u4e2a\u7f51\u7ad9\u8c03\u7528\u4e00\u6b21\u8be5\u534f\u7a0b\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff0c\u5b83\u5c06\u63a5\u53d7 URL \u5b57\u7b26\u4e32\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u3002</p> <pre><code># \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # ...\n</code></pre> <p>URL \u5fc5\u987b\u88ab\u89e3\u6790\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u3002</p> <p>\u53d1\u51fa HTTP \u8bf7\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e3b\u673a\u540d\u548c\u6587\u4ef6\u8def\u5f84\u3002 \u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053 URL \u65b9\u6848\uff08HTTP \u6216 HTTPS\uff09\uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u9700\u8981 SSL\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 urllib.parse.urlsplit() \u51fd\u6570\u6765\u5b9e\u73b0\uff0c\u8be5\u51fd\u6570\u63a5\u53d7 URL \u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u6240\u6709 URL \u7684\u547d\u540d\u5143\u7ec4\u3002 \u7f51\u5740\u5143\u7d20\u3002</p> <pre><code>...\n# \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\nurl_parsed = urlsplit(url)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6839\u636e URL \u65b9\u6848\u6253\u5f00 HTTP \u8fde\u63a5\u5e76\u4f7f\u7528 URL \u4e3b\u673a\u540d\u3002</p> <pre><code>...\n# \u6253\u5f00\u8fde\u63a5\nif url_parsed.scheme == 'https':\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\nelse:\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e3b\u673a\u540d\u548c\u6587\u4ef6\u8def\u5f84\u521b\u5efa HTTP GET \u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528 StreamWriter \u5c06\u7f16\u7801\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <pre><code>...\n# send GET request\nquery = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n# write query to socket\nwriter.write(query.encode())\n# wait for the bytes to be written to the socket\nawait writer.drain()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6 HTTP \u54cd\u5e94\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u5305\u542b HTTP \u72b6\u6001\u7684\u54cd\u5e94\u7684\u7b2c\u4e00\u884c\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\nresponse = await reader.readline()\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\u3002</p> <pre><code>...\n# \u5173\u95ed\u8fde\u63a5\nwriter.close()\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89e3\u7801\u4ece\u670d\u52a1\u5668\u8bfb\u53d6\u7684\u5b57\u8282\u3001\u8fdc\u7a0b\u5c3e\u968f\u7a7a\u683c\uff0c\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u3002</p> <pre><code>...\n# \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\nstatus = response.decode().strip()\n# \u8fd4\u56de\u54cd\u5e94\nreturn status\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684 get_status() \u534f\u7a0b\u3002</p> <p>\u5b83\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u5904\u7406\uff0c\u4f8b\u5982\u65e0\u6cd5\u5230\u8fbe\u4e3b\u673a\u6216\u54cd\u5e94\u7f13\u6162\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u4e9b\u8865\u5145\u5c06\u4e3a\u8bfb\u8005\u63d0\u4f9b\u4e00\u4e2a\u5f88\u597d\u7684\u6269\u5c55\u3002</p> <pre><code># \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001GET\u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u591a\u4e2a\u7f51\u9875\u6216\u7f51\u7ad9\u8c03\u7528 get_status() \u534f\u7a0b\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e16\u754c\u6392\u540d\u524d 10 \u7684\u7f51\u9875\u5217\u8868\u3002</p> <pre><code>...\n# \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\nsites = ['https://www.google.com/',\n    'https://www.youtube.com/',\n    'https://www.facebook.com/',\n    'https://twitter.com/',\n    'https://www.instagram.com/',\n    'https://www.baidu.com/',\n    'https://www.wikipedia.org/',\n    'https://yandex.ru/',\n    'https://yahoo.com/',\n    'https://www.whatsapp.com/'\n    ]\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 get_status() \u534f\u7a0b\u4f9d\u6b21\u67e5\u8be2\u6bcf\u4e2a\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5728\u5faa\u73af\u4e2d\u6309\u987a\u5e8f\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5e76\u4f9d\u6b21\u62a5\u544a\u6bcf\u4e2a\u72b6\u6001\u3002</p> <pre><code>...\n# \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\nfor url in sites:\n    # \u83b7\u53d6 url \u7684\u72b6\u6001\n    status = await get_status(url)\n    # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u4f7f\u7528 asyncio \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6bd4\u987a\u5e8f\u505a\u5f97\u66f4\u597d\uff0c\u4f46\u8fd9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4ee5\u540e\u8fdb\u884c\u6539\u8fdb\u3002</p> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0cmain() \u534f\u7a0b\u67e5\u8be2\u524d 10 \u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <pre><code># \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\n    for url in sites:\n        # \u83b7\u53d6 url \u7684\u72b6\u6001\n        status = await get_status(url)\n        # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <pre><code>...\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u68c0\u67e5\u8bb8\u591a\u7f51\u9875\u7684\u72b6\u6001\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001 GET \u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\n    for url in sites:\n        # \u83b7\u53d6 url \u7684\u72b6\u6001\n        status = await get_status(url)\n        # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u7528\u4f5c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\uff0c\u5b9a\u4e49\u524d 10 \u4e2a\u7f51\u7ad9\u7684\u5217\u8868\u3002</p> <p>\u7136\u540e\u6309\u987a\u5e8f\u904d\u5386\u7f51\u7ad9\u5217\u8868\u3002 main() \u534f\u7a0b\u6302\u8d77\u5e76\u8c03\u7528 get_status() \u534f\u7a0b\u6765\u67e5\u8be2\u67d0\u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <p>get_status() \u534f\u7a0b\u8fd0\u884c\u3001\u89e3\u6790 URL \u5e76\u6253\u5f00\u8fde\u63a5\u3002 \u5b83\u6784\u9020\u4e00\u4e2a HTTP GET \u67e5\u8be2\u5e76\u5c06\u5176\u5199\u5165\u4e3b\u673a\u3002 \u54cd\u5e94\u88ab\u8bfb\u53d6\u3001\u89e3\u7801\u5e76\u8fd4\u56de\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a URL \u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a URL \u91cd\u590d\u6b64\u64cd\u4f5c\u3002</p> <p>\u8be5\u7a0b\u5e8f\u5927\u7ea6\u9700\u8981 5.6 \u79d2\u624d\u80fd\u5b8c\u6210\uff0c\u6216\u8005\u5e73\u5747\u6bcf\u4e2a URL \u5927\u7ea6\u9700\u8981\u534a\u79d2\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4f7f\u7528 asyncio \u6765\u67e5\u8be2\u7f51\u9875\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u5e76\u6ca1\u6709\u5145\u5206\u5229\u7528 asyncio \u6765\u5e76\u53d1\u6267\u884c\u4efb\u52a1\u3002</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u66f4\u65b0\u793a\u4f8b\u4ee5\u540c\u65f6\u6267\u884c\u534f\u7a0b\u3002</p>"},{"location":"asyncio_en/#217-\u5e76\u53d1\u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","title":"21.7 \u5e76\u53d1\u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","text":"<p>21.7 Example of Checking Website Status Concurrently</p> EnglishChinese <p>A benefit of asyncio is that we can execute many coroutines concurrently.</p> <p>We can query the status of websites concurrently in asyncio using the asyncio.gather() function.</p> <p>This function takes one or more coroutines, suspends executing the provided coroutines, and returns the results from each as an iterable. We can then traverse the list of URLs and iterable of return values from the coroutines and report results.</p> <p>This may be a simpler approach than the above.</p> <p>First, we can create a list of coroutines.</p> <pre><code>...\n# create all coroutine requests\ncoros = [get_status(url) for url in sites]\n</code></pre> <p>Next, we can execute the coroutines and get the iterable of results using asyncio.gather().</p> <p>Note that we cannot provide the list of coroutines directly, but instead must unpack the list into separate expressions that are provided as positional arguments to the function.</p> <pre><code>...\n# execute all coroutines and wait\nresults = await asyncio.gather(*coros)\n</code></pre> <p>This will execute all of the coroutines concurrently and retrieve their results.</p> <p>We can then traverse the list of URLs and returned status and report each in turn.</p> <pre><code>...\n# process all results\nfor url, status in zip(sites, results):\n    # report status\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># SuperFastPython.com\n# check the status of many webpages\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n\n# main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # create all coroutine requests\n    coros = [get_status(url) for url in sites]\n    # execute all coroutines and wait\n    results = await asyncio.gather(*coros)\n    # process all results\n    for url, status in zip(sites, results):\n        # report status\n        print(f'{url:30}:\\t{status}')\n\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example executes the main() coroutine as before.</p> <p>In this case, a list of coroutines is created in a list comprehension.</p> <p>The asyncio.gather() function is then called, passing the coroutines and suspending the main() coroutine until they are all complete.</p> <p>The coroutines execute, querying each website concurrently and returning their status.</p> <p>The main() coroutine resumes and receives an iterable of status values. This iterable along with the list of URLs is then traversed using the zip() built-in function and the statuses are reported.</p> <p>This highlights a simpler approach to executing the coroutines concurrently and reporting the results after all tasks are completed.</p> <p>It is also faster than the sequential version above, completing in about 1.4 seconds on my system.</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>Next, let\u2019s explore common errors when getting started with asyncio.</p> <p>asyncio \u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u8bb8\u591a\u534f\u7a0b\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u5728 asyncio \u4e2d\u540c\u65f6\u67e5\u8be2\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <p>\u8be5\u51fd\u6570\u91c7\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u534f\u7a0b\uff0c\u6682\u505c\u6267\u884c\u6240\u63d0\u4f9b\u7684\u534f\u7a0b\uff0c\u5e76\u5c06\u6bcf\u4e2a\u534f\u7a0b\u7684\u7ed3\u679c\u4f5c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fd4\u56de\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u534f\u7a0b\u7684 URL \u5217\u8868\u548c\u53ef\u8fed\u4ee3\u7684\u8fd4\u56de\u503c\u5e76\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u6bd4\u4e0a\u9762\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5217\u8868\u3002</p> <pre><code>...\n# \u521b\u5efa\u6240\u6709\u534f\u7a0b\u8bf7\u6c42\ncoros = [get_status(url) for url in sites]\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u534f\u7a0b\u5e76\u4f7f\u7528 asyncio.gather() \u83b7\u53d6\u53ef\u8fed\u4ee3\u7684\u7ed3\u679c\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u63d0\u4f9b\u534f\u7a0b\u5217\u8868\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u5217\u8868\u89e3\u538b\u7f29\u4e3a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u51fd\u6570\u7684\u4f4d\u7f6e\u53c2\u6570\u63d0\u4f9b\u3002</p> <pre><code>...\n# \u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u7b49\u5f85\nresults = await asyncio.gather(*coros)\n</code></pre> <p>\u8fd9\u5c06\u540c\u65f6\u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u68c0\u7d22\u5b83\u4eec\u7684\u7ed3\u679c\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u904d\u5386 URL \u5217\u8868\u548c\u8fd4\u56de\u7684\u72b6\u6001\u5e76\u4f9d\u6b21\u62a5\u544a\u3002</p> <pre><code>...\n# \u5904\u7406\u6240\u6709\u7ed3\u679c\nfor url, status in zip(sites, results):\n    # \u62a5\u544a\u72b6\u6001\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u68c0\u67e5\u8bb8\u591a\u7f51\u9875\u7684\u72b6\u6001\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001 GET \u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\u5b57\u7b26\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u521b\u5efa\u6240\u6709\u534f\u7a0b\u8bf7\u6c42\n    coros = [get_status(url) for url in sites]\n    # \u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u7b49\u5f85\n    results = await asyncio.gather(*coros)\n    # \u5904\u7406\u6240\u6709\u7ed3\u679c\n    for url, status in zip(sites, results):\n        # \u62a5\u544a\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u4f1a\u50cf\u4ee5\u524d\u4e00\u6837\u6267\u884c main() \u534f\u7a0b\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u534f\u7a0b\u5217\u8868\u662f\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u521b\u5efa\u7684\u3002</p> <p>\u7136\u540e\u8c03\u7528 asyncio.gather() \u51fd\u6570\uff0c\u4f20\u9012\u534f\u7a0b\u5e76\u6302\u8d77 main() \u534f\u7a0b\uff0c\u76f4\u5230\u5b83\u4eec\u5168\u90e8\u5b8c\u6210\u3002</p> <p>\u534f\u7a0b\u6267\u884c\uff0c\u540c\u65f6\u67e5\u8be2\u6bcf\u4e2a\u7f51\u7ad9\u5e76\u8fd4\u56de\u5176\u72b6\u6001\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u63a5\u6536\u53ef\u8fed\u4ee3\u7684\u72b6\u6001\u503c\u3002 \u7136\u540e\u4f7f\u7528 zip() \u5185\u7f6e\u51fd\u6570\u904d\u5386\u8be5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4ee5\u53ca URL \u5217\u8868\uff0c\u5e76\u62a5\u544a\u72b6\u6001\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u540c\u65f6\u6267\u884c\u534f\u7a0b\u5e76\u5728\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u5b83\u4e5f\u6bd4\u4e0a\u9762\u7684\u987a\u5e8f\u7248\u672c\u66f4\u5feb\uff0c\u5728\u6211\u7684\u7cfb\u7edf\u4e0a\u5927\u7ea6\u9700\u8981 1.4 \u79d2\u5373\u53ef\u5b8c\u6210\u3002</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u63a2\u8ba8\u4e00\u4e0b asyncio \u5165\u95e8\u65f6\u7684\u5e38\u89c1\u9519\u8bef\u3002</p>"},{"location":"asyncio_en/#22-python-asyncio-\u5e38\u89c1\u9519\u8bef","title":"22. Python Asyncio \u5e38\u89c1\u9519\u8bef","text":"<p>22. Python Asyncio Common Errors</p> EnglishChinese <p>This section gives examples of general errors encountered by developers when using asyncio in Python.</p> <p>The 5 most common asyncio errors are:</p> <ol> <li>Trying to run coroutines by calling them.</li> <li>Not letting coroutines run in the event loop.</li> <li>Using the asyncio low-level API.</li> <li>Exiting the main coroutine too early.</li> <li>Assuming race conditions and deadlocks are not possible.</li> </ol> <p>Let\u2019s take a closer look at each in turn.</p> <p>\u672c\u8282\u63d0\u4f9b\u4e86\u5f00\u53d1\u4eba\u5458\u5728 Python \u4e2d\u4f7f\u7528 asyncio \u65f6\u9047\u5230\u7684\u5e38\u89c1\u9519\u8bef\u7684\u793a\u4f8b\u3002</p> <p>5 \u4e2a\u6700\u5e38\u89c1\u7684\u5f02\u6b65\u9519\u8bef\u662f\uff1a</p> <ol> <li>\u5c1d\u8bd5\u901a\u8fc7\u8c03\u7528\u534f\u7a0b\u6765\u8fd0\u884c\u5b83\u4eec\u3002</li> <li>\u4e0d\u8ba9\u534f\u7a0b\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u3002</li> <li>\u4f7f\u7528 asyncio \u4f4e\u7ea7 API\u3002</li> <li>\u8fc7\u65e9\u9000\u51fa\u4e3b\u534f\u7a0b\u3002</li> <li>\u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u5b58\u5728\u7684\u3002</li> </ol> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e00\u4e2a\u95ee\u9898\u3002</p>"},{"location":"asyncio_en/#221-\u9519\u8bef-1-\u5c1d\u8bd5\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u8fd0\u884c\u534f\u7a0b","title":"22.1 \u9519\u8bef 1: \u5c1d\u8bd5\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u8fd0\u884c\u534f\u7a0b","text":"<p>22.1 Error 1: Trying to Run Coroutines by Calling Them</p> EnglishChinese <p>The most common error encountered by beginners to asyncio is calling a coroutine like a function.</p> <p>For example, we can define a coroutine using the \u201casync def\u201d expression:</p> <pre><code># custom coroutine\nasync def custom_coro():\n    print('hi there')\n</code></pre> <p>The beginner will then attempt to call this coroutine like a function and expect the print message to be reported.</p> <p>For example:</p> <pre><code>...\n# error attempt at calling a coroutine like a function\ncustom_coro()\n</code></pre> <p>Calling a coroutine like a function will not execute the body of the coroutine.</p> <p>Instead, it will create a coroutine object.</p> <p>This object can then be awaited within the asyncio runtime, e.g. the event loop.</p> <p>We can start the event loop to run the coroutine using the asyncio.run() function.</p> <p>For example:</p> <pre><code>...\n# run a coroutine\nasyncio.run(custom_coro())\n</code></pre> <p>Alternatively, we can suspend the current coroutine and schedule the other coroutine using the \u201cawait\u201d expression.</p> <p>For example:</p> <pre><code>...\n# schedule a coroutine\nawait custom_coro()\n</code></pre> <p>You can learn more about running coroutines in the tutorial:</p> <ul> <li>How to Run an Asyncio Coroutine in Python</li> </ul> <p>asyncio \u521d\u5b66\u8005\u9047\u5230\u7684\u6700\u5e38\u89c1\u9519\u8bef\u662f\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201casync def\u201d\u8868\u8fbe\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff1a</p> <pre><code># \u81ea\u5b9a\u4e49\u534f\u7a0b\nasync def custom_coro():\n    print('hi there')\n</code></pre> <p>\u7136\u540e\uff0c\u521d\u5b66\u8005\u5c06\u5c1d\u8bd5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u8fd9\u4e2a\u534f\u7a0b\uff0c\u5e76\u671f\u671b\u62a5\u544a\u6253\u5370\u6d88\u606f\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5c1d\u8bd5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u65f6\u51fa\u9519\ncustom_coro()\n</code></pre> <p>\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u4e0d\u4f1a\u6267\u884c\u534f\u7a0b\u4e3b\u4f53\u3002</p> <p>\u76f8\u53cd\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u5728 asyncio \u8fd0\u884c\u65f6\u4e2d\u7b49\u5f85\u8be5\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u4e8b\u4ef6\u5faa\u73af\uff08Event Loop\uff09\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>asyncio.run()</code> \u51fd\u6570\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u6765\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(custom_coro())\n</code></pre> <p>\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u6302\u8d77\u5f53\u524d\u534f\u7a0b\u5e76\u4f7f\u7528\u201cawait\u201d\u8868\u8fbe\u5f0f\u8c03\u5ea6\u53e6\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8c03\u5ea6\u4e00\u4e2a\u534f\u7a0b\nawait custom_coro()\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u8fd0\u884c\u534f\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u8fd0\u884c Asyncio \u534f\u7a0b</li> </ul>"},{"location":"asyncio_en/#222-\u9519\u8bef-2-\u4e0d\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b","title":"22.2 \u9519\u8bef 2: \u4e0d\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b","text":"<p>22.2 Error 2: Not Letting Coroutines Run in the Event Loop</p> EnglishChinese <p>If a coroutine is not run, you will get a runtime warning as follows:</p> <pre><code>sys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>This will happen if you create a coroutine object but do not schedule it for execution within the asyncio event loop.</p> <p>For example, you may attempt to call a coroutine from a regular Python program:</p> <pre><code>...\n# attempt to call the coroutine\ncustom_coro()\n</code></pre> <p>This will not call the coroutine.</p> <p>Instead, it will create a coroutine object.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n</code></pre> <p>If you do not allow this coroutine to run, you will get a runtime error.</p> <p>You can let the coroutine run, as we saw in the previous section, by starting the asyncio event loop and passing it the coroutine object.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# run a coroutine\nasyncio.run(coro)\n</code></pre> <p>Or, on one line in a compound statement:</p> <pre><code>...\n# run a coroutine\nasyncio.run(custom_coro())\n</code></pre> <p>You can learn more about running coroutines in the tutorial:</p> <ul> <li>How to Run an Asyncio Coroutine in Python</li> </ul> <p>If you get this error within an asyncio program, it is because you have created a coroutine and have not scheduled it for execution.</p> <p>This can be achieved using the await expression.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# suspend and allow the other coroutine to run\nawait coro\n</code></pre> <p>Or, you can schedule it to run independently as a task.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# schedule the coro to run as a task interdependently\ntask = asyncio.create_task(coro)\n</code></pre> <p>You can learn more about creating tasks in the tutorial:</p> <ul> <li>How to Create an Asyncio Task in Python</li> </ul> <p>\u5982\u679c\u534f\u7a0b\u672a\u8fd0\u884c\uff0c\u60a8\u5c06\u6536\u5230\u5982\u4e0b\u8fd0\u884c\u65f6\u8b66\u544a\uff1a</p> <pre><code>sys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>\u5982\u679c\u60a8\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u4f46\u6ca1\u6709\u5b89\u6392\u5b83\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4ece\u5e38\u89c4 Python \u7a0b\u5e8f\u8c03\u7528\u534f\u7a0b\uff1a</p> <pre><code>...\n# \u5c1d\u8bd5\u8c03\u7528\u534f\u7a0b\ncustom_coro()\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u76f8\u53cd\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u5141\u8bb8\u8be5\u534f\u7a0b\u8fd0\u884c\uff0c\u60a8\u5c06\u6536\u5230\u8fd0\u884c\u65f6\u9519\u8bef\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u770b\u5230\u7684\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8 asyncio \u4e8b\u4ef6\u5faa\u73af\u5e76\u5411\u5176\u4f20\u9012\u534f\u7a0b\u5bf9\u8c61\u6765\u8ba9\u534f\u7a0b\u8fd0\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(coro)\n</code></pre> <p>\u6216\u8005\uff0c\u5728\u590d\u5408\u8bed\u53e5\u7684\u4e00\u884c\u4e2d\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(custom_coro())\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u8fd0\u884c\u534f\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u8fd0\u884c Asyncio \u534f\u7a0b</li> </ul> <p>\u5982\u679c\u60a8\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6536\u5230\u6b64\u9519\u8bef\uff0c\u90a3\u662f\u56e0\u4e3a\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u534f\u7a0b\u4f46\u5c1a\u672a\u5b89\u6392\u5176\u6267\u884c\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 await \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u6302\u8d77\u5e76\u5141\u8bb8\u5176\u4ed6\u534f\u7a0b\u8fd0\u884c\nawait coro\n</code></pre> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5b89\u6392\u5b83\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u8fd0\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u5b89\u6392 coro \u4f5c\u4e3a\u4efb\u52a1\u76f8\u4e92\u4f9d\u8d56\u5730\u8fd0\u884c\ntask = asyncio.create_task(coro)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u521b\u5efa\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efaAsyncio\u4efb\u52a1</li> </ul>"},{"location":"asyncio_en/#223-\u9519\u8bef-3-\u4f7f\u7528\u4f4e\u7ea7\u7684-asyncio-api","title":"22.3 \u9519\u8bef 3: \u4f7f\u7528\u4f4e\u7ea7\u7684 Asyncio API","text":"<p>22.3 Error 3: Using the Low-Level Asyncio API</p> EnglishChinese <p>A big problem with beginners is that they use the wrong asyncio API.</p> <p>This is common for a number of reasons.</p> <ul> <li>The API has changed a lot with recent versions of Python.</li> <li>The API docs page makes things confusing, showing both APIs.</li> <li>Examples elsewhere on the web mix up using the different APIs.</li> </ul> <p>Using the wrong API makes things more verbose (e.g. more code), more difficult, and way less understandable.</p> <p>Asyncio offers two APIs.</p> <ol> <li>High-level API for application developers (us)</li> <li>Low-level API for framework and library developers (not us)</li> </ol> <p>The lower-level API provides the foundation for the high-level API and includes the internals of the event loop, transport protocols, policies, and more.</p> <p>\u2026 there are low-level APIs for library and framework developers</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O We should almost always stick to the high-level API.</p> <p>We absolutely must stick to the high-level API when getting started.</p> <p>We may dip into the low-level API to achieve specific outcomes on occasion.</p> <p>If you start getting a handle on the event loop or use a \u201cloop\u201d variable to do things, you are doing it wrong.</p> <p>I am not saying don\u2019t learn the low-level API.</p> <p>Go for it. It\u2019s great.</p> <p>Just don\u2019t start there.</p> <p>Drive asyncio via the high-level API for a while. Develop some programs. Get comfortable with asynchronous programming and running coroutines at will.</p> <p>Then later, dip in and have a look around.</p> <p>\u521d\u5b66\u8005\u7684\u4e00\u4e2a\u5927\u95ee\u9898\u662f\u4ed6\u4eec\u4f7f\u7528\u4e86\u9519\u8bef\u7684 asyncio API\u3002</p> <p>\u7531\u4e8e\u591a\u79cd\u539f\u56e0\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002</p> <ul> <li>API \u5728\u6700\u65b0\u7248\u672c\u7684 Python \u4e2d\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002</li> <li>API \u6587\u6863\u9875\u9762\u663e\u793a\u4e86\u8fd9\u4e24\u4e2a API\uff0c\u8fd9\u8ba9\u4e8b\u60c5\u53d8\u5f97\u6df7\u4e71\u3002</li> <li>\u7f51\u7edc\u4e0a\u5176\u4ed6\u5730\u65b9\u7684\u793a\u4f8b\u6df7\u5408\u4f7f\u7528\u4e0d\u540c\u7684 API\u3002</li> </ul> <p>\u4f7f\u7528\u9519\u8bef\u7684 API \u4f1a\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u5197\u957f\uff08\u4f8b\u5982\u66f4\u591a\u4ee3\u7801\uff09\u3001\u66f4\u52a0\u56f0\u96be\u5e76\u4e14\u66f4\u96be\u4ee5\u7406\u89e3\u3002</p> <p>Asyncio \u63d0\u4f9b\u4e24\u4e2a API.</p> <ol> <li>\u9762\u5411\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff08\u6211\u4eec\uff09\u7684\u9ad8\u7ea7 API</li> <li>\u9762\u5411\u6846\u67b6\u548c\u5e93\u5f00\u53d1\u4eba\u5458\uff08\u4e0d\u662f\u6211\u4eec\uff09\u7684\u4f4e\u7ea7 API</li> </ol> <p>\u8f83\u4f4e\u7ea7\u522b\u7684 API \u4e3a\u9ad8\u7ea7 API \u63d0\u4f9b\u57fa\u7840\uff0c\u5305\u62ec\u4e8b\u4ef6\u5faa\u73af\u3001\u4f20\u8f93\u534f\u8bae\u3001\u7b56\u7565\u7b49\u7684\u5185\u90e8\u7ed3\u6784\u3002</p> <p>\u2026 \u6709\u4f9b\u5e93\u548c\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u7684\u4f4e\u7ea7 API</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>\u6211\u4eec\u51e0\u4e4e\u5e94\u8be5\u59cb\u7ec8\u575a\u6301\u4f7f\u7528\u9ad8\u7ea7 API\u3002</p> <p>\u5f00\u59cb\u65f6\u6211\u4eec\u7edd\u5bf9\u5fc5\u987b\u575a\u6301\u4f7f\u7528\u9ad8\u7ea7 API\u3002</p> <p>\u6709\u65f6\u6211\u4eec\u53ef\u80fd\u4f1a\u5229\u7528\u4f4e\u7ea7 API \u6765\u5b9e\u73b0\u7279\u5b9a\u7684\u7ed3\u679c\u3002</p> <p>\u5982\u679c\u60a8\u5f00\u59cb\u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u7684\u53e5\u67c4\u6216\u4f7f\u7528\u201cloop\u201d\u53d8\u91cf\u6765\u6267\u884c\u64cd\u4f5c\uff0c\u90a3\u4e48\u60a8\u5c31\u505a\u9519\u4e86\u3002</p> <p>\u6211\u5e76\u4e0d\u662f\u8bf4\u4e0d\u8981\u5b66\u4e60\u4f4e\u7ea7 API\u3002</p> <p>\u5927\u80c6\u8bd5\u8bd5\u5427\u3002 \u8fd9\u5f88\u68d2\u3002</p> <p>\u53ea\u662f\u4e0d\u8981\u4ece\u90a3\u91cc\u5f00\u59cb\u3002</p> <p>\u901a\u8fc7\u9ad8\u7ea7 API \u9a71\u52a8 asyncio \u4e00\u6bb5\u65f6\u95f4\u3002 \u5f00\u53d1\u4e00\u4e9b\u7a0b\u5e8f\u3002 \u719f\u6089\u5f02\u6b65\u7f16\u7a0b\u5e76\u968f\u610f\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u7136\u540e\uff0c\u6df1\u5165\u770b\u770b\u76f8\u5173\u6280\u672f\u7ec6\u8282\u3002</p>"},{"location":"asyncio_en/#224-\u9519\u8bef-4-\u9000\u51fa\u4e3b\u534f\u7a0b\u592a\u65e9","title":"22.4 \u9519\u8bef 4: \u9000\u51fa\u4e3b\u534f\u7a0b\u592a\u65e9","text":"<p>22.4 Error 4: Exiting the Main Coroutine Too Early</p> EnglishChinese <p>A major point of confusion in asyncio programs is not giving tasks enough time to complete.</p> <p>We can schedule many coroutines to run independently within an asyncio program via the asyncio.create_task() method.</p> <p>The main coroutine, the entry point for the asyncio program, can then carry on with other activities.</p> <p>If the main coroutine exits, then the asyncio program will terminate.</p> <p>The program will terminate even if there are one or many coroutines running independently as tasks.</p> <p>This can catch you off guard.</p> <p>You may issue many tasks and then allow the main coroutine to resume, expecting all issued tasks to complete in their own time.</p> <p>Instead, if the main coroutine has nothing else to do, it should wait on the remaining tasks.</p> <p>This can be achieved by first getting a set of all running tasks via the asyncio.all_tasks() function, removing itself from this set, then waiting on the remaining tasks via the asyncio.wait() function.</p> <p>For example:</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre> <p>\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u4e3b\u8981\u6df7\u4e71\u70b9\u662f\u6ca1\u6709\u7ed9\u4efb\u52a1\u8db3\u591f\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.create_task() \u65b9\u6cd5\u5b89\u6392\u8bb8\u591a\u534f\u7a0b\u5728 asyncio \u7a0b\u5e8f\u4e2d\u72ec\u7acb\u8fd0\u884c\u3002</p> <p>\u4e3b\u534f\u7a0b\uff08asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff09\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u6d3b\u52a8\u3002</p> <p>\u5982\u679c\u4e3b\u534f\u7a0b\u9000\u51fa\uff0c\u5219 asyncio \u7a0b\u5e8f\u5c06\u7ec8\u6b62\u3002</p> <p>\u5373\u4f7f\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4e5f\u4f1a\u7ec8\u6b62\u3002</p> <p>\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4f60\u63aa\u624b\u4e0d\u53ca\u3002</p> <p>\u60a8\u53ef\u4ee5\u53d1\u51fa\u8bb8\u591a\u4efb\u52a1\uff0c\u7136\u540e\u5141\u8bb8\u4e3b\u534f\u7a0b\u6062\u590d\uff0c\u5e76\u671f\u671b\u6240\u6709\u53d1\u51fa\u7684\u4efb\u52a1\u90fd\u80fd\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002</p> <p>\u76f8\u53cd\uff0c\u5982\u679c\u4e3b\u534f\u7a0b\u6ca1\u6709\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff0c\u5b83\u5e94\u8be5\u7b49\u5f85\u5269\u4f59\u7684\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u901a\u8fc7 asyncio.all_tasks() \u51fd\u6570\u83b7\u53d6\u4e00\u7ec4\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5c06\u5176\u81ea\u8eab\u4ece\u8be5\u7ec4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u8fc7 asyncio.wait() \u51fd\u6570\u7b49\u5f85\u5269\u4f59\u4efb\u52a1\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n# \u6682\u505c\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre>"},{"location":"asyncio_en/#225-\u9519\u8bef-5-\u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u53ef\u80fd\u7684","title":"22.5 \u9519\u8bef 5: \u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u53ef\u80fd\u7684","text":"<p>22.5 Error 5: Assuming Race Conditions and Deadlocks are Impossible</p> EnglishChinese <p>Concurrent programming has the hazard of concurrency-specific failure modes.</p> <p>This includes problems such as race conditions and deadlocks.</p> <p>A race condition involves two or more units of concurrency executing the same critical section at the same time and leaving a resource or data in an inconsistent or unexpected state. This can lead to data corruption and data loss.</p> <p>A deadlock is when a unit of concurrency waits for a condition that can never occur, such as for a resource to become available.</p> <p>Many Python developers believe these problems are not possible with coroutines in asyncio.</p> <p>The reason being that only one coroutine can run within the event loop at any one time.</p> <p>It is true that only one coroutine can run at a time.</p> <p>The problem is, coroutines can suspend and resume and may do so while using a shared resource or shared variable.</p> <p>Without protecting critical sections, race conditions can occur in asyncio programs.</p> <p>Without careful management of synchronization primitives, deadlocks can occur</p> <p>As such, it is important that asyncio programs are created ensuring coroutine-safety, a concept similar to thread-safety and process-safety, applied to coroutines.</p> <p>\u5e76\u53d1\u7f16\u7a0b\u5b58\u5728\u5e76\u53d1\u7279\u5b9a\u6545\u969c\u6a21\u5f0f\u7684\u5371\u9669\u3002</p> <p>\u8fd9\u5305\u62ec\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u7b49\u95ee\u9898\u3002</p> <p>\u7ade\u4e89\u6761\u4ef6\u6d89\u53ca\u4e24\u4e2a\u6216\u591a\u4e2a\u5e76\u53d1\u5355\u5143\u540c\u65f6\u6267\u884c\u540c\u4e00\u5173\u952e\u90e8\u5206\uff0c\u5e76\u4f7f\u8d44\u6e90\u6216\u6570\u636e\u5904\u4e8e\u4e0d\u4e00\u81f4\u6216\u610f\u5916\u72b6\u6001\u3002 \u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u635f\u574f\u548c\u6570\u636e\u4e22\u5931\u3002</p> <p>\u6b7b\u9501\u662f\u6307\u5e76\u53d1\u5355\u5143\u7b49\u5f85\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u8d44\u6e90\u53ef\u7528\u3002</p> <p>\u8bb8\u591a Python \u5f00\u53d1\u4eba\u5458\u8ba4\u4e3a asyncio \u4e2d\u7684\u534f\u7a0b\u4e0d\u53ef\u80fd\u51fa\u73b0\u8fd9\u4e9b\u95ee\u9898\u3002</p> <p>\u539f\u56e0\u662f\u4efb\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u53ef\u4ee5\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u8fd0\u884c\u3002</p> <p>\u786e\u5b9e\uff0c\u4e00\u6b21\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u95ee\u9898\u662f\uff0c\u534f\u7a0b\u53ef\u4ee5\u6302\u8d77\u548c\u6062\u590d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f7f\u7528\u5171\u4eab\u8d44\u6e90\u6216\u5171\u4eab\u53d8\u91cf\u65f6\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u5982\u679c\u4e0d\u4fdd\u62a4\u5173\u952e\u90e8\u5206\uff0c\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u7ade\u4e89\u6761\u4ef6\u3002</p> <p>\u5982\u679c\u4e0d\u4ed4\u7ec6\u7ba1\u7406\u540c\u6b65\u539f\u8bed\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u6b7b\u9501</p> <p>\u56e0\u6b64\uff0c\u521b\u5efa asyncio \u7a0b\u5e8f\u4ee5\u786e\u4fdd\u534f\u7a0b\u5b89\u5168\uff08\u7c7b\u4f3c\u4e8e\u7ebf\u7a0b\u5b89\u5168\u548c\u8fdb\u7a0b\u5b89\u5168\u7684\u6982\u5ff5\uff09\u975e\u5e38\u91cd\u8981\uff0c\u9002\u7528\u4e8e\u534f\u7a0b\u3002</p>"},{"location":"asyncio_en/#23-python-asyncio-\u5e38\u89c1\u95ee\u9898","title":"23. Python Asyncio \u5e38\u89c1\u95ee\u9898","text":"<p>23. Python Asyncio Common Questions</p> EnglishChinese <p>This section answers common questions asked by developers when using asyncio in Python.</p> <p>Do you have a question about asyncio?</p> <p>Ask your question in the comments below and I will do my best to answer it and perhaps add it to this list of questions.</p> <p>\u672c\u8282\u56de\u7b54\u5f00\u53d1\u4eba\u5458\u5728 Python \u4e2d\u4f7f\u7528 asyncio \u65f6\u63d0\u51fa\u7684\u5e38\u89c1\u95ee\u9898\u3002</p> <p>\u60a8\u5bf9 asyncio \u6709\u7591\u95ee\u5417?</p> <p>\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u63d0\u51fa\u60a8\u7684\u95ee\u9898\uff0c\u6211\u4f1a\u5c3d\u529b\u56de\u7b54\u5b83\uff0c\u4e5f\u8bb8\u4f1a\u5c06\u5176\u6dfb\u52a0\u5230\u8fd9\u4e2a\u95ee\u9898\u5217\u8868\u4e2d\u3002</p>"},{"location":"asyncio_en/#231-\u5982\u4f55\u505c\u6b62\u4efb\u52a1","title":"23.1 \u5982\u4f55\u505c\u6b62\u4efb\u52a1\uff1f","text":"<p>23.1 How to Stop a Task?</p> EnglishChinese <p>We can cancel a task via the cancel() method on an asyncio.Task object.</p> <p>The cancel() method returns True if the task was canceled, or False otherwise.</p> <p>For example:</p> <pre><code>...\n# cancel the task\nwas_cancelled = task.cancel()\n</code></pre> <p>If the task is already done, it cannot be canceled and the cancel() method will return False and the task will not have the status of canceled.</p> <p>The next time the task is given an opportunity to run, it will raise a CancelledError exception.</p> <p>If the CancelledError exception is not handled within the wrapped coroutine, the task will be canceled.</p> <p>Otherwise, if the CancelledError exception is handled within the wrapped coroutine, the task will not be canceled.</p> <p>The cancel() method can also take a message argument which will be used in the content of the CancelledError.</p> <p>We can explore how to cancel a running task.</p> <p>In this example, we define a task coroutine that reports a message and then blocks for a moment.</p> <p>We then define the main coroutine that is used as the entry point into the asyncio program. It reports a message, creates and schedules the task, then waits a moment.</p> <p>The main coroutine then resumes and cancels the task while it is running. It waits a moment more to allow the task to respond to the request to cancel. The main coroutine then reports whether the request to cancel the task was successful.</p> <p>The task is canceled and is then done.</p> <p>The main coroutine then reports whether the status of the task is canceled before closing the program.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of canceling a running task\nimport asyncio\n\n# define a coroutine for a task\nasync def task_coroutine():\n    # report a message\n    print('executing the task')\n    # block for a moment\n    await asyncio.sleep(1)\n\n# custom coroutine\nasync def main():\n    # report a message\n    print('main coroutine started')\n    # create and schedule the task\n    task = asyncio.create_task(task_coroutine())\n    # wait a moment\n    await asyncio.sleep(0.1)\n    # cancel the task\n    was_cancelled = task.cancel()\n    # report whether the cancel request was successful\n    print(f'was canceled: {was_cancelled}')\n    # wait a moment\n    await asyncio.sleep(0.1)\n    # check the status of the task\n    print(f'canceled: {task.cancelled()}')\n    # report a final message\n    print('main coroutine done')\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example starts the asyncio event loop and executes the main() coroutine.</p> <p>The main() coroutine reports a message, then creates and schedules the task coroutine.</p> <p>It then suspends and awaits a moment to allow the task coroutine to begin running.</p> <p>The task runs, reports a message and sleeps for a while.</p> <p>The main() coroutine resumes and cancels the task. It reports that the request to cancel the task was successful.</p> <p>It then sleeps for a moment to allow the task to respond to the request to be canceled.</p> <p>The task_coroutine() resumes and a CancelledError exception is raised that causes the task to fail and be done.</p> <p>The main() coroutine resumes and reports whether the task has the status of canceled. In this case, it does.</p> <p>This example highlights the normal case of canceling a running task.</p> <pre><code>main coroutine started\nexecuting the task\nwas canceled: True\ncanceled: True\nmain coroutine done\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.Task \u5bf9\u8c61\u4e0a\u7684 cancel() \u65b9\u6cd5\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219 cancel() \u65b9\u6cd5\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u53d6\u6d88\u4efb\u52a1\nwas_cancelled = task.cancel()\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\uff0c\u5219\u65e0\u6cd5\u53d6\u6d88\uff0ccancel() \u65b9\u6cd5\u5c06\u8fd4\u56de <code>False</code>\uff0c\u4efb\u52a1\u4e0d\u4f1a\u5904\u4e8e\u5df2\u53d6\u6d88\u72b6\u6001\u3002</p> <p>\u4e0b\u6b21\u4efb\u52a1\u6709\u673a\u4f1a\u8fd0\u884c\u65f6\uff0c\u5b83\u5c06\u5f15\u53d1 CancelledError \u5f02\u5e38\u3002</p> <p>\u5982\u679c\u672a\u5728\u5305\u88c5\u7684\u534f\u7a0b\u5185\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u5426\u5219\uff0c\u5982\u679c\u5728\u5305\u88c5\u7684\u534f\u7a0b\u5185\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u4e0d\u4f1a\u88ab\u53d6\u6d88\u3002</p> <p>cancel() \u65b9\u6cd5\u540c\u6837\u8fd8\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6d88\u606f\u53c2\u6570\uff0c\u4f5c\u4e3a CancelledError \u5f02\u5e38\u7684\u5185\u5bb9\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u8ba8\u5982\u4f55\u53d6\u6d88\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4efb\u52a1\u534f\u7a0b\uff0c\u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u963b\u585e\u4e00\u4f1a\u513f\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u7528\u4f5c asyncio \u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u4e3b\u534f\u7a0b\u3002 \u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u521b\u5efa\u5e76\u5b89\u6392\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u7247\u523b\u3002</p> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u5728\u4efb\u52a1\u8fd0\u884c\u65f6\u6062\u590d\u5e76\u53d6\u6d88\u4efb\u52a1\u3002 \u5b83\u4f1a\u518d\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ee5\u4fbf\u4efb\u52a1\u54cd\u5e94\u53d6\u6d88\u8bf7\u6c42\u3002 \u7136\u540e\u4e3b\u534f\u7a0b\u62a5\u544a\u53d6\u6d88\u4efb\u52a1\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002</p> <p>\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u7136\u540e\u5b8c\u6210\u3002</p> <p>\u7136\u540e\u4e3b\u534f\u7a0b\u5728\u5173\u95ed\u7a0b\u5e8f\u4e4b\u524d\u62a5\u544a\u4efb\u52a1\u7684\u72b6\u6001\u662f\u5426\u5df2\u53d6\u6d88\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u53d6\u6d88\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u4f8b\u5b50\nimport asyncio\n\n# \u4e3a\u4efb\u52a1\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def task_coroutine():\n    # \u62a5\u544a\u4e00\u6761\u6d88\u606f\n    print('executing the task')\n    # \u963b\u585e\u7247\u523b\n    await asyncio.sleep(1)\n\n# \u81ea\u5b9a\u4e49\u534f\u7a0b\nasync def main():\n    # \u62a5\u544a\u4e00\u6761\u6d88\u606f\n    print('main coroutine started')\n    # \u521b\u5efa\u5e76\u8c03\u5ea6\u4efb\u52a1\n    task = asyncio.create_task(task_coroutine())\n    # \u7b49\u5f85\u4e00\u4e0b\n    await asyncio.sleep(0.1)\n    # \u53d6\u6d88\u4efb\u52a1\n    was_cancelled = task.cancel()\n    # \u62a5\u544a\u53d6\u6d88\u8bf7\u6c42\u662f\u5426\u6210\u529f\n    print(f'was canceled: {was_cancelled}')\n    # \u7b49\u5f85\u4e00\u4e0b\n    await asyncio.sleep(0.1)\n    # \u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'canceled: {task.cancelled()}')\n    # \u62a5\u544a\u6700\u540e\u7684\u6d88\u606f\n    print('main coroutine done')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u5c06\u542f\u52a8 asyncio \u4e8b\u4ef6\u5faa\u73af\u5e76\u6267\u884c main() \u534f\u7a0b\u3002</p> <p>main() \u534f\u7a0b\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u521b\u5efa\u5e76\u8c03\u5ea6\u4efb\u52a1\u534f\u7a0b\u3002</p> <p>\u7136\u540e\u5b83\u4f1a\u6302\u8d77\u5e76\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u4ee5\u5141\u8bb8\u4efb\u52a1\u534f\u7a0b\u5f00\u59cb\u8fd0\u884c\u3002</p> <p>\u8be5\u4efb\u52a1\u8fd0\u884c\uff0c\u62a5\u544a\u6d88\u606f\u5e76\u4f11\u7720\u4e00\u6bb5\u65f6\u95f4\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u53d6\u6d88\u4efb\u52a1\u3002 \u5b83\u62a5\u544a\u53d6\u6d88\u4efb\u52a1\u7684\u8bf7\u6c42\u5df2\u6210\u529f\u3002</p> <p>\u7136\u540e\u5b83\u4f1a\u4f11\u7720\u4e00\u4f1a\u513f\uff0c\u4ee5\u5141\u8bb8\u4efb\u52a1\u54cd\u5e94\u8981\u53d6\u6d88\u7684\u8bf7\u6c42\u3002</p> <p>task_coroutine() \u6062\u590d\u5e76\u5f15\u53d1 CancelledError \u5f02\u5e38\uff0c\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u5e76\u5b8c\u6210\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u4efb\u52a1\u662f\u5426\u5904\u4e8e\u5df2\u53d6\u6d88\u72b6\u6001\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u786e\u5b9e\u5982\u6b64\u3002</p> <p>\u6b64\u793a\u4f8b\u91cd\u70b9\u4ecb\u7ecd\u4e86\u53d6\u6d88\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u6b63\u5e38\u60c5\u51b5\u3002</p> <pre><code>main coroutine started\nexecuting the task\nwas canceled: True\ncanceled: True\nmain coroutine done\n</code></pre>"},{"location":"asyncio_en/#232-\u5982\u4f55\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210","title":"23.2 \u5982\u4f55\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\uff1f","text":"<p>23.2 How to Wait for a Task To Finish?</p> EnglishChinese <p>We can wait for a task to finish by awaiting the asyncio.Task object directly.</p> <p>For example:</p> <pre><code>...\n# wait for the task to finish\nawait task\n</code></pre> <p>We may create and wait for the task in a single line.</p> <p>For example:</p> <pre><code>...\n# create and wait for the task to finish\nawait asyncio.create_task(custom_coro())\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u7b49\u5f85 asyncio.Task \u5bf9\u8c61\u6765\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait task\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u884c\u4e2d\u521b\u5efa\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait asyncio.create_task(custom_coro())\n</code></pre>"},{"location":"asyncio_en/#233-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c","title":"23.3 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\uff1f","text":"<p>23.3 How to Get a Return Value from a Task?</p> EnglishChinese <p>We may need to return values from coroutines to the caller.</p> <p>We can retrieve a return value from a coroutine by awaiting it.</p> <p>It assumes that the other coroutine being awaited returns a value.</p> <p>For example:</p> <pre><code># coroutine that returns a value\nasync def other_coro():\n    return 100\n</code></pre> <p>Awaiting the other coroutine will suspend the calling coroutine and schedule the other coroutine for execution. Once the other coroutine has been completed, the calling coroutine will resume. The return value will be passed from the other coroutine to the caller.</p> <p>For example:</p> <pre><code>...\n# execute coroutine and retrieve return value\nvalue = await other_coro()\n</code></pre> <p>A coroutine can be wrapped in an asyncio.Task object.</p> <p>This is helpful for independently executing the coroutine without having the current coroutine await it.</p> <p>This can be achieved using the asyncio.create_task() function.</p> <p>For example:</p> <pre><code>...\n# wrap coroutine in a task and schedule it for execution\ntask = asyncio.create_task(other_coro())\n</code></pre> <p>You can learn more about how to create tasks in the tutorial:</p> <ul> <li>How to Create an Asyncio Task in Python</li> </ul> <p>There are two ways to retrieve the return value from an asyncio.Task, they are:</p> <ol> <li>Await the task.</li> <li>Call the result() method.</li> </ol> <p>We can await the task to retrieve the return value.</p> <p>If the task is scheduled or running, then the caller will suspend until the task is complete and the return value will be provided.</p> <p>If the task is completed, the return value will be provided immediately.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = await task\n</code></pre> <p>Unlike a coroutine, we can await a task more than once without raising an error.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = await task\n# get the return value from a task\nvalue = await task\n</code></pre> <p>We can also get the return value from the task by calling the result() method on the asyncio.Task object.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = task.result()\n</code></pre> <p>This requires that the task is done. If not, an InvalidStateError exception will be raised.</p> <p>If the task was canceled a CancelledError exception will be raised.</p> <p>You can learn more about getting the result from tasks in the tutorial:</p> <ul> <li>How to Get Asyncio Task Results</li> </ul> <p>\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5c06\u503c\u4ece\u534f\u7a0b\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85\u534f\u7a0b\u6765\u68c0\u7d22\u8fd4\u56de\u503c\u3002</p> <p>\u5b83\u5047\u8bbe\u6b63\u5728\u7b49\u5f85\u7684\u53e6\u4e00\u4e2a\u534f\u7a0b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u6709\u8fd4\u56de\u503c\u7684\u534f\u7a0b\nasync def other_coro():\n    return 100\n</code></pre> <p>\u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\u5c06\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u5e76\u5b89\u6392\u53e6\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u3002 \u4e00\u65e6\u5176\u4ed6\u534f\u7a0b\u5b8c\u6210\uff0c\u8c03\u7528\u534f\u7a0b\u5c06\u6062\u590d\u3002 \u8fd4\u56de\u503c\u5c06\u4ece\u53e6\u4e00\u4e2a\u534f\u7a0b\u4f20\u9012\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6267\u884c\u534f\u7a0b\u5e76\u83b7\u53d6\u8fd4\u56de\u503c\nvalue = await other_coro()\n</code></pre> <p>\u534f\u7a0b\u53ef\u4ee5\u5305\u88c5\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u72ec\u7acb\u6267\u884c\u534f\u7a0b\u5f88\u6709\u5e2e\u52a9\uff0c\u800c\u65e0\u9700\u5f53\u524d\u534f\u7a0b\u7b49\u5f85\u5b83\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u534f\u7a0b\u5305\u88c5\u5728\u4efb\u52a1\u4e2d\u5e76\u5b89\u6392\u5176\u6267\u884c\ntask = asyncio.create_task(other_coro())\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u521b\u5efa\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5728Python\u4e2d\u5982\u4f55\u521b\u5efa\u4e00\u4e2aAsyncio\u4efb\u52a1</li> </ul> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ece asyncio.Task \u4e2d\u68c0\u7d22\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u662f\uff1a</p> <ol> <li>\u7b49\u5f85\u4efb\u52a1.</li> <li>\u8c03\u7528 result() \u65b9\u6cd5.</li> </ol> <p>\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u4efb\u52a1\u6765\u68c0\u7d22\u8fd4\u56de\u503c\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u5df2\u8c03\u5ea6\u6216\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u8c03\u7528\u8005\u5c06\u6302\u8d77\uff0c\u76f4\u5230\u4efb\u52a1\u5b8c\u6210\u5e76\u63d0\u4f9b\u8fd4\u56de\u503c\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u5b8c\u6210\uff0c\u5c06\u7acb\u5373\u63d0\u4f9b\u8fd4\u56de\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n</code></pre> <p>\u4e0e\u534f\u7a0b\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6b21\u7b49\u5f85\u4efb\u52a1\u800c\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.Task \u5bf9\u8c61\u4e0a\u7684 result() \u65b9\u6cd5\u6765\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = task.result()\n</code></pre> <p>\u8fd9\u5c31\u8981\u6c42\u4efb\u52a1\u5b8c\u6210\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5c06\u5f15\u53d1 InvalidStateError \u5f02\u5e38\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u4f1a\u5f15\u53d1 CancelledError \u5f02\u5e38\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e86\u89e3\u6709\u5173\u4ece\u6559\u7a0b\u4e2d\u7684\u4efb\u52a1\u83b7\u53d6\u7ed3\u679c\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u83b7\u53d6 Asyncio \u4efb\u52a1\u7ed3\u679c</li> </ul>"},{"location":"asyncio_en/#234-\u5982\u4f55\u5728\u540e\u53f0\u8fd0\u884c\u4efb\u52a1","title":"23.4 \u5982\u4f55\u5728\u540e\u53f0\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>23.4 How to Run a Task in the Background?</p> EnglishChinese <p>We can run a coroutine in the background by wrapping it in an asyncio.Task object.</p> <p>This can be achieved by calling the asyncio.create_task() function and passing it the coroutine.</p> <p>The coroutine will be wrapped in a Task object and will be scheduled for execution. The task object will be returned and the caller will not suspend.</p> <p>For example:</p> <pre><code>...\n# schedule the task for execution\ntask = asyncio.create_task(other_coroutine())\n</code></pre> <p>The task will not begin executing until at least the current coroutine is suspended, for any reason.</p> <p>We can help things along by suspending for a moment to allow the task to start running.</p> <p>This can be achieved by sleeping for zero seconds.</p> <p>For example:</p> <pre><code>...\n# suspend for a moment to allow the task to start running\nawait asyncio.sleep(0)\n</code></pre> <p>This will suspend the caller only for a brief moment and allow the ask an opportunity to run.</p> <p>This is not required as the caller may suspend at some future time or terminate as part of normal execution.</p> <p>We may also await the task directly once the caller has run out of things to do.</p> <p>For example:</p> <pre><code>...\n# wait for the task to complete\nawait task\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u534f\u7a0b\u5305\u88c5\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u6765\u5728\u540e\u53f0\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.create_task() \u51fd\u6570\u5e76\u5411\u5176\u4f20\u9012\u534f\u7a0b\u6765\u5b9e\u73b0\u3002</p> <p>\u534f\u7a0b\u5c06\u88ab\u5305\u88c5\u5728 Task \u5bf9\u8c61\u4e2d\u5e76\u88ab\u5b89\u6392\u6267\u884c\u3002 \u4efb\u52a1\u5bf9\u8c61\u5c06\u88ab\u8fd4\u56de\uff0c\u5e76\u4e14\u8c03\u7528\u8005\u4e0d\u4f1a\u6302\u8d77\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8c03\u5ea6\u4efb\u52a1\u6267\u884c\ntask = asyncio.create_task(other_coroutine())\n</code></pre> <p>\u81f3\u5c11\u5728\u5f53\u524d\u534f\u7a0b\u51fa\u4e8e\u4efb\u4f55\u539f\u56e0\u88ab\u6302\u8d77\u4e4b\u524d\uff0c\u8be5\u4efb\u52a1\u4e0d\u4f1a\u5f00\u59cb\u6267\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6682\u505c\u7247\u523b\u4ee5\u5141\u8bb8\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\u6765\u5e2e\u52a9\u5b8c\u6210\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f11\u7720\u96f6\u79d2\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6682\u505c\u7247\u523b\u4ee5\u5141\u8bb8\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\nawait asyncio.sleep(0)\n</code></pre> <p>\u8fd9\u53ea\u4f1a\u5c06\u8c03\u7528\u8005\u6682\u505c\u4e00\u5c0f\u4f1a\u513f\uff0c\u5e76\u5141\u8bb8\u6709\u673a\u4f1a\u8fd0\u884c\u3002</p> <p>\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u5728\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u6302\u8d77\u6216\u4f5c\u4e3a\u6b63\u5e38\u6267\u884c\u7684\u4e00\u90e8\u5206\u7ec8\u6b62\u3002</p> <p>\u4e00\u65e6\u8c03\u7528\u8005\u6ca1\u6709\u4e8b\u60c5\u53ef\u505a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7b49\u5f85\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait task\n</code></pre>"},{"location":"asyncio_en/#235-\u5982\u4f55\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1","title":"23.5 \u5982\u4f55\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1\uff1f","text":"<p>23.5 How to Wait for All Background Tasks?</p> EnglishChinese <p>We can wait for all independent tasks in an asyncio program.</p> <p>This can be achieved by first getting a set of all currently running tasks via the asyncio.all_tasks() function.</p> <p>For example:</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n</code></pre> <p>This will return a set that contains one asyncio.Task object for each task that is currently running, including the main() coroutine.</p> <p>We cannot wait on this set directly, as it will block forever as it includes the task that is the current task.</p> <p>Therefore we can get the asyncio.Task object for the currently running task and remove it from the set.</p> <p>This can be achieved by first calling the asyncio.current_task() method to get the task for the current coroutine and then remove it from the set via the remove() method.</p> <p>For example:</p> <pre><code>...\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n</code></pre> <p>Finally, we can wait on the set of remaining tasks.</p> <p>This will suspend the caller until all tasks in the set are complete.</p> <p>For example:</p> <pre><code>...\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre> <p>Tying this together, the snippet below added to the end of the main() coroutine will wait for all background tasks to complete.</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85 asyncio \u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u72ec\u7acb\u4efb\u52a1\u3002</p> <p>\u9996\u5148\u53ef\u4ee5\u901a\u8fc7 asyncio.all_tasks() \u51fd\u6570\u83b7\u53d6\u4e00\u7ec4\u6240\u6709\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n</code></pre> <p>\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u6bcf\u4e2a\u4efb\u52a1\u7684\u4e00\u4e2a asyncio.Task \u5bf9\u8c61\uff0c\u5305\u62ec main() \u534f\u7a0b\u3002</p> <p>\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7b49\u5f85\u8fd9\u4e2a\u96c6\u5408\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6c38\u8fdc\u963b\u585e\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5f53\u524d\u4efb\u52a1\u7684\u4efb\u52a1\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684 asyncio.Task \u5bf9\u8c61\u5e76\u5c06\u5176\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u3002</p> <p>\u8fd9\u9996\u5148\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.current_task() \u65b9\u6cd5\u6765\u83b7\u53d6\u5f53\u524d\u534f\u7a0b\u7684\u4efb\u52a1\uff0c\u7136\u540e\u901a\u8fc7 remove() \u65b9\u6cd5\u5c06\u5176\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u5269\u4f59\u7684\u4efb\u52a1\u96c6\u3002</p> <p>\u8fd9\u5c06\u6302\u8d77\u8c03\u7528\u8005\uff0c\u76f4\u5230\u8be5\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6302\u8d77\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u6dfb\u52a0\u5230 main() \u534f\u7a0b\u672b\u5c3e\u7684\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1\u5b8c\u6210\u3002</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n# \u6302\u8d77\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre>"},{"location":"asyncio_en/#236-\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u662f\u5426\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa","title":"23.6 \u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u662f\u5426\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff1f","text":"<p>23.6 Does a Running Task Stop the Event Loop from Exiting?</p> EnglishChinese <p>No.</p> <p>A task that is scheduled and run independently will not stop the event loop from exiting.</p> <p>If your main coroutine has no other activities to complete and there are independent tasks running in the background, you should retrieve the running tasks and wait on them</p> <p>The previous question/answer shows exactly how to do this.</p> <p>\u4e0d\u3002</p> <p>\u72ec\u7acb\u8c03\u5ea6\u548c\u8fd0\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\u3002</p> <p>\u5982\u679c\u60a8\u7684\u4e3b\u534f\u7a0b\u6ca1\u6709\u5176\u4ed6\u6d3b\u52a8\u9700\u8981\u5b8c\u6210\uff0c\u5e76\u4e14\u6709\u72ec\u7acb\u4efb\u52a1\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u60a8\u5e94\u8be5\u68c0\u7d22\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u5e76\u7b49\u5f85\u5b83\u4eec</p> <p>\u4e0a\u4e00\u4e2a\u95ee\u9898/\u7b54\u6848\u51c6\u786e\u5730\u5c55\u793a\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"asyncio_en/#237-\u5982\u4f55\u663e\u793a\u8fd0\u884c\u4efb\u52a1\u7684\u8fdb\u5ea6","title":"23.7 \u5982\u4f55\u663e\u793a\u8fd0\u884c\u4efb\u52a1\u7684\u8fdb\u5ea6\uff1f","text":"<p>23.7 How to Show Progress of Running Tasks?</p> EnglishChinese <p>We can show progress using a done callback function on each task.</p> <p>A done callback is a function that we can register on an asyncio.Task.</p> <p>It is called once the task is done, either normally or if it fails.</p> <p>The done callback function is a regular function, not a coroutine, and takes the asyncio.Task that it is associated with as an argument.</p> <p>We can use the same callback function for all tasks and report progress in a general way, such as by reporting a message.</p> <p>For example:</p> <pre><code># callback function to show progress of tasks\ndef progress(task):\n    # report progress of the task\n    print('.', end='')\n</code></pre> <p>We can register a callback function on each asyncio.Task that we issue.</p> <p>This can be achieved using the add_done_callback() method on each task and passing it the name of the callback function.</p> <p>For example:</p> <pre><code>...\n# add a done callback to a task\ntask.add_done_callback(progress)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u4efb\u52a1\u7684\u56de\u8c03\u51fd\u6570\u6765\u663e\u793a\u8fdb\u5ea6\u3002</p> <p>\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u662f\u6211\u4eec\u53ef\u4ee5\u5728 asyncio.Task \u4e0a\u6ce8\u518c\u7684\u51fd\u6570\u3002</p> <p>\u4e00\u65e6\u4efb\u52a1\u6267\u884c\u5b8c\uff0c\u65e0\u8bba\u6b63\u5e38\u8fd8\u662f\u5931\u8d25\uff0c\u90fd\u4f1a\u8c03\u7528\u5b83\u3002</p> <p>done \u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u534f\u7a0b\uff0c\u5e76\u4e14\u5c06\u4e0e\u5176\u5173\u8054\u7684 asyncio.Task \u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u4efb\u52a1\u4f7f\u7528\u76f8\u540c\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4ee5\u901a\u7528\u65b9\u5f0f\u62a5\u544a\u8fdb\u5ea6\uff0c\u4f8b\u5982\u62a5\u544a\u6d88\u606f\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u56de\u8c03\u51fd\u6570\u663e\u793a\u4efb\u52a1\u8fdb\u5ea6\ndef progress(task):\n    # \u62a5\u544a\u4efb\u52a1\u8fdb\u5ea6\n    print('.', end='')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u53d1\u51fa\u7684\u6bcf\u4e2a asyncio.Task \u4e0a\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u4e2a\u4efb\u52a1\u4e0a\u4f7f\u7528 add_done_callback() \u65b9\u6cd5\u5e76\u5411\u5176\u4f20\u9012\u56de\u8c03\u51fd\u6570\u7684\u540d\u79f0\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5411\u4efb\u52a1\u6dfb\u52a0\u56de\u8c03\u51fd\u6570\ntask.add_done_callback(progress)\n</code></pre>"},{"location":"asyncio_en/#238-\u5982\u4f55\u5728\u5ef6\u8fdf\u540e\u8fd0\u884c\u4efb\u52a1","title":"23.8 \u5982\u4f55\u5728\u5ef6\u8fdf\u540e\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>23.8 How to Run a Task After a Delay?</p> EnglishChinese <p>We can develop a custom wrapper coroutine to execute a target coroutine after a delay.</p> <p>The wrapper coroutine may take two arguments, a coroutine and a time in seconds.</p> <p>It will sleep for the given delay interval in seconds, then await the provided coroutine.</p> <p>The delay() coroutine below implements this.</p> <pre><code># coroutine that will start another coroutine after a delay in seconds\nasync def delay(coro, seconds):\n    # suspend for a time limit in seconds\n    await asyncio.sleep(seconds)\n    # execute the other coroutine\n    await coro\n</code></pre> <p>To use the wrapper coroutine, a coroutine object can be created and either awaited directly or executed independently as a task.</p> <p>For example, the caller may suspend and schedule the delayed coroutine and wait for it to be done:</p> <pre><code>...\n# execute a coroutine after a delay\nawait delay(coro, 10)\n</code></pre> <p>Alternatively, the caller may schedule the delayed coroutine to run independently:</p> <pre><code>...\n# execute a coroutine after a delay independently\n_ = asyncio.create_task(delay(coro, 10))\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5305\u88c5\u534f\u7a0b\u6765\u5728\u5ef6\u8fdf\u540e\u6267\u884c\u76ee\u6807\u534f\u7a0b\u3002</p> <p>\u5305\u88c5\u534f\u7a0b\u53ef\u4ee5\u91c7\u7528\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u534f\u7a0b\u548c\u4e00\u4e2a\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u3002</p> <p>\u5b83\u5c06\u4f11\u7720\u7ed9\u5b9a\u7684\u5ef6\u8fdf\u95f4\u9694\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u7136\u540e\u7b49\u5f85\u63d0\u4f9b\u7684\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u4e0b\u9762\u7684 delay() \u534f\u7a0b\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002</p> <pre><code># \u5ef6\u8fdf\u51e0\u79d2\u540e\u542f\u52a8\u53e6\u4e00\u4e2a\u534f\u7a0b\u7684\u534f\u7a0b\nasync def delay(coro, seconds):\n    # \u6682\u505c\u65f6\u95f4\u9650\u5236\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\n    await asyncio.sleep(seconds)\n    # \u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\n    await coro\n</code></pre> <p>\u8981\u4f7f\u7528\u5305\u88c5\u534f\u7a0b\uff0c\u53ef\u4ee5\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61\u5e76\u76f4\u63a5\u7b49\u5f85\u6216\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u6302\u8d77\u5e76\u8c03\u5ea6\u5ef6\u8fdf\u534f\u7a0b\u5e76\u7b49\u5f85\u5176\u5b8c\u6210\uff1a</p> <pre><code>...\n# \u5ef6\u8fdf\u540e\u6267\u884c\u534f\u7a0b\nawait delay(coro, 10)\n</code></pre> <p>\u6216\u8005\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u6392\u5ef6\u8fdf\u534f\u7a0b\u72ec\u7acb\u8fd0\u884c\uff1a</p> <pre><code>...\n# \u5728\u5ef6\u8fdf\u540e\u72ec\u7acb\u6267\u884c\u534f\u7a0b\n_ = asyncio.create_task(delay(coro, 10))\n</code></pre>"},{"location":"asyncio_en/#239-\u5982\u4f55\u8fd0\u884c\u540e\u7eed\u4efb\u52a1","title":"23.9 \u5982\u4f55\u8fd0\u884c\u540e\u7eed\u4efb\u52a1\uff1f","text":"<p>23.9 How to Run a Follow-Up Task?</p> EnglishChinese <p>There are three main ways to issue follow-up tasks in asyncio.</p> <p>They are:</p> <ol> <li>Schedule the follow-up task from the completed task itself.</li> <li>Schedule the follow-up task from the caller.</li> <li>Schedule the follow-up task automatically using a done callback.</li> </ol> <p>Let\u2019s take a closer look at each approach.</p> <p>The task that is completed can issue its own follow-up task.</p> <p>This may require checking some state in order to determine whether the follow-up task should be issued or not.</p> <p>The task can then be scheduled via a call to <code>asyncio.create_task()</code>.</p> <p>For example:</p> <pre><code>...\n# schedule a follow-up task\ntask = asyncio.create_task(followup_task())\n</code></pre> <p>The task itself may choose to await the follow-up task or let it complete in the background independently.</p> <p>For example:</p> <pre><code>...\n# wait for the follow-up task to complete\nawait task\n</code></pre> <p>The caller that issued the task can choose to issue a follow-up task.</p> <p>For example, when the caller issues the first task, it may keep the asyncio.Task object.</p> <p>It can then check the result of the task or whether the task was completed successfully or not.</p> <p>The caller can then decide to issue a follow-up task.</p> <p>It may or may not await the follow-up task directly.</p> <p>For example:</p> <pre><code>...\n# issue and await the first task\ntask = await asyncio.create_task(task())\n# check the result of the task\nif task.result():\n    # issue the follow-up task\n    followup = await asyncio.create_task(followup_task())\n</code></pre> <p>We can execute a follow-up task automatically using a done callback function.</p> <p>For example, the caller that issues the task can register a done callback function on the task itself.</p> <p>The done callback function must take the asyncio.Task object as an argument and will be called only after the task is done. It can then choose to issue a follow-up task.</p> <p>The done callback function is a regular Python function, not a coroutine, so it cannot await the follow-up task</p> <p>For example, the callback function may look as follows:</p> <pre><code># callback function\ndef callback(task):\n    # schedule and await the follow-up task\n    _ = asyncio.create_task(followup())\n</code></pre> <p>The caller can issue the first task and register the done callback function.</p> <p>For example:</p> <pre><code>...\n# schedule and the task\ntask = asyncio.create_task(work())\n# add the done callback function\ntask.add_done_callback(callback)\n</code></pre> <p>asyncio \u4e2d\u53d1\u51fa\u540e\u7eed\u4efb\u52a1(follow-up tasks)\u7684\u65b9\u5f0f\u4e3b\u8981\u6709\u4e09\u79cd\u3002</p> <p>\u4ed6\u4eec\u662f:</p> <ol> <li>\u4ece\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u672c\u8eab\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> <li>\u4ece\u8c03\u7528\u8005\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> <li>\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u81ea\u52a8\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> </ol> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u6bcf\u79cd\u65b9\u6cd5\u3002</p> <p>\u5b8c\u6210\u7684\u4efb\u52a1\u53ef\u4ee5\u53d1\u51fa\u81ea\u5df1\u7684\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u80fd\u9700\u8981\u68c0\u67e5\u67d0\u4e9b\u72b6\u6001\u4ee5\u786e\u5b9a\u662f\u5426\u5e94\u8be5\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>asyncio.create_task()</code> \u6765\u5b89\u6392\u4efb\u52a1 .</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# schedule a follow-up task\ntask = asyncio.create_task(followup_task())\n</code></pre> <p>\u4efb\u52a1\u672c\u8eab\u53ef\u4ee5\u9009\u62e9\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6216\u8ba9\u5b83\u5728\u540e\u53f0\u72ec\u7acb\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\nawait task\n</code></pre> <p>\u4e0b\u53d1\u4efb\u52a1\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u9009\u62e9\u4e0b\u53d1\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u8c03\u7528\u8005\u53d1\u51fa\u7b2c\u4e00\u4e2a\u4efb\u52a1\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u4fdd\u7559 <code>asyncio.Task</code> \u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u5b83\u53ef\u4ee5\u68c0\u67e5\u4efb\u52a1\u7684\u7ed3\u679c\u6216\u4efb\u52a1\u662f\u5426\u6210\u529f\u5b8c\u6210\u3002</p> <p>\u7136\u540e\u8c03\u7528\u8005\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u5b83\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u7b49\u5f85/\u4e0d\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u53d1\u51fa\u5e76\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\ntask = await asyncio.create_task(task())\n# \u68c0\u67e5\u4efb\u52a1\u7ed3\u679c\nif task.result():\n    # \u4e0b\u8fbe\u540e\u7eed\u4efb\u52a1\n    followup = await asyncio.create_task(followup_task())\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u81ea\u52a8\u6267\u884c\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff0c\u53d1\u51fa\u4efb\u52a1\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u5728\u4efb\u52a1\u672c\u8eab\u4e0a\u6ce8\u518c\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u5fc5\u987b\u5c06 <code>asyncio.Task</code> \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u4f1a\u88ab\u8c03\u7528\u3002 \u7136\u540e\u5b83\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u5e38\u89c4\u7684Python\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u534f\u7a0b\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u7b49\u5f85\u540e\u7eed\u4efb\u52a1</p> <p>\u4f8b\u5982\uff0c\u56de\u8c03\u51fd\u6570\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code># \u56de\u8c03\u51fd\u6570\ndef callback(task):\n    # \u8c03\u5ea6\u5e76\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\n    _ = asyncio.create_task(followup())\n</code></pre> <p>\u8c03\u7528\u8005\u53ef\u4ee5\u53d1\u51fa\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e76\u6ce8\u518c\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8c03\u5ea6\u4efb\u52a1\ntask = asyncio.create_task(work())\n# \u6dfb\u52a0\u6267\u884c\u5b8c\u540e\u7684\u56de\u8c03\u51fd\u6570\ntask.add_done_callback(callback)\n</code></pre>"},{"location":"asyncio_en/#2310-\u5982\u4f55\u5728-asyncio-\u4e2d\u6267\u884c\u963b\u585e-io-\u6216-cpu-\u5bc6\u96c6\u578b\u51fd\u6570","title":"23.10 \u5982\u4f55\u5728 Asyncio \u4e2d\u6267\u884c\u963b\u585e I/O \u6216 CPU \u5bc6\u96c6\u578b\u51fd\u6570\uff1f","text":"<p>23.10 How to Execute a Blocking I/O or CPU-bound Function in Asyncio?</p> EnglishChinese <p>The asyncio module provides two approaches for executing blocking calls in asyncio programs.</p> <p>The first is to use the asyncio.to_thread() function.</p> <p>This is in the high-level API and is intended for application developers.</p> <p>The asyncio.to_thread() function takes a function name to execute and any arguments.</p> <p>The function is executed in a separate thread. It returns a coroutine that can be awaited or scheduled as an independent task.</p> <p>For example:</p> <pre><code>...\n# execute a function in a separate thread\nawait asyncio.to_thread(task)\n</code></pre> <p>The task will not begin executing until the returned coroutine is given an opportunity to run in the event loop.</p> <p>The asyncio.to_thread() function creates a ThreadPoolExecutor behind the scenes to execute blocking calls.</p> <p>As such, the <code>asyncio.to_thread()</code> function is only appropriate for IO-bound tasks.</p> <p>An alternative approach is to use the loop.run_in_executor() function.</p> <p>This is in the low-level asyncio API and first requires access to the event loop, such as via the asyncio.get_running_loop() function.</p> <p>The <code>loop.run_in_executor()</code> function takes an executor and a function to execute.</p> <p>If None is provided for the executor, then the default executor is used, which is a ThreadPoolExecutor.</p> <p>The <code>loop.run_in_executor()</code> function returns an awaitable that can be awaited if needed. The task will begin executing immediately, so the returned awaitable does not need to be awaited or scheduled for the blocking call to start executing.</p> <p>For example:</p> <pre><code>...\n# get the event loop\nloop = asyncio.get_running_loop()\n# execute a function in a separate thread\nawait loop.run_in_executor(None, task)\n</code></pre> <p>Alternatively, an executor can be created and passed to the loop.run_in_executor() function, which will execute the asynchronous call in the executor.</p> <p>The caller must manage the executor in this case, shutting it down once the caller is finished with it.</p> <p>For example:</p> <pre><code>...\n# create a process pool\nwith ProcessPoolExecutor as exe:\n    # get the event loop\n    loop = asyncio.get_running_loop()\n    # execute a function in a separate thread\n    await loop.run_in_executor(exe, task)\n    # process pool is shutdown automatically...\n</code></pre> <p>These two approaches allow a blocking call to be executed as an asynchronous task in an asyncio program.</p> <p>asyncio \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u8c03\u7528\u7684\u65b9\u6cd5\u3002</p> <p>\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528 asyncio.to_thread() \u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u9ad8\u7ea7 API \u4e2d\u7684\u5185\u5bb9\uff0c\u9002\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u3002</p> <p><code>asyncio.to_thread()</code> \u51fd\u6570\u63a5\u53d7\u8981\u6267\u884c\u7684\u51fd\u6570\u540d\u79f0\u548c\u4efb\u4f55\u53c2\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u4efb\u52a1\u7b49\u5f85\u6216\u8c03\u5ea6\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait asyncio.to_thread(task)\n</code></pre> <p>\u4efb\u52a1\u4e00\u5f00\u59cb\u5e76\u4e0d\u4f1a\u6267\u884c\u3002\u76f4\u5230\u534f\u7a0b\u8fd4\u56de\u5e76\u4e14\u7ed9\u4e2a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u7684\u673a\u4f1a\u65f6\uff0c\u624d\u4f1a\u8fd0\u884c\u3002</p> <p><code>asyncio.to_thread()</code> \u51fd\u6570\u5728\u540e\u53f0\u521b\u5efa\u4e00\u4e2a ThreadPoolExecutor \u6765\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u56e0\u6b64\uff0c<code>asyncio.to_thread()</code> \u51fd\u6570\u4ec5\u9002\u7528\u4e8e IO \u5bc6\u96c6\u578b\u4efb\u52a1\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528loop.run_in_executor()\u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u5728\u4f4e\u7ea7 asyncio API \u4e2d\uff0c\u9996\u5148\u9700\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\uff0c\u4f8b\u5982\u901a\u8fc7 asyncio.get_running_loop() \u51fd\u6570\u3002</p> <p><code>Loop.run_in_executor()</code> \u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6267\u884c\u5668\u548c\u4e00\u4e2a\u8981\u6267\u884c\u7684\u51fd\u6570\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u4e3a\u6267\u884c\u5668\u63d0\u4f9b\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u6267\u884c\u5668\uff0c\u5373 ThreadPoolExecutor\u3002</p> <p><code>Loop.run_in_executor()</code> \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u7b49\u5f85\u3002 \u8be5\u4efb\u52a1\u5c06\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7b49\u5f85\u6216\u5b89\u6392\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u6765\u5f00\u59cb\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.get_running_loop()\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait loop.run_in_executor(None, task)\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6267\u884c\u5668\u5e76\u5c06\u5176\u4f20\u9012\u7ed9<code>loop.run_in_executor()</code>\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5728\u6267\u884c\u5668\u4e2d\u6267\u884c\u5f02\u6b65\u8c03\u7528\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u7ba1\u7406\u6267\u884c\u5668\uff0c\u5728\u8c03\u7528\u8005\u5b8c\u6210\u540e\u5c06\u5176\u5173\u95ed\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6c60\nwith ProcessPoolExecutor as exe:\n    # \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\n    loop = asyncio.get_running_loop()\n    # \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\n    # process pool is shutdown automatically...\n    # \u8fdb\u7a0b\u6c60\u81ea\u52a8\u5173\u95ed...\n</code></pre> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5141\u8bb8\u963b\u585e\u8c03\u7528\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u4e2d\u7684\u5f02\u6b65\u4efb\u52a1\u6267\u884c\u3002</p>"},{"location":"asyncio_en/#24-\u4f7f\u7528-asyncio-\u7684\u5e38\u89c1\u53cd\u5bf9\u610f\u89c1","title":"24. \u4f7f\u7528 Asyncio \u7684\u5e38\u89c1\u53cd\u5bf9\u610f\u89c1","text":"<p>24. Common Objections to Using Asyncio</p> EnglishChinese <p>Asyncio and coroutines may not be the best solution for all concurrency problems in your program.</p> <p>That being said, there may also be some misunderstandings that are preventing you from making full and best use of the capabilities of the asyncio in Python.</p> <p>In this section, we review some of the common objections seen by developers when considering using the asyncio.</p> <p>\u5f02\u6b65\u548c\u534f\u7a0b\u53ef\u80fd\u4e0d\u662f\u89e3\u51b3\u7a0b\u5e8f\u4e2d\u6240\u6709\u5e76\u53d1\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u8bdd\u867d\u5982\u6b64\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u8bef\u89e3\uff0c\u963b\u788d\u60a8\u5145\u5206\u3001\u6700\u4f73\u5730\u5229\u7528 Python \u4e2d asyncio \u7684\u529f\u80fd\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u987e\u5f00\u53d1\u4eba\u5458\u5728\u8003\u8651\u4f7f\u7528 asyncio \u65f6\u9047\u5230\u7684\u4e00\u4e9b\u5e38\u89c1\u53cd\u5bf9\u610f\u89c1\u3002</p>"},{"location":"asyncio_en/#241-\u5168\u5c40\u89e3\u91ca\u5668\u9501-gil-\u600e\u4e48\u6837","title":"24.1 \u5168\u5c40\u89e3\u91ca\u5668\u9501 (GIL) \u600e\u4e48\u6837\uff1f","text":"<p>24.1 What About the Global Interpreter Lock (GIL)?</p> EnglishChinese <p>The GIL protects the internals of the Python interpreter from concurrent access and modification from multiple threads.</p> <p>The asyncio event loop runs in one thread.</p> <p>This means that all coroutines run in a single thread.</p> <p>As such the GIL is not an issue when using asyncio and coroutine.</p> <p>GIL \u4fdd\u62a4 Python \u89e3\u91ca\u5668\u7684\u5185\u90e8\u514d\u53d7\u591a\u4e2a\u7ebf\u7a0b\u7684\u5e76\u53d1\u8bbf\u95ee\u548c\u4fee\u6539\u3002</p> <p>asyncio \u4e8b\u4ef6\u5faa\u73af\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u6240\u6709\u534f\u7a0b\u90fd\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002</p> <p>\u56e0\u6b64\uff0c\u4f7f\u7528 asyncio \u548c\u534f\u7a0b\u65f6\uff0cGIL \u4e0d\u662f\u95ee\u9898\u3002</p>"},{"location":"asyncio_en/#242-python-\u534f\u7a0b\u662f\u771f\u5b9e\u7684\u5417","title":"24.2 Python \u534f\u7a0b\u662f\u201c\u771f\u5b9e\u7684\u201d\u5417\uff1f","text":"<p>24.2 Are Python Coroutines \u201cReal\u201c?</p> EnglishChinese <p>Coroutines are managed in software.</p> <p>Coroutines run and are managed (switched) within the asyncio event loop in the Python runtime.</p> <p>They are not a software representation of a capability provided by the underlying operating system, like threads and processes.</p> <p>In this sense, Python does not have support for \u201cnative coroutines\u201d, but I\u2019m not sure such things exist in modern operating systems.</p> <p>\u534f\u7a0b\u7531\u8f6f\u4ef6\u7ba1\u7406\u3002</p> <p>\u534f\u7a0b\u5728 Python \u8fd0\u884c\u65f6\u7684 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u548c\u7ba1\u7406\uff08\u5207\u6362\uff09\u3002</p> <p>\u5b83\u4eec\u4e0d\u662f\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u63d0\u4f9b\u7684\u529f\u80fd\u4ee5\u53ca\u8f6f\u4ef6\u8868\u793a\uff0c\u4f8b\u5982\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u3002</p> <p>\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0cPython \u4e0d\u652f\u6301\u201c\u539f\u751f\u534f\u7a0b\u201d\uff0c\u4f46\u6211\u4e0d\u786e\u5b9a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u4e1c\u897f\u3002</p>"},{"location":"asyncio_en/#243-python-\u7684\u5e76\u53d1\u6027\u4e0d\u662f\u6709\u95ee\u9898\u5417","title":"24.3 Python \u7684\u5e76\u53d1\u6027\u4e0d\u662f\u6709\u95ee\u9898\u5417\uff1f","text":"<p>24.3 Isn\u2019t Python Concurrency Buggy?</p> EnglishChinese <p>No.</p> <p>Python provides first-class concurrency with coroutines, threads, and processes.</p> <p>It has for a long time now and it is widely used in open source and commercial projects.</p> <p>\u4e0d\ud83d\ude45\ud83c\udffb\u200d\u2640\ufe0f\u3002</p> <p>Python \u901a\u8fc7\u534f\u7a0b\u3001\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u63d0\u4f9b\u4e00\u6d41\u7684\u5e76\u53d1\u6027\u3002</p> <p>\u5b83\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\uff0c\u5e76\u4e14\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5f00\u6e90\u548c\u5546\u4e1a\u9879\u76ee\u4e2d\u3002</p>"},{"location":"asyncio_en/#244-\u5bf9\u4e8e\u5e76\u53d1\u6765\u8bf4python-\u4e0d\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u9009\u62e9\u5417","title":"24.4 \u5bf9\u4e8e\u5e76\u53d1\u6765\u8bf4\uff0cPython \u4e0d\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u9009\u62e9\u5417\uff1f","text":"<p>24.4 Isn\u2019t Python a Bad Choice for Concurrency?</p> EnglishChinese <p>Developers love python for many reasons, most commonly because it is easy to use and fast for development.</p> <p>Python is commonly used for glue code, one-off scripts, but more and more for large-scale software systems.</p> <p>If you are using Python and then you need concurrency, then you work with what you have. The question is moot.</p> <p>If you need concurrency and you have not chosen a language, perhaps another language would be more appropriate, or perhaps not. Consider the full scope of functional and non-functional requirements (or user needs, wants, and desires) for your project and the capabilities of different development platforms.</p> <p>\u5f00\u53d1\u4eba\u5458\u559c\u7231 Python \u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u6700\u5e38\u89c1\u7684\u662f\u56e0\u4e3a\u5b83\u6613\u4e8e\u4f7f\u7528\u4e14\u5f00\u53d1\u901f\u5ea6\u5feb\u3002</p> <p>Python \u901a\u5e38\u7528\u4e8e\u7c98\u5408\u4ee3\u7801\u3001\u4e00\u6b21\u6027\u811a\u672c\uff0c\u4f46\u8d8a\u6765\u8d8a\u591a\u5730\u7528\u4e8e\u5927\u578b\u8f6f\u4ef6\u7cfb\u7edf\u3002</p> <p>\u5982\u679c\u60a8\u4f7f\u7528 Python \u5e76\u4e14\u9700\u8981\u5e76\u53d1\u6027\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684\u4e1c\u897f\u3002 \u8fd9\u4e2a\u95ee\u9898\u6beb\u65e0\u610f\u4e49\u3002</p> <p>\u5982\u679c\u60a8\u9700\u8981\u5e76\u53d1\u6027\u5e76\u4e14\u5c1a\u672a\u9009\u62e9\u4e00\u79cd\u8bed\u8a00\uff0c\u90a3\u4e48\u53e6\u4e00\u79cd\u8bed\u8a00\u53ef\u80fd\u66f4\u5408\u9002\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5408\u9002\u3002 \u9700\u8981\u8003\u8651\u9879\u76ee\u7684\u5168\u90e8\u529f\u80fd\u548c\u975e\u529f\u80fd\u9700\u6c42\uff08\u6216\u7528\u6237\u7684\u9700\u6c42\u3001\u60f3\u6cd5\u548c\u613f\u671b\uff09\u4ee5\u53ca\u4e0d\u540c\u5f00\u53d1\u5e73\u53f0\u7684\u529f\u80fd\u3002</p>"},{"location":"asyncio_en/#255-\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u7ebf\u7a0b\u6765\u4ee3\u66ff","title":"25.5 \u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u7ebf\u7a0b\u6765\u4ee3\u66ff\uff1f","text":"<p>25.5 Why Not Use Threads Instead?</p> EnglishChinese <p>You can use threads instead of asyncio.</p> <p>Any program developed using threads can be rewritten to use asyncio and coroutines.</p> <p>Any program developed using coroutines and asyncio can be rewritten to use threads.</p> <p>Adopting asyncio in a project is a choice, the rationale is yours.</p> <p>For the most part, they are functionally equivalent.\uff08\u529f\u80fd\u7b49\u6548\uff09</p> <p>Many use cases will execute faster using threads and may be more familiar(\u4eb2\u5207) to a wider array of Python developers.</p> <p>Some use cases in the areas of network programming and executing system commands may be simpler(\u6700\u7b80\u5355) (less code) when using asyncio, and significantly more scalable than using threads.</p> <ul> <li> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u800c\u4e0d\u662f\u5f02\u6b65\u3002</p> </li> <li> <p>\u4efb\u4f55\u4f7f\u7528\u7ebf\u7a0b\u5f00\u53d1\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528 asyncio \u548c\u534f\u7a0b\u91cd\u5199\u3002</p> </li> <li> <p>\u4efb\u4f55\u4f7f\u7528\u534f\u7a0b\u548c asyncio \u5f00\u53d1\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u91cd\u5199\u3002</p> </li> <li> <p>\u5728\u9879\u76ee\u4e2d\u91c7\u7528 asyncio \u662f\u4e00\u79cd\u9009\u62e9\uff0c\u5176\u7406\u7531\u7531\u60a8\u51b3\u5b9a\u3002</p> </li> <li> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5728\u529f\u80fd\u4e0a\u662f\u7b49\u6548\u7684\u3002</p> </li> <li> <p>\u8bb8\u591a\u7528\u4f8b\u4f7f\u7528\u7ebf\u7a0b\u5c06\u6267\u884c\u5f97\u66f4\u5feb\uff0c\u5e76\u4e14\u53ef\u80fd\u4e3a\u66f4\u5e7f\u6cdb\u7684 Python \u5f00\u53d1\u4eba\u5458\u6240\u719f\u6089\u3002</p> </li> <li> <p>\u4f7f\u7528 asyncio \u65f6\uff0c\u7f51\u7edc\u7f16\u7a0b\u548c\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u9886\u57df\u7684\u4e00\u4e9b\u7528\u4f8b\u53ef\u80fd\u4f1a\u66f4\u7b80\u5355\uff08\u6700\u7b80\u5355\uff09\uff08\u4ee3\u7801\u66f4\u5c11\uff09\uff0c\u5e76\u4e14\u6bd4\u4f7f\u7528\u7ebf\u7a0b\u66f4\u5177\u53ef\u6269\u5c55\u6027\u3002</p> </li> </ul>"},{"location":"asyncio_en/#25-\u8fdb\u4e00\u6b65\u9605\u8bfb","title":"25. \u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<p>25. Further Reading</p> EnglishChinese <p>This section lists helpful additional resources on the topic.</p> <p>\u672c\u8282\u5217\u51fa\u4e86\u6709\u5173\u8be5\u4e3b\u9898\u7684\u6709\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u3002</p>"},{"location":"asyncio_en/#251-python-\u5f02\u6b65\u4e66\u7c4d","title":"25.1 Python \u5f02\u6b65\u4e66\u7c4d","text":"<p>25.1 Python Asyncio Books</p> EnglishChinese <p>This section lists my books on Python asyncio, designed to help you get started and get good, super fast.</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022. (my book!)</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>Other books on asyncio include:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>\u672c\u8282\u5217\u51fa\u4e86\u6211\u6709\u5173 Python asyncio \u7684\u4e66\u7c4d\uff0c\u65e8\u5728\u5e2e\u52a9\u60a8\u5feb\u901f\u5165\u95e8\u5e76\u83b7\u5f97\u826f\u597d\u7684\u6548\u679c\u3002</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022. (my book!)</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>\u5176\u4ed6\u5173\u4e8e asyncio \u7684\u4e66\u7c4d\u5305\u62ec\uff1a</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul>"},{"location":"asyncio_en/#252-apis","title":"25.2 APIs","text":"EnglishChinese <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul>"},{"location":"asyncio_en/#253-\u53c2\u8003","title":"25.3 \u53c2\u8003","text":"<p>25.3 References</p> EnglishChinese <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul>"},{"location":"asyncio_en/#26-\u7ed3\u8bba","title":"26. \u7ed3\u8bba","text":"<p>26. Conclusions</p> EnglishChinese <p>This is a large guide, and you have discovered in great detail how asyncio and coroutines work in Python and how to best use them in your project.</p> <p>Did you find this guide useful?</p> <p>I\u2019d love to know, please share a kind word in the comments below.</p> <p>Have you used asyncio on a project?</p> <p>I\u2019d love to hear about it, please let me know in the comments.</p> <p>Do you have any questions?</p> <p>Leave your question in a comment below and I will reply fast with my best advice.</p> <p>Join the discussion on reddit and hackernews.</p> <p>\u8fd9\u662f\u4e00\u672c\u5f88\u5927\u7684\u6307\u5357\uff0c\u60a8\u5df2\u7ecf\u8be6\u7ec6\u4e86\u89e3\u4e86 asyncio \u548c\u534f\u7a0b\u5982\u4f55\u5728 Python \u4e2d\u5de5\u4f5c\u4ee5\u53ca\u5982\u4f55\u5728\u60a8\u7684\u9879\u76ee\u4e2d\u6700\u597d\u5730\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u60a8\u89c9\u5f97\u672c\u6307\u5357\u6709\u7528\u5417\uff1f</p> <p>\u6211\u5f88\u60f3\u77e5\u9053\uff0c\u8bf7\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u5206\u4eab\u4e00\u53e5\u597d\u8bdd\u3002</p> <p>\u4f60\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u8fc7 asyncio \u5417\uff1f</p> <p>\u6211\u5f88\u60f3\u542c\u542c\uff0c\u8bf7\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\u3002</p> <p>\u4f60\u6709\u4efb\u4f55\u95ee\u9898\u5417\uff1f</p> <p>\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u7559\u4e0b\u60a8\u7684\u95ee\u9898\uff0c\u6211\u4f1a\u5feb\u901f\u56de\u590d\u5e76\u63d0\u4f9b\u6211\u6700\u597d\u7684\u5efa\u8bae\u3002</p> <p>\u5728 reddit \u548c hackernews \u4e2d\u52a0\u5165\u8ba8\u8bba\u3002</p>"},{"location":"raw_en/","title":"FastAPI Best Practices","text":"<p>Opinionated list of best practices and conventions we used at our startup.</p> <p>For the last 1.5 years in production, we have been making good and bad decisions that impacted our developer experience dramatically. Some of them are worth sharing.</p>"},{"location":"raw_en/#1-project-structure-consistent--predictable","title":"1. Project Structure. Consistent &amp; predictable","text":"<p>There are many ways to structure the project, but the best structure is a structure that is consistent, straightforward, and has no surprises.</p> <ul> <li>If looking at the project structure doesn't give you an idea of what the project is about, then the structure might be unclear.</li> <li>If you have to open packages to understand what modules are located in them, then your structure is unclear.</li> <li>If the frequency and location of the files feels random, then your project structure is bad.</li> <li>If looking at the module's location and its name doesn't give you an idea of what's inside it, then your structure is very bad.</li> </ul> <p>Although the project structure, where we separate files by their type (e.g. api, crud, models, schemas) presented by @tiangolo is good for microservices or projects with fewer scopes, we couldn't fit it into our monolith with a lot of domains and modules. Structure that I found more scalable and evolvable is inspired by Netflix's Dispatch with some little modifications.</p> <pre><code>fastapi-project\n\u251c\u2500\u2500 alembic/\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py  # pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 models.py  # db models\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py  # local configs\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2502   \u251c\u2500\u2500 client.py  # client model for external service communication\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 posts\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py  # global configs\n\u2502   \u251c\u2500\u2500 models.py  # global models\n\u2502   \u251c\u2500\u2500 exceptions.py  # global exceptions\n\u2502   \u251c\u2500\u2500 pagination.py  # global module e.g. pagination\n\u2502   \u251c\u2500\u2500 database.py  # db connection related stuff\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth\n\u2502   \u251c\u2500\u2500 aws\n\u2502   \u2514\u2500\u2500 posts\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u2514\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ol> <li>Store all domain directories inside <code>src</code> folder</li> <li><code>src/</code> - highest level of an app, contains common models, configs, and constants, etc.</li> <li><code>src/main.py</code> - root of the project, which inits the FastAPI app</li> <li>Each package has its own router, schemas, models, etc.</li> <li><code>router.py</code> - is a core of each module with all the endpoints</li> <li><code>schemas.py</code> - for pydantic models</li> <li><code>models.py</code> - for db models</li> <li><code>service.py</code> - module specific business logic  </li> <li><code>dependencies.py</code> - router dependencies</li> <li><code>constants.py</code> - module specific constants and error codes</li> <li><code>config.py</code> - e.g. env vars</li> <li><code>utils.py</code> - non-business logic functions, e.g. response normalization, data enrichment, etc.</li> <li><code>exceptions</code> - module specific exceptions, e.g. <code>PostNotFound</code>, <code>InvalidUserData</code></li> <li>When package requires services or dependencies or constants from other packages - import them with an explicit module name</li> </ol> <pre><code>from src.auth import constants as auth_constants\nfrom src.notifications import service as notification_service\nfrom src.posts.constants import ErrorCode as PostsErrorCode  # in case we have Standard ErrorCode in constants module of each package\n</code></pre>"},{"location":"raw_en/#2-excessively-use-pydantic-for-data-validation","title":"2. Excessively use Pydantic for data validation","text":"<p>Pydantic has a rich set of features to validate and transform data.</p> <p>In addition to regular features like required &amp; non-required fields with default values, Pydantic has built-in comprehensive data processing tools like regex, enums for limited allowed options, length validation, email validation, etc.</p> <pre><code>from enum import Enum\nfrom pydantic import AnyUrl, BaseModel, EmailStr, Field, constr\n\nclass MusicBand(str, Enum):\n   AEROSMITH = \"AEROSMITH\"\n   QUEEN = \"QUEEN\"\n   ACDC = \"AC/DC\"\n\n\nclass UserBase(BaseModel):\n    first_name: str = Field(min_length=1, max_length=128)\n    username: constr(regex=\"^[A-Za-z0-9-_]+$\", to_lower=True, strip_whitespace=True)\n    email: EmailStr\n    age: int = Field(ge=18, default=None)  # must be greater or equal to 18\n    favorite_band: MusicBand = None  # only \"AEROSMITH\", \"QUEEN\", \"AC/DC\" values are allowed to be inputted\n    website: AnyUrl = None\n</code></pre>"},{"location":"raw_en/#3-use-dependencies-for-data-validation-vs-db","title":"3. Use dependencies for data validation vs DB","text":"<p>Pydantic can only validate the values from client input. Use dependencies to validate data against database constraints like email already exists, user not found, etc.</p> <pre><code># dependencies.py\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\n# router.py\n@router.get(\"/posts/{post_id}\", response_model=PostResponse)\nasync def get_post_by_id(post: Mapping = Depends(valid_post_id)):\n    return post\n\n\n@router.put(\"/posts/{post_id}\", response_model=PostResponse)\nasync def update_post(\n    update_data: PostUpdate,  \n    post: Mapping = Depends(valid_post_id), \n):\n    updated_post: Mapping = await service.update(id=post[\"id\"], data=update_data)\n    return updated_post\n\n\n@router.get(\"/posts/{post_id}/reviews\", response_model=list[ReviewsResponse])\nasync def get_post_reviews(post: Mapping = Depends(valid_post_id)):\n    post_reviews: list[Mapping] = await reviews_service.get_by_post_id(post[\"id\"])\n    return post_reviews\n</code></pre> <p>If we didn't put data validation to dependency, we would have to add post_id validation for every endpoint and write the same tests for each of them.</p>"},{"location":"raw_en/#4-chain-dependencies","title":"4. Chain dependencies","text":"<p>Dependencies can use other dependencies and avoid code repetition for similar logic.</p> <pre><code># dependencies.py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(post: Mapping = Depends(valid_owned_post)):\n    return post\n</code></pre>"},{"location":"raw_en/#5-decouple--reuse-dependencies-dependency-calls-are-cached","title":"5. Decouple &amp; Reuse dependencies. Dependency calls are cached","text":"<p>Dependencies can be reused multiple times, and they won't be recalculated - FastAPI caches dependency's result within a request's scope by default, i.e. if we have a dependency that calls service <code>get_post_by_id</code>, we won't be visiting DB each time we call this dependency - only the first function call.</p> <p>Knowing this, we can easily decouple dependencies onto multiple smaller functions that operate on a smaller domain and are easier to reuse in other routes. For example, in the code below we are using <code>parse_jwt_data</code> three times:</p> <ol> <li><code>valid_owned_post</code></li> <li><code>valid_active_creator</code></li> <li><code>get_user_post</code>,</li> </ol> <p>but <code>parse_jwt_data</code> is called only once, in the very first call.</p> <pre><code># dependencies.py\nfrom fastapi import BackgroundTasks\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\nasync def valid_post_id(post_id: UUID4) -&gt; Mapping:\n    post = await service.get_by_id(post_id)\n    if not post:\n        raise PostNotFound()\n\n    return post\n\n\nasync def parse_jwt_data(\n    token: str = Depends(OAuth2PasswordBearer(tokenUrl=\"/auth/token\"))\n) -&gt; dict:\n    try:\n        payload = jwt.decode(token, \"JWT_SECRET\", algorithms=[\"HS256\"])\n    except JWTError:\n        raise InvalidCredentials()\n\n    return {\"user_id\": payload[\"id\"]}\n\n\nasync def valid_owned_post(\n    post: Mapping = Depends(valid_post_id), \n    token_data: dict = Depends(parse_jwt_data),\n) -&gt; Mapping:\n    if post[\"creator_id\"] != token_data[\"user_id\"]:\n        raise UserNotOwner()\n\n    return post\n\n\nasync def valid_active_creator(\n    token_data: dict = Depends(parse_jwt_data),\n):\n    user = await users_service.get_by_id(token_data[\"user_id\"])\n    if not user[\"is_active\"]:\n        raise UserIsBanned()\n\n    if not user[\"is_creator\"]:\n       raise UserNotCreator()\n\n    return user\n\n\n# router.py\n@router.get(\"/users/{user_id}/posts/{post_id}\", response_model=PostResponse)\nasync def get_user_post(\n    worker: BackgroundTasks,\n    post: Mapping = Depends(valid_owned_post),\n    user: Mapping = Depends(valid_active_creator),\n):\n\"\"\"Get post that belong the active user.\"\"\"\n    worker.add_task(notifications_service.send_email, user[\"id\"])\n    return post\n</code></pre>"},{"location":"raw_en/#6-follow-the-rest","title":"6. Follow the REST","text":"<p>Developing RESTful API makes it easier to reuse dependencies in routes like these:</p> <ol> <li><code>GET /courses/:course_id</code></li> <li><code>GET /courses/:course_id/chapters/:chapter_id/lessons</code></li> <li><code>GET /chapters/:chapter_id</code></li> </ol> <p>The only caveat is to use the same variable names in the path:</p> <ul> <li>If you have two endpoints <code>GET /profiles/:profile_id</code> and <code>GET /creators/:creator_id</code> that both validate whether the given <code>profile_id</code> exists,  but <code>GET /creators/:creator_id</code> also checks if the profile is creator, then it's better to rename <code>creator_id</code> path variable to <code>profile_id</code> and chain those two dependencies.</li> </ul> <pre><code># src.profiles.dependencies\nasync def valid_profile_id(profile_id: UUID4) -&gt; Mapping:\n    profile = await service.get_by_id(post_id)\n    if not profile:\n        raise ProfileNotFound()\n\n    return profile\n\n# src.creators.dependencies\nasync def valid_creator_id(profile: Mapping = Depends(valid_profile_id)) -&gt; Mapping:\n    if not profile[\"is_creator\"]:\n       raise ProfileNotCreator()\n\n    return profile\n\n# src.profiles.router.py\n@router.get(\"/profiles/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(profile: Mapping = Depends(valid_profile_id)):\n\"\"\"Get profile by id.\"\"\"\n    return profile\n\n# src.creators.router.py\n@router.get(\"/creators/{profile_id}\", response_model=ProfileResponse)\nasync def get_user_profile_by_id(\n     creator_profile: Mapping = Depends(valid_creator_id)\n):\n\"\"\"Get creator's profile by id.\"\"\"\n    return creator_profile\n</code></pre> <p>Use /me endpoints for users resources (e.g. <code>GET /profiles/me</code>, <code>GET /users/me/posts</code>)</p> <ol> <li>No need to validate that user id exists - it's already checked via auth method</li> <li>No need to check whether the user id belongs to the requester</li> </ol>"},{"location":"raw_en/#7-dont-make-your-routes-async-if-you-have-only-blocking-io-operations","title":"7. Don't make your routes async, if you have only blocking I/O operations","text":"<p>Under the hood, FastAPI can effectively handle both async and sync I/O operations.</p> <ul> <li>FastAPI runs <code>sync</code> routes in the threadpool and blocking I/O operations won't stop the event loop from executing the tasks.</li> <li>Otherwise, if the route is defined <code>async</code> then it's called regularly via <code>await</code> and FastAPI trusts you to do only non-blocking I/O operations.</li> </ul> <p>The caveat is if you fail that trust and execute blocking operations within async routes, the event loop will not be able to run the next tasks until that blocking operation is done.</p> <pre><code>import asyncio\nimport time\n\n@router.get(\"/terrible-ping\")\nasync def terrible_catastrophic_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB\n\n    return {\"pong\": pong}\n\n@router.get(\"/good-ping\")\ndef good_ping():\n    time.sleep(10) # I/O blocking operation for 10 seconds, but in another thread\n    pong = service.get_pong()  # I/O blocking operation to get pong from DB, but in another thread\n\n    return {\"pong\": pong}\n\n@router.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep(10) # non-blocking I/O operation\n    pong = await service.async_get_pong()  # non-blocking I/O db call\n\n    return {\"pong\": pong}\n</code></pre> <p>What happens when we call:</p> <ol> <li><code>GET /terrible-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>Server's event loop and all the tasks in the queue will be waiting until <code>time.sleep()</code> is finished<ol> <li>Server thinks <code>time.sleep()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Then, event loop and all the tasks in the queue will be waiting until <code>service.get_pong</code> is finished<ol> <li>Server thinks <code>service.get_pong()</code> is not an I/O task, so it waits until it is finished</li> <li>Server won't accept any new requests while waiting</li> </ol> </li> <li>Server returns the response.<ol> <li>After a response, server starts accepting new requests</li> </ol> </li> <li><code>GET /good-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI sends the whole route <code>good_ping</code> to the threadpool, where a worker thread will run the function</li> <li>While <code>good_ping</code> is being executed, event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)<ul> <li>Independently of main thread (i.e. our FastAPI app),     worker thread will be waiting for <code>time.sleep</code> to finish and then for <code>service.get_pong</code> to finish</li> <li>Sync operation blocks only the side thread, not the main one.</li> </ul> </li> <li>When <code>good_ping</code> finishes its work, server returns a response to the client</li> <li><code>GET /perfect-ping</code></li> <li>FastAPI server receives a request and starts handling it</li> <li>FastAPI awaits <code>asyncio.sleep(10)</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>asyncio.sleep(10)</code> is done, servers goes to the next lines and awaits <code>service.async_get_pong</code></li> <li>Event loop selects next tasks from the queue and works on them (e.g. accept new request, call db)</li> <li>When <code>service.async_get_pong</code> is done, server returns a response to the client</li> </ol> <p>The second caveat is that operations that are non-blocking awaitables or are sent to the thread pool must be I/O intensive tasks (e.g. open file, db call, external API call).</p> <ul> <li>Awaiting CPU-intensive tasks (e.g. heavy calculations, data processing, video transcoding) is worthless since the CPU has to work to finish the tasks, while I/O operations are external and server does nothing while waiting for that operations to finish, thus it can go to the next tasks.</li> <li>Running CPU-intensive tasks in other threads also isn't effective, because of GIL. In short, GIL allows only one thread to work at a time, which makes it useless for CPU tasks.</li> <li>If you want to optimize CPU intensive tasks you should send them to workers in another process.</li> </ul> <p>Related StackOverflow questions of confused users</p> <ol> <li>https://stackoverflow.com/questions/62976648/architecture-flask-vs-fastapi/70309597#70309597</li> <li>Here you can also check my answer</li> <li>https://stackoverflow.com/questions/65342833/fastapi-uploadfile-is-slow-compared-to-flask</li> <li>https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</li> </ol>"},{"location":"raw_en/#8-custom-base-model-from-day-0","title":"8. Custom base model from day 0","text":"<p>Having a controllable global base model allows us to customize all the models within the app. For example, we could have a standard datetime format or add a super method for all subclasses of the base model.</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, root_validator\n\n\ndef orjson_dumps(v, *, default):\n    # orjson.dumps returns bytes, to match standard json.dumps we need to decode\n    return orjson.dumps(v, default=default).decode()\n\n\ndef convert_datetime_to_gmt(dt: datetime) -&gt; str:\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n\n\nclass ORJSONModel(BaseModel):\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        json_encoders = {datetime: convert_datetime_to_gmt}  # method for customer JSON encoding of datetime fields\n\n    @root_validator()\n    def set_null_microseconds(cls, data: dict) -&gt; dict:\n\"\"\"Drops microseconds in all the datetime field values.\"\"\"\n        datetime_fields = {\n            k: v.replace(microsecond=0)\n            for k, v in data.items()\n            if isinstance(k, datetime)\n        }\n\n        return {**data, **datetime_fields}\n\n    def serializable_dict(self, **kwargs):\n\"\"\"Return a dict which contains only serializable fields.\"\"\"\n        default_dict = super().dict(**kwargs)\n\n        return jsonable_encoder(default_dict)\n</code></pre> <p>In the example above we have decided to make a global base model which:</p> <ul> <li>uses orjson to serialize data</li> <li>drops microseconds to 0 in all date formats</li> <li>serializes all datetime fields to standard format with explicit timezone</li> </ul>"},{"location":"raw_en/#9-docs","title":"9. Docs","text":"<ol> <li>Unless your API is public, hide docs by default. Show it explicitly on the selected envs only.</li> </ol> <pre><code>from fastapi import FastAPI\nfrom starlette.config import Config\n\nconfig = Config(\".env\")  # parse .env file for env variables\n\nENVIRONMENT = config(\"ENVIRONMENT\")  # get current env name\nSHOW_DOCS_ENVIRONMENT = (\"local\", \"staging\")  # explicit list of allowed envs\n\napp_configs = {\"title\": \"My Cool API\"}\nif ENVIRONMENT not in SHOW_DOCS_ENVIRONMENT:\n   app_configs[\"openapi_url\"] = None  # set url for docs as null\n\napp = FastAPI(**app_configs)\n</code></pre> <ol> <li>Help FastAPI to generate an easy-to-understand docs</li> <li>Set <code>response_model</code>, <code>status_code</code>, <code>description</code>, etc.</li> <li>If models and statuses vary, use <code>responses</code> route attribute to add docs for different responses</li> </ol> <pre><code>from fastapi import APIRouter, status\n\nrouter = APIRouter()\n\n@router.post(\n    \"/endpoints\",\n    response_model=DefaultResponseModel,  # default response pydantic model \n    status_code=status.HTTP_201_CREATED,  # default status code\n    description=\"Description of the well documented endpoint\",\n    tags=[\"Endpoint Category\"],\n    summary=\"Summary of the Endpoint\",\n    responses={\n        status.HTTP_200_OK: {\n            \"model\": OkResponse, # custom pydantic model for 200 response\n            \"description\": \"Ok Response\",\n        },\n        status.HTTP_201_CREATED: {\n            \"model\": CreatedResponse,  # custom pydantic model for 201 response\n            \"description\": \"Creates something from user request \",\n        },\n        status.HTTP_202_ACCEPTED: {\n            \"model\": AcceptedResponse,  # custom pydantic model for 202 response\n            \"description\": \"Accepts request and handles it later\",\n        },\n    },\n)\nasync def documented_route():\n    pass\n</code></pre> <p>Will generate docs like this: </p>"},{"location":"raw_en/#10-use-pydantics-basesettings-for-configs","title":"10. Use Pydantic's BaseSettings for configs","text":"<p>Pydantic gives a powerful tool to parse environment variables and process them with its validators.</p> <pre><code>from pydantic import AnyUrl, BaseSettings, PostgresDsn\n\nclass AppSettings(BaseSettings):\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        env_prefix = \"app_\"\n\n    DATABASE_URL: PostgresDsn\n    IS_GOOD_ENV: bool = True\n    ALLOWED_CORS_ORIGINS: set[AnyUrl]\n</code></pre>"},{"location":"raw_en/#11-sqlalchemy-set-db-keys-naming-convention","title":"11. SQLAlchemy: Set DB keys naming convention","text":"<p>Explicitly setting the indexes' namings according to your database's convention is preferable over sqlalchemy's.</p> <pre><code>from sqlalchemy import MetaData\n\nPOSTGRES_INDEXES_NAMING_CONVENTION = {\n    \"ix\": \"%(column_0_label)s_idx\",\n    \"uq\": \"%(table_name)s_%(column_0_name)s_key\",\n    \"ck\": \"%(table_name)s_%(constraint_name)s_check\",\n    \"fk\": \"%(table_name)s_%(column_0_name)s_fkey\",\n    \"pk\": \"%(table_name)s_pkey\",\n}\nmetadata = MetaData(naming_convention=POSTGRES_INDEXES_NAMING_CONVENTION)\n</code></pre>"},{"location":"raw_en/#12-migrations-alembic","title":"12. Migrations. Alembic","text":"<ol> <li>Migrations must be static and revertable. If your migrations depend on dynamically generated data, then make sure the only thing that is dynamic is the data itself, not its structure.</li> <li>Generate migrations with descriptive names &amp; slugs. Slug is required and should explain the changes.</li> <li>Set human-readable file template for new migrations. We use <code>*date*_*slug*.py</code> pattern, e.g. <code>2022-08-24_post_content_idx.py</code></li> </ol> <pre><code># alembic.ini\nfile_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s\n</code></pre>"},{"location":"raw_en/#13-set-db-naming-convention","title":"13. Set DB naming convention","text":"<p>Being consistent with names is important. Some rules we followed:</p> <ol> <li>lower_case_snake</li> <li>singular form (e.g. <code>post</code>, <code>post_like</code>, <code>user_playlist</code>)</li> <li>group similar tables with module prefix, e.g. <code>payment_account</code>, <code>payment_bill</code>, <code>post</code>, <code>post_like</code></li> <li>stay consistent across tables, but concrete namings are ok, e.g.</li> <li>use <code>profile_id</code> in all tables, but if some of them need only profiles that are creators, use <code>creator_id</code></li> <li>use <code>post_id</code> for all abstract tables like <code>post_like</code>, <code>post_view</code>, but use concrete naming in relevant modules like <code>course_id</code> in <code>chapters.course_id</code></li> <li><code>_at</code> suffix for datetime</li> <li><code>_date</code> suffix for date</li> </ol>"},{"location":"raw_en/#14-set-tests-client-async-from-day-0","title":"14. Set tests client async from day 0","text":"<p>Writing integration tests with DB will most likely lead to messed up event loop errors in the future. Set the async test client immediately, e.g. async_asgi_testclient or httpx</p> <pre><code>import pytest\nfrom async_asgi_testclient import TestClient\n\nfrom src.main import app  # inited FastAPI app\n\n\n@pytest.fixture\nasync def client():\n    host, port = \"127.0.0.1\", \"5555\"\n    scope = {\"client\": (host, port)}\n\n    async with TestClient(\n        app, scope=scope, headers={\"X-User-Fingerprint\": \"Test\"}\n    ) as client:\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_create_post(client: TestClient):\n    resp = await client.post(\"/posts\")\n\n    assert resp.status_code == 201\n</code></pre> <p>Unless you have sync db connections (excuse me?) or aren't planning to write integration tests.</p>"},{"location":"raw_en/#15-backgroundtasks--asynciocreate_task","title":"15. BackgroundTasks &gt; asyncio.create_task","text":"<p>BackgroundTasks can effectively run both blocking and non-blocking I/O operations the same way FastAPI handles blocking routes (<code>sync</code> tasks are run in a threadpool, while <code>async</code> tasks are awaited later)</p> <ul> <li>Don't lie to the worker and don't mark blocking I/O operations as <code>async</code></li> <li>Don't use it for heavy CPU intensive tasks.</li> </ul> <pre><code>from fastapi import APIRouter, BackgroundTasks\nfrom pydantic import UUID4\n\nfrom src.notifications import service as notifications_service\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/{user_id}/email\")\nasync def send_user_email(worker: BackgroundTasks, user_id: UUID4):\n\"\"\"Send email to user\"\"\"\n    worker.add_task(notifications_service.send_email, user_id)  # send email after responding client\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"raw_en/#16-typing-is-important","title":"16. Typing is important","text":"<p>FastAPI, Pydantic, and modern IDEs encourage to take use of type hints.</p> <p>Without Type Hints</p> <p></p> <p>With Type Hints</p> <p></p>"},{"location":"raw_en/#17-save-files-in-chunks","title":"17. Save files in chunks","text":"<p>Don't hope your clients will send small files.</p> <pre><code>import aiofiles\nfrom fastapi import UploadFile\n\nDEFAULT_CHUNK_SIZE = 1024 * 1024 * 50  # 50 megabytes\n\nasync def save_video(video_file: UploadFile):\n   async with aiofiles.open(\"/file/path/name.mp4\", \"wb\") as f:\n     while chunk := await video_file.read(DEFAULT_CHUNK_SIZE):\n         await f.write(chunk)\n</code></pre>"},{"location":"raw_en/#18-be-careful-with-dynamic-pydantic-fields","title":"18. Be careful with dynamic pydantic fields","text":"<p>If you have a pydantic field that can accept a union of types, be sure the validator explicitly knows the difference between those types.</p> <pre><code>from pydantic import BaseModel\n\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n\nclass Post(BaseModel):\n   content: Article | Video\n\n\npost = Post(content={\"video_id\": 1, \"text\": \"text\"})\nprint(type(post.content))\n# OUTPUT: Article\n# Article is very inclusive and all fields are optional, allowing any dict to become valid\n</code></pre> <p>Solutions:</p> <ol> <li>Validate input has only allowed valid fields and raise error if unknowns are provided</li> </ol> <pre><code>from pydantic import BaseModel, Extra\n\nclass Article(BaseModel):\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Video(BaseModel):\n   video_id: int\n   text: str | None\n   extra: str | None\n\n   class Config:\n        extra = Extra.forbid\n\n\nclass Post(BaseModel):\n   content: Article | Video\n</code></pre> <ol> <li>Use Pydantic's Smart Union (&gt;v1.9) if fields are simple</li> </ol> <p>It's a good solution if the fields are simple like <code>int</code> or <code>bool</code>, but it doesn't work for complex fields like classes.</p> <p>Without Smart Union</p> <pre><code>from pydantic import BaseModel\n\n\nclass Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: True\nprint(type(p.field_2))\n# OUTPUT: int\nprint(type(p.content))\n# OUTPUT: Article\n</code></pre> <p>With Smart Union</p> <pre><code>class Post(BaseModel):\n   field_1: bool | int\n   field_2: int | str\n   content: Article | Video\n\n   class Config:\n      smart_union = True\n\n\np = Post(field_1=1, field_2=\"1\", content={\"video_id\": 1})\nprint(p.field_1)\n# OUTPUT: 1\nprint(type(p.field_2))\n# OUTPUT: str\nprint(type(p.content))\n# OUTPUT: Article, because smart_union doesn't work for complex fields like classes\n</code></pre> <ol> <li>Fast Workaround</li> </ol> <p>Order field types properly: from the most strict ones to loose ones.</p> <pre><code>class Post(BaseModel):\n   content: Video | Article\n</code></pre>"},{"location":"raw_en/#19-sql-first-pydantic-second","title":"19. SQL-first, Pydantic-second","text":"<ul> <li>Usually, database handles data processing much faster and cleaner than CPython will ever do.</li> <li>It's preferable to do all the complex joins and simple data manipulations with SQL.</li> <li>It's preferable to aggregate JSONs in DB for responses with nested objects.</li> </ul> <pre><code># src.posts.service\nfrom typing import Mapping\n\nfrom pydantic import UUID4\nfrom sqlalchemy import desc, func, select, text\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom src.database import database, posts, profiles, post_review, products\n\nasync def get_posts(\n    creator_id: UUID4, *, limit: int = 10, offset: int = 0\n) -&gt; list[Mapping]: \n    select_query = (\n        select(\n            (\n                posts.c.id,\n                posts.c.type,\n                posts.c.slug,\n                posts.c.title,\n                func.json_build_object(\n                   text(\"'id', profiles.id\"),\n                   text(\"'first_name', profiles.first_name\"),\n                   text(\"'last_name', profiles.last_name\"),\n                   text(\"'username', profiles.username\"),\n                ).label(\"creator\"),\n            )\n        )\n        .select_from(posts.join(profiles, posts.c.owner_id == profiles.c.id))\n        .where(posts.c.owner_id == creator_id)\n        .limit(limit)\n        .offset(offset)\n        .group_by(\n            posts.c.id,\n            posts.c.type,\n            posts.c.slug,\n            posts.c.title,\n            profiles.c.id,\n            profiles.c.first_name,\n            profiles.c.last_name,\n            profiles.c.username,\n            profiles.c.avatar,\n        )\n        .order_by(\n            desc(coalesce(posts.c.updated_at, posts.c.published_at, posts.c.created_at))\n        )\n    )\n\n    return await database.fetch_all(select_query)\n\n# src.posts.schemas\nimport orjson\nfrom enum import Enum\n\nfrom pydantic import BaseModel, UUID4, validator\n\n\nclass PostType(str, Enum):\n    ARTICLE = \"ARTICLE\"\n    COURSE = \"COURSE\"\n\n\nclass Creator(BaseModel):\n    id: UUID4\n    first_name: str\n    last_name: str\n    username: str\n\n\nclass Post(BaseModel):\n    id: UUID4\n    type: PostType\n    slug: str\n    title: str\n    creator: Creator\n\n    @validator(\"creator\", pre=True)  # before default validation\n    def parse_json(cls, creator: str | dict | Creator) -&gt; dict | Creator:\n       if isinstance(creator, str):  # i.e. json\n          return orjson.loads(creator)\n\n       return creator\n\n# src.posts.router\nfrom fastapi import APIRouter, Depends\n\nrouter = APIRouter()\n\n\n@router.get(\"/creators/{creator_id}/posts\", response_model=list[Post])\nasync def get_creator_posts(creator: Mapping = Depends(valid_creator_id)):\n   posts = await service.get_posts(creator[\"id\"])\n\n   return posts\n</code></pre> <p>If an aggregated data form DB is a simple JSON, then take a look at Pydantic's <code>Json</code> field type, which will load raw JSON first.</p> <pre><code>from pydantic import BaseModel, Json\n\nclass A(BaseModel):\n    numbers: Json[list[int]]\n    dicts: Json[dict[str, int]]\n\nvalid_a = A(numbers=\"[1, 2, 3]\", dicts='{\"key\": 1000}')  # becomes A(numbers=[1,2,3], dicts={\"key\": 1000})\ninvalid_a = A(numbers='[\"a\", \"b\", \"c\"]', dicts='{\"key\": \"str instead of int\"}')  # raises ValueError\n</code></pre>"},{"location":"raw_en/#20-validate-hosts-if-users-can-send-publicly-available-urls","title":"20. Validate hosts, if users can send publicly available URLs","text":"<p>For example, we have a specific endpoint which:</p> <ol> <li>accepts media file from the user,</li> <li>generates unique url for this file,</li> <li>returns url to user,</li> <li>which they will use in other endpoints like <code>PUT /profiles/me</code>, <code>POST /posts</code></li> <li>these endpoints accept files only from whitelisted hosts</li> <li>uploads file to AWS with this name and matching URL.</li> </ol> <p>If we don't whitelist URL hosts, then bad users will have a chance to upload dangerous links.</p> <pre><code>from pydantic import AnyUrl, BaseModel\n\nALLOWED_MEDIA_URLS = {\"mysite.com\", \"mysite.org\"}\n\nclass CompanyMediaUrl(AnyUrl):\n    @classmethod\n    def validate_host(cls, parts: dict) -&gt; tuple[str, str, str, bool]:\n\"\"\"Extend pydantic's AnyUrl validation to whitelist URL hosts.\"\"\"\n        host, tld, host_type, rebuild = super().validate_host(parts)\n        if host not in ALLOWED_MEDIA_URLS:\n            raise ValueError(\n                \"Forbidden host url. Upload files only to internal services.\"\n            )\n\n        return host, tld, host_type, rebuild\n\n\nclass Profile(BaseModel):\n    avatar_url: CompanyMediaUrl  # only whitelisted urls for avatar\n</code></pre>"},{"location":"raw_en/#21-raise-a-valueerror-in-custom-pydantic-validators-if-schema-directly-faces-the-client","title":"21. Raise a ValueError in custom pydantic validators, if schema directly faces the client","text":"<p>It will return a nice detailed response to users.</p> <pre><code># src.profiles.schemas\nfrom pydantic import BaseModel, validator\n\nclass ProfileCreate(BaseModel):\n    username: str\n\n    @validator(\"username\")\n    def validate_bad_words(cls, username: str):\n        if username  == \"me\":\n            raise ValueError(\"bad username, choose another\")\n\n        return username\n\n\n# src.profiles.routes\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/profiles\")\nasync def get_creator_posts(profile_data: ProfileCreate):\n   pass\n</code></pre> <p>Response Example:</p> <p></p>"},{"location":"raw_en/#22-dont-forget-fastapi-converts-response-pydantic-object-to-dict-then-to-an-instance-of-responsemodel-then-to-dict-then-to-json","title":"22. Don't forget FastAPI converts Response Pydantic Object to Dict then to an instance of ResponseModel then to Dict then to JSON","text":"<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel, root_validator\n\napp = FastAPI()\n\n\nclass ProfileResponse(BaseModel):\n    @root_validator\n    def debug_usage(cls, data: dict):\n        print(\"created pydantic model\")\n\n        return data\n\n    def dict(self, *args, **kwargs):\n        print(\"called dict\")\n        return super().dict(*args, **kwargs)\n\n\n@app.get(\"/\", response_model=ProfileResponse)\nasync def root():\n    return ProfileResponse()\n</code></pre> <p>Logs Output:</p> <pre><code>[INFO] [2022-08-28 12:00:00.000000] created pydantic model\n[INFO] [2022-08-28 12:00:00.000010] called dict\n[INFO] [2022-08-28 12:00:00.000020] created pydantic model\n[INFO] [2022-08-28 12:00:00.000030] called dict\n</code></pre>"},{"location":"raw_en/#23-if-you-must-use-sync-sdk-then-run-it-in-a-thread-pool","title":"23. If you must use sync SDK, then run it in a thread pool","text":"<p>If you must use a library to interact with external services, and it's not <code>async</code>, then make the HTTP calls in an external worker thread.</p> <p>For a simple example, we could use our well-known <code>run_in_threadpool</code> from starlette.</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.concurrency import run_in_threadpool\nfrom my_sync_library import SyncAPIClient \n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def call_my_sync_library():\n    my_data = await service.get_my_data()\n\n    client = SyncAPIClient()\n    await run_in_threadpool(client.make_request, data=my_data)\n</code></pre>"},{"location":"raw_en/#24-use-linters-black-isort-autoflake","title":"24. Use linters (black, isort, autoflake)","text":"<p>With linters, you can forget about formatting the code and focus on writing the business logic.</p> <p>Black is the uncompromising code formatter that eliminates so many small decisions you have to make during development. Other linters help you write cleaner code and follow the PEP8.</p> <p>It's a popular good practice to use pre-commit hooks, but just using the script was ok for us.</p> <pre><code>#!/bin/sh -e\nset -x\n\nautoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place src tests --exclude=__init__.py\nisort src tests --profile black\nblack src tests\n</code></pre>"},{"location":"raw_en/#bonus-section","title":"Bonus Section","text":"<p>Some very kind people shared their own experience and best practices that are definitely worth reading. Check them out at issues section of the project.</p> <p>For instance, lowercase00 has described in details their best practices working with permissions &amp; auth, class-based services &amp; views, task queues, custom response serializers, configuration with dynaconf, etc.  </p> <p>If you have something to share about your experience working with FastAPI, whether it's good or bad, you are very welcome to create a new issue. It is our pleasure to read it.</p>"},{"location":"git/git-branch-manage/","title":"Git\u5206\u652f\u7ba1\u7406\u7b56\u7565","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git\u5206\u652f\u7ba1\u7406\u7b56\u7565</p> <p>\u5982\u679c\u4f60\u4e25\u8083\u5bf9\u5f85\u7f16\u7a0b\uff0c\u5c31\u5fc5\u5b9a\u4f1a\u4f7f\u7528\"\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\"\uff08Version Control System\uff09\u3002</p> <p>\u773c\u4e0b\u6700\u6d41\u884c\u7684\"\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\"\uff0c\u975eGit\u83ab\u5c5e\u3002</p> <p></p> <p>\u76f8\u6bd4\u540c\u7c7b\u8f6f\u4ef6\uff0cGit\u6709\u5f88\u591a\u4f18\u70b9\u3002\u5176\u4e2d\u5f88\u663e\u8457\u7684\u4e00\u70b9\uff0c\u5c31\u662f\u7248\u672c\u7684\u5206\u652f\uff08branch\uff09\u548c\u5408\u5e76\uff08merge\uff09\u5341\u5206\u65b9\u4fbf\u3002\u6709\u4e9b\u4f20\u7edf\u7684\u7248\u672c\u7ba1\u7406\u8f6f\u4ef6\uff0c\u5206\u652f\u64cd\u4f5c\u5b9e\u9645\u4e0a\u4f1a\u751f\u6210\u4e00\u4efd\u73b0\u6709\u4ee3\u7801\u7684\u7269\u7406\u62f7\u8d1d\uff0c\u800cGit\u53ea\u751f\u6210\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u7248\u672c\uff08\u53c8\u79f0\"\u5feb\u7167\"\uff09\u7684\u6307\u9488\uff0c\u56e0\u6b64\u975e\u5e38\u5feb\u6377\u6613\u7528\u3002</p> <p>\u4f46\u662f\uff0c\u592a\u65b9\u4fbf\u4e86\u4e5f\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\u3002\u5982\u679c\u4f60\u4e0d\u52a0\u6ce8\u610f\uff0c\u5f88\u53ef\u80fd\u4f1a\u7559\u4e0b\u4e00\u4e2a\u679d\u8282\u8513\u751f\u3001\u56db\u5904\u5f00\u653e\u7684\u7248\u672c\u5e93\uff0c\u5230\u5904\u90fd\u662f\u5206\u652f\uff0c\u5b8c\u5168\u770b\u4e0d\u51fa\u4e3b\u5e72\u53d1\u5c55\u7684\u8109\u7edc\u3002</p> <p></p> <p>Vincent Driessen\u63d0\u51fa\u4e86\u4e00\u4e2a\u5206\u652f\u7ba1\u7406\u7684\u7b56\u7565\uff0c\u6211\u89c9\u5f97\u975e\u5e38\u503c\u5f97\u501f\u9274\u3002\u5b83\u53ef\u4ee5\u4f7f\u5f97\u7248\u672c\u5e93\u7684\u6f14\u8fdb\u4fdd\u6301\u7b80\u6d01\uff0c\u4e3b\u5e72\u6e05\u6670\uff0c\u5404\u4e2a\u5206\u652f\u5404\u53f8\u5176\u804c\u3001\u4e95\u4e95\u6709\u6761\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u4e9b\u7b56\u7565\u5bf9\u6240\u6709\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\u90fd\u9002\u7528\uff0cGit\u53ea\u662f\u7528\u6765\u4e3e\u4f8b\u800c\u5df2\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089Git\uff0c\u8df3\u8fc7\u4e3e\u4f8b\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"git/git-branch-manage/#\u4e00\u4e3b\u5206\u652fmaster","title":"\u4e00\u3001\u4e3b\u5206\u652fMaster","text":"<p>\u9996\u5148\uff0c\u4ee3\u7801\u5e93\u5e94\u8be5\u6709\u4e00\u4e2a\u3001\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e3b\u5206\u652f\u3002\u6240\u6709\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u6b63\u5f0f\u7248\u672c\uff0c\u90fd\u5728\u8fd9\u4e2a\u4e3b\u5206\u652f\u4e0a\u53d1\u5e03\u3002</p> <p></p> <p>Git\u4e3b\u5206\u652f\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u53eb\u505aMaster\u3002\u5b83\u662f\u81ea\u52a8\u5efa\u7acb\u7684\uff0c\u7248\u672c\u5e93\u521d\u59cb\u5316\u4ee5\u540e\uff0c\u9ed8\u8ba4\u5c31\u662f\u5728\u4e3b\u5206\u652f\u5728\u8fdb\u884c\u5f00\u53d1\u3002</p>"},{"location":"git/git-branch-manage/#\u4e8c\u5f00\u53d1\u5206\u652fdevelop","title":"\u4e8c\u3001\u5f00\u53d1\u5206\u652fDevelop","text":"<p>\u4e3b\u5206\u652f\u53ea\u7528\u6765\u5206\u5e03\u91cd\u5927\u7248\u672c\uff0c\u65e5\u5e38\u5f00\u53d1\u5e94\u8be5\u5728\u53e6\u4e00\u6761\u5206\u652f\u4e0a\u5b8c\u6210\u3002\u6211\u4eec\u628a\u5f00\u53d1\u7528\u7684\u5206\u652f\uff0c\u53eb\u505aDevelop\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5206\u652f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u4ee3\u7801\u7684\u6700\u65b0\u9694\u591c\u7248\u672c\uff08nightly\uff09\u3002\u5982\u679c\u60f3\u6b63\u5f0f\u5bf9\u5916\u53d1\u5e03\uff0c\u5c31\u5728Master\u5206\u652f\u4e0a\uff0c\u5bf9Develop\u5206\u652f\u8fdb\u884c\"\u5408\u5e76\"\uff08merge\uff09\u3002</p> <p>Git\u521b\u5efaDevelop\u5206\u652f\u7684\u547d\u4ee4\uff1a</p> <pre><code>git checkout -b develop master\n</code></pre> <p>\u5c06Develop\u5206\u652f\u53d1\u5e03\u5230Master\u5206\u652f\u7684\u547d\u4ee4\uff1a</p> <pre><code># \u5207\u6362\u5230Master\u5206\u652f\ngit checkout master\n\n# \u5bf9Develop\u5206\u652f\u8fdb\u884c\u5408\u5e76\ngit merge --no-ff develop\n</code></pre> <p>\u8fd9\u91cc\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u4e0a\u4e00\u6761\u547d\u4ee4\u7684<code>--no-ff</code>\u53c2\u6570\u662f\u4ec0\u4e48\u610f\u601d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGit\u6267\u884c\"\u5feb\u8fdb\u5f0f\u5408\u5e76\"\uff08fast-farward merge\uff09\uff0c\u4f1a\u76f4\u63a5\u5c06Master\u5206\u652f\u6307\u5411Develop\u5206\u652f\u3002</p> <p></p> <p>\u4f7f\u7528<code>--no-ff</code>\u53c2\u6570\u540e\uff0c\u4f1a\u6267\u884c\u6b63\u5e38\u5408\u5e76\uff0c\u5728Master\u5206\u652f\u4e0a\u751f\u6210\u4e00\u4e2a\u65b0\u8282\u70b9\u3002\u4e3a\u4e86\u4fdd\u8bc1\u7248\u672c\u6f14\u8fdb\u7684\u6e05\u6670\uff0c\u6211\u4eec\u5e0c\u671b\u91c7\u7528\u8fd9\u79cd\u505a\u6cd5\u3002\u5173\u4e8e\u5408\u5e76\u7684\u66f4\u591a\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003Benjamin Sandofsky\u7684\u300aUnderstanding the Git Workflow\u300b\u3002</p> <p></p>"},{"location":"git/git-branch-manage/#\u4e09\u4e34\u65f6\u6027\u5206\u652f","title":"\u4e09\u3001\u4e34\u65f6\u6027\u5206\u652f","text":"<p>\u524d\u9762\u8bb2\u5230\u7248\u672c\u5e93\u7684\u4e24\u6761\u4e3b\u8981\u5206\u652f\uff1aMaster\u548cDevelop\u3002\u524d\u8005\u7528\u4e8e\u6b63\u5f0f\u53d1\u5e03\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5e38\u5f00\u53d1\u3002\u5176\u5b9e\uff0c\u5e38\u8bbe\u5206\u652f\u53ea\u9700\u8981\u8fd9\u4e24\u6761\u5c31\u591f\u4e86\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u4e86\u3002</p> <p>\u4f46\u662f\uff0c\u9664\u4e86\u5e38\u8bbe\u5206\u652f\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4e34\u65f6\u6027\u5206\u652f\uff0c\u7528\u4e8e\u5e94\u5bf9\u4e00\u4e9b\u7279\u5b9a\u76ee\u7684\u7684\u7248\u672c\u5f00\u53d1\u3002\u4e34\u65f6\u6027\u5206\u652f\u4e3b\u8981\u6709\u4e09\u79cd\uff1a</p> <pre><code>* \u529f\u80fd\uff08feature\uff09\u5206\u652f\n\n* \u9884\u53d1\u5e03\uff08release\uff09\u5206\u652f\n\n* \u4fee\u8865bug\uff08fixbug\uff09\u5206\u652f\n</code></pre> <p>\u8fd9\u4e09\u79cd\u5206\u652f\u90fd\u5c5e\u4e8e\u4e34\u65f6\u6027\u9700\u8981\uff0c\u4f7f\u7528\u5b8c\u4ee5\u540e\uff0c\u5e94\u8be5\u5220\u9664\uff0c\u4f7f\u5f97\u4ee3\u7801\u5e93\u7684\u5e38\u8bbe\u5206\u652f\u59cb\u7ec8\u53ea\u6709Master\u548cDevelop\u3002</p>"},{"location":"git/git-branch-manage/#\u56db-\u529f\u80fd\u5206\u652f","title":"\u56db\u3001 \u529f\u80fd\u5206\u652f","text":"<p>\u63a5\u4e0b\u6765\uff0c\u4e00\u4e2a\u4e2a\u6765\u770b\u8fd9\u4e09\u79cd\"\u4e34\u65f6\u6027\u5206\u652f\"\u3002</p> <p>\u7b2c\u4e00\u79cd\u662f\u529f\u80fd\u5206\u652f\uff0c\u5b83\u662f\u4e3a\u4e86\u5f00\u53d1\u67d0\u79cd\u7279\u5b9a\u529f\u80fd\uff0c\u4eceDevelop\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\u3002\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u8981\u518d\u5e76\u5165Develop\u3002</p> <p></p> <p>\u529f\u80fd\u5206\u652f\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u91c7\u7528feature-*\u7684\u5f62\u5f0f\u547d\u540d\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a\u529f\u80fd\u5206\u652f\uff1a</p> <pre><code>git checkout -b feature-x develop\n</code></pre> <p>\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5c06\u529f\u80fd\u5206\u652f\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff feature-x\n</code></pre> <p>\u5220\u9664feature\u5206\u652f\uff1a</p> <pre><code>git branch -d feature-x\n</code></pre>"},{"location":"git/git-branch-manage/#\u4e94\u9884\u53d1\u5e03\u5206\u652f","title":"\u4e94\u3001\u9884\u53d1\u5e03\u5206\u652f","text":"<p>\u7b2c\u4e8c\u79cd\u662f\u9884\u53d1\u5e03\u5206\u652f\uff0c\u5b83\u662f\u6307\u53d1\u5e03\u6b63\u5f0f\u7248\u672c\u4e4b\u524d\uff08\u5373\u5408\u5e76\u5230Master\u5206\u652f\u4e4b\u524d\uff09\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6709\u4e00\u4e2a\u9884\u53d1\u5e03\u7684\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u9884\u53d1\u5e03\u5206\u652f\u662f\u4eceDevelop\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\uff0c\u9884\u53d1\u5e03\u7ed3\u675f\u4ee5\u540e\uff0c\u5fc5\u987b\u5408\u5e76\u8fdbDevelop\u548cMaster\u5206\u652f\u3002\u5b83\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u91c7\u7528release-*\u7684\u5f62\u5f0f\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a\u9884\u53d1\u5e03\u5206\u652f\uff1a</p> <pre><code>git checkout -b release-1.2 develop\n</code></pre> <p>\u786e\u8ba4\u6ca1\u6709\u95ee\u9898\u540e\uff0c\u5408\u5e76\u5230master\u5206\u652f\uff1a</p> <pre><code>git checkout master\n\ngit merge --no-ff release-1.2\n\n# \u5bf9\u5408\u5e76\u751f\u6210\u7684\u65b0\u8282\u70b9\uff0c\u505a\u4e00\u4e2a\u6807\u7b7e\ngit tag -a 1.2\n</code></pre> <p>\u518d\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff release-1.2\n</code></pre> <p>\u6700\u540e\uff0c\u5220\u9664\u9884\u53d1\u5e03\u5206\u652f\uff1a</p> <pre><code>git branch -d release-1.2\n</code></pre>"},{"location":"git/git-branch-manage/#\u516d\u4fee\u8865bug\u5206\u652f","title":"\u516d\u3001\u4fee\u8865bug\u5206\u652f","text":"<p>\u6700\u540e\u4e00\u79cd\u662f\u4fee\u8865bug\u5206\u652f\u3002\u8f6f\u4ef6\u6b63\u5f0f\u53d1\u5e03\u4ee5\u540e\uff0c\u96be\u514d\u4f1a\u51fa\u73b0bug\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u8fdb\u884cbug\u4fee\u8865\u3002</p> <p>\u4fee\u8865bug\u5206\u652f\u662f\u4eceMaster\u5206\u652f\u4e0a\u9762\u5206\u51fa\u6765\u7684\u3002\u4fee\u8865\u7ed3\u675f\u4ee5\u540e\uff0c\u518d\u5408\u5e76\u8fdbMaster\u548cDevelop\u5206\u652f\u3002\u5b83\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u91c7\u7528<code>fixbug-*</code>\u7684\u5f62\u5f0f\u3002</p> <p></p> <p>\u521b\u5efa\u4e00\u4e2a\u4fee\u8865bug\u5206\u652f\uff1a</p> <pre><code>git checkout -b fixbug-0.1 master\n</code></pre> <p>\u4fee\u8865\u7ed3\u675f\u540e\uff0c\u5408\u5e76\u5230master\u5206\u652f\uff1a</p> <pre><code>git checkout master\n\ngit merge --no-ff fixbug-0.1\n\ngit tag -a 0.1.1\n</code></pre> <p>\u518d\u5408\u5e76\u5230develop\u5206\u652f\uff1a</p> <pre><code>git checkout develop\n\ngit merge --no-ff fixbug-0.1\n</code></pre> <p>\u6700\u540e\uff0c\u5220\u9664\"\u4fee\u8865bug\u5206\u652f\"\uff1a</p> <pre><code>git branch -d fixbug-0.1\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-cheat-sheet/","title":"\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355</p> <p>\u6211\u6bcf\u5929\u4f7f\u7528 Git \uff0c\u4f46\u662f\u5f88\u591a\u547d\u4ee4\u8bb0\u4e0d\u4f4f\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u65e5\u5e38\u4f7f\u7528\u53ea\u8981\u8bb0\u4f4f\u4e0b\u56fe6\u4e2a\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u719f\u7ec3\u4f7f\u7528\uff0c\u6050\u6015\u8981\u8bb0\u4f4f60\uff5e100\u4e2a\u547d\u4ee4\u3002</p> <p></p> <p>\u4e0b\u9762\u662f\u6211\u6574\u7406\u7684\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355\u3002\u51e0\u4e2a\u4e13\u7528\u540d\u8bcd\u7684\u8bd1\u540d\u5982\u4e0b\u3002</p> <ul> <li>Workspace\uff1a\u5de5\u4f5c\u533a</li> <li>Index / Stage\uff1a\u6682\u5b58\u533a</li> <li>Repository\uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09</li> <li>Remote\uff1a\u8fdc\u7a0b\u4ed3\u5e93</li> </ul>"},{"location":"git/git-cheat-sheet/#\u4e00\u65b0\u5efa\u4ee3\u7801\u5e93","title":"\u4e00\u3001\u65b0\u5efa\u4ee3\u7801\u5e93","text":"<pre><code># \u5728\u5f53\u524d\u76ee\u5f55\u65b0\u5efa\u4e00\u4e2aGit\u4ee3\u7801\u5e93\n$ git init\n\n# \u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5c06\u5176\u521d\u59cb\u5316\u4e3aGit\u4ee3\u7801\u5e93\n$ git init [project-name]\n\n# \u4e0b\u8f7d\u4e00\u4e2a\u9879\u76ee\u548c\u5b83\u7684\u6574\u4e2a\u4ee3\u7801\u5386\u53f2\n$ git clone [url]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e8c\u914d\u7f6e","title":"\u4e8c\u3001\u914d\u7f6e","text":"<p>Git\u7684\u8bbe\u7f6e\u6587\u4ef6\u4e3a<code>.gitconfig</code>\uff0c\u5b83\u53ef\u4ee5\u5728\u7528\u6237\u4e3b\u76ee\u5f55\u4e0b\uff08\u5168\u5c40\u914d\u7f6e\uff09\uff0c\u4e5f\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\uff08\u9879\u76ee\u914d\u7f6e\uff09\u3002</p> <pre><code># \u663e\u793a\u5f53\u524d\u7684Git\u914d\u7f6e\n$ git config --list\n\n# \u7f16\u8f91Git\u914d\u7f6e\u6587\u4ef6\n$ git config -e [--global]\n\n# \u8bbe\u7f6e\u63d0\u4ea4\u4ee3\u7801\u65f6\u7684\u7528\u6237\u4fe1\u606f\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e09\u589e\u52a0\u5220\u9664\u6587\u4ef6","title":"\u4e09\u3001\u589e\u52a0/\u5220\u9664\u6587\u4ef6","text":"<pre><code># \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a\n$ git add [file1] [file2] ...\n\n# \u6dfb\u52a0\u6307\u5b9a\u76ee\u5f55\u5230\u6682\u5b58\u533a\uff0c\u5305\u62ec\u5b50\u76ee\u5f55\n$ git add [dir]\n\n# \u6dfb\u52a0\u5f53\u524d\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u5230\u6682\u5b58\u533a\n$ git add .\n\n# \u6dfb\u52a0\u6bcf\u4e2a\u53d8\u5316\u524d\uff0c\u90fd\u4f1a\u8981\u6c42\u786e\u8ba4\n# \u5bf9\u4e8e\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u591a\u5904\u53d8\u5316\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5206\u6b21\u63d0\u4ea4\n$ git add -p\n\n# \u5220\u9664\u5de5\u4f5c\u533a\u6587\u4ef6\uff0c\u5e76\u4e14\u5c06\u8fd9\u6b21\u5220\u9664\u653e\u5165\u6682\u5b58\u533a\n$ git rm [file1] [file2] ...\n\n# \u505c\u6b62\u8ffd\u8e2a\u6307\u5b9a\u6587\u4ef6\uff0c\u4f46\u8be5\u6587\u4ef6\u4f1a\u4fdd\u7559\u5728\u5de5\u4f5c\u533a\n$ git rm --cached [file]\n\n# \u6539\u540d\u6587\u4ef6\uff0c\u5e76\u4e14\u5c06\u8fd9\u4e2a\u6539\u540d\u653e\u5165\u6682\u5b58\u533a\n$ git mv [file-original] [file-renamed]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u56db\u4ee3\u7801\u63d0\u4ea4","title":"\u56db\u3001\u4ee3\u7801\u63d0\u4ea4","text":"<pre><code># \u63d0\u4ea4\u6682\u5b58\u533a\u5230\u4ed3\u5e93\u533a\n$ git commit -m [message]\n\n# \u63d0\u4ea4\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u4ed3\u5e93\u533a\n$ git commit [file1] [file2] ... -m [message]\n\n# \u63d0\u4ea4\u5de5\u4f5c\u533a\u81ea\u4e0a\u6b21commit\u4e4b\u540e\u7684\u53d8\u5316\uff0c\u76f4\u63a5\u5230\u4ed3\u5e93\u533a\n$ git commit -a\n\n# \u63d0\u4ea4\u65f6\u663e\u793a\u6240\u6709diff\u4fe1\u606f\n$ git commit -v\n\n# \u4f7f\u7528\u4e00\u6b21\u65b0\u7684commit\uff0c\u66ff\u4ee3\u4e0a\u4e00\u6b21\u63d0\u4ea4\n# \u5982\u679c\u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u65b0\u53d8\u5316\uff0c\u5219\u7528\u6765\u6539\u5199\u4e0a\u4e00\u6b21commit\u7684\u63d0\u4ea4\u4fe1\u606f\n$ git commit --amend -m [message]\n\n# \u91cd\u505a\u4e0a\u4e00\u6b21commit\uff0c\u5e76\u5305\u62ec\u6307\u5b9a\u6587\u4ef6\u7684\u65b0\u53d8\u5316\n$ git commit --amend [file1] [file2] ...\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e94\u5206\u652f","title":"\u4e94\u3001\u5206\u652f","text":"<pre><code># \u5217\u51fa\u6240\u6709\u672c\u5730\u5206\u652f\n$ git branch\n\n# \u5217\u51fa\u6240\u6709\u8fdc\u7a0b\u5206\u652f\n$ git branch -r\n\n# \u5217\u51fa\u6240\u6709\u672c\u5730\u5206\u652f\u548c\u8fdc\u7a0b\u5206\u652f\n$ git branch -a\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u4f46\u4f9d\u7136\u505c\u7559\u5728\u5f53\u524d\u5206\u652f\n$ git branch [branch-name]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u5e76\u5207\u6362\u5230\u8be5\u5206\u652f\n$ git checkout -b [branch]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u6307\u5411\u6307\u5b9acommit\n$ git branch [branch] [commit]\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u4e0e\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\n$ git branch --track [branch] [remote-branch]\n\n# \u5207\u6362\u5230\u6307\u5b9a\u5206\u652f\uff0c\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\n$ git checkout [branch-name]\n\n# \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u5206\u652f\n$ git checkout -\n\n# \u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5728\u73b0\u6709\u5206\u652f\u4e0e\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\n$ git branch --set-upstream [branch] [remote-branch]\n\n# \u5408\u5e76\u6307\u5b9a\u5206\u652f\u5230\u5f53\u524d\u5206\u652f\n$ git merge [branch]\n\n# \u9009\u62e9\u4e00\u4e2acommit\uff0c\u5408\u5e76\u8fdb\u5f53\u524d\u5206\u652f\n$ git cherry-pick [commit]\n\n# \u5220\u9664\u5206\u652f\n$ git branch -d [branch-name]\n\n# \u5220\u9664\u8fdc\u7a0b\u5206\u652f\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u516d\u6807\u7b7e","title":"\u516d\u3001\u6807\u7b7e","text":"<pre><code># \u5217\u51fa\u6240\u6709tag\n$ git tag\n\n# \u65b0\u5efa\u4e00\u4e2atag\u5728\u5f53\u524dcommit\n$ git tag [tag]\n\n# \u65b0\u5efa\u4e00\u4e2atag\u5728\u6307\u5b9acommit\n$ git tag [tag] [commit]\n\n# \u5220\u9664\u672c\u5730tag\n$ git tag -d [tag]\n\n# \u5220\u9664\u8fdc\u7a0btag\n$ git push origin :refs/tags/[tagName]\n\n# \u67e5\u770btag\u4fe1\u606f\n$ git show [tag]\n\n# \u63d0\u4ea4\u6307\u5b9atag\n$ git push [remote] [tag]\n\n# \u63d0\u4ea4\u6240\u6709tag\n$ git push [remote] --tags\n\n# \u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u6307\u5411\u67d0\u4e2atag\n$ git checkout -b [branch] [tag]\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e03\u67e5\u770b\u4fe1\u606f","title":"\u4e03\u3001\u67e5\u770b\u4fe1\u606f","text":"<pre><code># \u663e\u793a\u6709\u53d8\u66f4\u7684\u6587\u4ef6\n$ git status\n\n# \u663e\u793a\u5f53\u524d\u5206\u652f\u7684\u7248\u672c\u5386\u53f2\n$ git log\n\n# \u663e\u793acommit\u5386\u53f2\uff0c\u4ee5\u53ca\u6bcf\u6b21commit\u53d1\u751f\u53d8\u66f4\u7684\u6587\u4ef6\n$ git log --stat\n\n# \u641c\u7d22\u63d0\u4ea4\u5386\u53f2\uff0c\u6839\u636e\u5173\u952e\u8bcd\n$ git log -S [keyword]\n\n# \u663e\u793a\u67d0\u4e2acommit\u4e4b\u540e\u7684\u6240\u6709\u53d8\u52a8\uff0c\u6bcf\u4e2acommit\u5360\u636e\u4e00\u884c\n$ git log [tag] HEAD --pretty=format:%s\n\n# \u663e\u793a\u67d0\u4e2acommit\u4e4b\u540e\u7684\u6240\u6709\u53d8\u52a8\uff0c\u5176\"\u63d0\u4ea4\u8bf4\u660e\"\u5fc5\u987b\u7b26\u5408\u641c\u7d22\u6761\u4ef6\n$ git log [tag] HEAD --grep feature\n\n# \u663e\u793a\u67d0\u4e2a\u6587\u4ef6\u7684\u7248\u672c\u5386\u53f2\uff0c\u5305\u62ec\u6587\u4ef6\u6539\u540d\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# \u663e\u793a\u6307\u5b9a\u6587\u4ef6\u76f8\u5173\u7684\u6bcf\u4e00\u6b21diff\n$ git log -p [file]\n\n# \u663e\u793a\u8fc7\u53bb5\u6b21\u63d0\u4ea4\n$ git log -5 --pretty --oneline\n\n# \u663e\u793a\u6240\u6709\u63d0\u4ea4\u8fc7\u7684\u7528\u6237\uff0c\u6309\u63d0\u4ea4\u6b21\u6570\u6392\u5e8f\n$ git shortlog -sn\n\n# \u663e\u793a\u6307\u5b9a\u6587\u4ef6\u662f\u4ec0\u4e48\u4eba\u5728\u4ec0\u4e48\u65f6\u95f4\u4fee\u6539\u8fc7\n$ git blame [file]\n\n# \u663e\u793a\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u7684\u5dee\u5f02\n$ git diff\n\n# \u663e\u793a\u6682\u5b58\u533a\u548c\u4e0a\u4e00\u4e2acommit\u7684\u5dee\u5f02\n$ git diff --cached [file]\n\n# \u663e\u793a\u5de5\u4f5c\u533a\u4e0e\u5f53\u524d\u5206\u652f\u6700\u65b0commit\u4e4b\u95f4\u7684\u5dee\u5f02\n$ git diff HEAD\n\n# \u663e\u793a\u4e24\u6b21\u63d0\u4ea4\u4e4b\u95f4\u7684\u5dee\u5f02\n$ git diff [first-branch]...[second-branch]\n\n# \u663e\u793a\u4eca\u5929\u4f60\u5199\u4e86\u591a\u5c11\u884c\u4ee3\u7801\n$ git diff --shortstat \"@{0 day ago}\"\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u7684\u5143\u6570\u636e\u548c\u5185\u5bb9\u53d8\u5316\n$ git show [commit]\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u53d1\u751f\u53d8\u5316\u7684\u6587\u4ef6\n$ git show --name-only [commit]\n\n# \u663e\u793a\u67d0\u6b21\u63d0\u4ea4\u65f6\uff0c\u67d0\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\n$ git show [commit]:[filename]\n\n# \u663e\u793a\u5f53\u524d\u5206\u652f\u7684\u6700\u8fd1\u51e0\u6b21\u63d0\u4ea4\n$ git reflog\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u516b\u8fdc\u7a0b\u540c\u6b65","title":"\u516b\u3001\u8fdc\u7a0b\u540c\u6b65","text":"<pre><code># \u4e0b\u8f7d\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6240\u6709\u53d8\u52a8\n$ git fetch [remote]\n\n# \u663e\u793a\u6240\u6709\u8fdc\u7a0b\u4ed3\u5e93\n$ git remote -v\n\n# \u663e\u793a\u67d0\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u4fe1\u606f\n$ git remote show [remote]\n\n# \u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5e76\u547d\u540d\n$ git remote add [shortname] [url]\n\n# \u53d6\u56de\u8fdc\u7a0b\u4ed3\u5e93\u7684\u53d8\u5316\uff0c\u5e76\u4e0e\u672c\u5730\u5206\u652f\u5408\u5e76\n$ git pull [remote] [branch]\n\n# \u4e0a\u4f20\u672c\u5730\u6307\u5b9a\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\n$ git push [remote] [branch]\n\n# \u5f3a\u884c\u63a8\u9001\u5f53\u524d\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5373\u4f7f\u6709\u51b2\u7a81\n$ git push [remote] --force\n\n# \u63a8\u9001\u6240\u6709\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\n$ git push [remote] --all\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u4e5d\u64a4\u9500","title":"\u4e5d\u3001\u64a4\u9500","text":"<pre><code># \u6062\u590d\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u5de5\u4f5c\u533a\n$ git checkout [file]\n\n# \u6062\u590d\u67d0\u4e2acommit\u7684\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\n$ git checkout [commit] [file]\n\n# \u6062\u590d\u6682\u5b58\u533a\u7684\u6240\u6709\u6587\u4ef6\u5230\u5de5\u4f5c\u533a\n$ git checkout .\n\n# \u91cd\u7f6e\u6682\u5b58\u533a\u7684\u6307\u5b9a\u6587\u4ef6\uff0c\u4e0e\u4e0a\u4e00\u6b21commit\u4fdd\u6301\u4e00\u81f4\uff0c\u4f46\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset [file]\n\n# \u91cd\u7f6e\u6682\u5b58\u533a\u4e0e\u5de5\u4f5c\u533a\uff0c\u4e0e\u4e0a\u4e00\u6b21commit\u4fdd\u6301\u4e00\u81f4\n$ git reset --hard\n\n# \u91cd\u7f6e\u5f53\u524d\u5206\u652f\u7684\u6307\u9488\u4e3a\u6307\u5b9acommit\uff0c\u540c\u65f6\u91cd\u7f6e\u6682\u5b58\u533a\uff0c\u4f46\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset [commit]\n\n# \u91cd\u7f6e\u5f53\u524d\u5206\u652f\u7684HEAD\u4e3a\u6307\u5b9acommit\uff0c\u540c\u65f6\u91cd\u7f6e\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\uff0c\u4e0e\u6307\u5b9acommit\u4e00\u81f4\n$ git reset --hard [commit]\n\n# \u91cd\u7f6e\u5f53\u524dHEAD\u4e3a\u6307\u5b9acommit\uff0c\u4f46\u4fdd\u6301\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4e0d\u53d8\n$ git reset --keep [commit]\n\n# \u65b0\u5efa\u4e00\u4e2acommit\uff0c\u7528\u6765\u64a4\u9500\u6307\u5b9acommit\n# \u540e\u8005\u7684\u6240\u6709\u53d8\u5316\u90fd\u5c06\u88ab\u524d\u8005\u62b5\u6d88\uff0c\u5e76\u4e14\u5e94\u7528\u5230\u5f53\u524d\u5206\u652f\n$ git revert [commit]\n\n# \u6682\u65f6\u5c06\u672a\u63d0\u4ea4\u7684\u53d8\u5316\u79fb\u9664\uff0c\u7a0d\u540e\u518d\u79fb\u5165\n$ git stash\n$ git stash pop\n</code></pre>"},{"location":"git/git-cheat-sheet/#\u5341\u5176\u4ed6","title":"\u5341\u3001\u5176\u4ed6","text":"<pre><code># \u751f\u6210\u4e00\u4e2a\u53ef\u4f9b\u53d1\u5e03\u7684\u538b\u7f29\u5305\n$ git archive\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-remote/","title":"Git\u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git\u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3</p> <p>Git\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b66\u4f1aGit\u51e0\u4e4e\u6210\u4e86\u5f00\u53d1\u8005\u7684\u5fc5\u5907\u6280\u80fd\u3002</p> <p>Git\u6709\u5f88\u591a\u4f18\u52bf\uff0c\u5176\u4e2d\u4e4b\u4e00\u5c31\u662f\u8fdc\u7a0b\u64cd\u4f5c\u975e\u5e38\u7b80\u4fbf\u3002\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd5\u4e2aGit\u547d\u4ee4\uff0c\u5b83\u4eec\u7684\u6982\u5ff5\u548c\u7528\u6cd5\uff0c\u7406\u89e3\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0Git\u8fdc\u7a0b\u64cd\u4f5c\u5176\u5b9e\u975e\u5e38\u5bb9\u6613\u3002</p> <ul> <li>git clone</li> <li>git remote</li> <li>git fetch</li> <li>git pull</li> <li>git push</li> </ul> <p>\u672c\u6587\u9488\u5bf9Git\u7684\u521d\u7ea7\u7528\u6237\uff0c\u4ece\u6700\u7b80\u5355\u7684\u8bb2\u8d77\uff0c\u4f46\u662f\u9700\u8981\u8bfb\u8005\u5bf9Git\u7684\u57fa\u672c\u7528\u6cd5\u6709\u6240\u4e86\u89e3\u3002\u540c\u65f6\uff0c\u672c\u6587\u6db5\u76d6\u4e0a\u97625\u4e2a\u547d\u4ee4\u7684\u4e3b\u8981\u7528\u6cd5\uff0c\u6240\u4ee5\u5bf9\u4e8e\u719f\u7ec3\u7528\u6237\u4e5f\u6709\u53c2\u8003\u4ef7\u503c\u3002</p> <p></p>"},{"location":"git/git-remote/#\u4e00git-clone","title":"\u4e00\u3001git clone","text":"<p>\u8fdc\u7a0b\u64cd\u4f5c\u7684\u7b2c\u4e00\u6b65\uff0c\u901a\u5e38\u662f\u4ece\u8fdc\u7a0b\u4e3b\u673a\u514b\u9686\u4e00\u4e2a\u4ee3\u7801\u5e93\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230git clone\u547d\u4ee4\u3002</p> <pre><code>git clone &lt;\u4ee3\u7801\u5e93\u7684\u7f51\u5740&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u514b\u9686jQuery\u7684\u4ee3\u7801\u5e93\u3002</p> <pre><code>git clone https://github.com/jquery/jquery.git\n</code></pre> <p>\u8be5\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u4e3b\u673a\u751f\u6210\u4e00\u4e2a\u76ee\u5f55\uff0c\u4e0e\u8fdc\u7a0b\u4e3b\u673a\u7684\u4ee3\u7801\u5e93\u540c\u540d\u3002\u5982\u679c\u8981\u6307\u5b9a\u4e0d\u540c\u7684\u76ee\u5f55\u540d\uff0c\u53ef\u4ee5\u5c06\u76ee\u5f55\u540d\u4f5c\u4e3agit clone\u547d\u4ee4\u7684\u7b2c\u4e8c\u4e2a\u9009\u9879\u3002</p> <pre><code>git clone &lt;\u4ee3\u7801\u5e93\u7684\u7f51\u5740&gt; &lt;\u672c\u5730\u76ee\u5f55\u540d&gt;\n</code></pre> <p>git clone\u652f\u6301\u591a\u79cd\u534f\u8bae\uff0c\u9664\u4e86HTTP(s)\u4ee5\u5916\uff0c\u8fd8\u652f\u6301SSH\u3001Git\u3001\u672c\u5730\u6587\u4ef6\u534f\u8bae\u7b49\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <pre><code>git clone http[s]://example.com/path/to/repo.git/\ngit clone ssh://example.com/path/to/repo.git/\ngit clone git://example.com/path/to/repo.git/\ngit clone /opt/git/project.git \ngit clone file:///opt/git/project.git\ngit clone ftp[s]://example.com/path/to/repo.git/\ngit clone rsync://example.com/path/to/repo.git/\n</code></pre> <p>SSH\u534f\u8bae\u8fd8\u6709\u53e6\u4e00\u79cd\u5199\u6cd5\u3002</p> <pre><code>git clone [user@]example.com:path/to/repo.git/\n</code></pre> <p>\u901a\u5e38\u6765\u8bf4\uff0cGit\u534f\u8bae\u4e0b\u8f7d\u901f\u5ea6\u6700\u5feb\uff0cSSH\u534f\u8bae\u7528\u4e8e\u9700\u8981\u7528\u6237\u8ba4\u8bc1\u7684\u573a\u5408\u3002\u5404\u79cd\u534f\u8bae\u4f18\u52a3\u7684\u8be6\u7ec6\u8ba8\u8bba\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002</p>"},{"location":"git/git-remote/#\u4e8cgit-remote","title":"\u4e8c\u3001git remote","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\uff0cGit\u8981\u6c42\u6bcf\u4e2a\u8fdc\u7a0b\u4e3b\u673a\u90fd\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a\u4e3b\u673a\u540d\u3002git remote\u547d\u4ee4\u5c31\u7528\u4e8e\u7ba1\u7406\u4e3b\u673a\u540d\u3002</p> <p>\u4e0d\u5e26\u9009\u9879\u7684\u65f6\u5019\uff0cgit remote\u547d\u4ee4\u5217\u51fa\u6240\u6709\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>$ git remote\norigin\n</code></pre> <p>\u4f7f\u7528-v\u9009\u9879\uff0c\u53ef\u4ee5\u53c2\u770b\u8fdc\u7a0b\u4e3b\u673a\u7684\u7f51\u5740\u3002</p> <pre><code>$ git remote -v\norigin git@github.com:jquery/jquery.git (fetch)\norigin git@github.com:jquery/jquery.git (push)\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5f53\u524d\u53ea\u6709\u4e00\u53f0\u8fdc\u7a0b\u4e3b\u673a\uff0c\u53eb\u505aorigin\uff0c\u4ee5\u53ca\u5b83\u7684\u7f51\u5740\u3002</p> <p>Git\u89c4\u5b9a\uff0c\u514b\u9686\u4ee3\u7801\u5e93\u7684\u65f6\u5019\uff0c\u6240\u4f7f\u7528\u7684\u8fdc\u7a0b\u4e3b\u673a\u81ea\u52a8\u88ab\u547d\u540d\u4e3aorigin\u3002\u5982\u679c\u60f3\u7528\u5176\u4ed6\u7684\u4e3b\u673a\u540d\uff0c\u9700\u8981\u7528git clone\u547d\u4ee4\u7684-o\u9009\u9879\u6307\u5b9a\u3002</p> <pre><code>$ git clone -o jQuery https://github.com/jquery/jquery.git\n$ git remote\njQuery\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u514b\u9686\u7684\u65f6\u5019\uff0c\u6307\u5b9a\u8fdc\u7a0b\u4e3b\u673a\u53eb\u505ajQuery\u3002</p> <p>git remote show\u547d\u4ee4\u52a0\u4e0a\u4e3b\u673a\u540d\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u4e3b\u673a\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <pre><code>git remote show &lt;\u4e3b\u673a\u540d&gt;\n</code></pre> <p>git remote add\u547d\u4ee4\u7528\u4e8e\u6dfb\u52a0\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>git remote add &lt;\u4e3b\u673a\u540d&gt; &lt;\u7f51\u5740&gt;\n</code></pre> <p>git remote rm\u547d\u4ee4\u7528\u4e8e\u5220\u9664\u8fdc\u7a0b\u4e3b\u673a\u3002</p> <pre><code>git remote rm &lt;\u4e3b\u673a\u540d&gt;\n</code></pre> <p>git remote rename\u547d\u4ee4\u7528\u4e8e\u8fdc\u7a0b\u4e3b\u673a\u7684\u6539\u540d\u3002</p> <pre><code>git remote rename &lt;\u539f\u4e3b\u673a\u540d&gt; &lt;\u65b0\u4e3b\u673a\u540d&gt;\n</code></pre>"},{"location":"git/git-remote/#\u4e09git-fetch","title":"\u4e09\u3001git fetch","text":"<p>\u4e00\u65e6\u8fdc\u7a0b\u4e3b\u673a\u6709\u4e86\u66f4\u65b0\uff08git\u672f\u8bed\u53eb\u505acommit\uff09\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u4e9b\u66f4\u65b0\u53d6\u56de\u672c\u5730\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230git fetch\u547d\u4ee4\u3002</p> <pre><code>git fetch &lt;\u8fdc\u7a0b\u4e3b\u673a&gt;\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u5c06\u67d0\u4e2a\u8fdc\u7a0b\u4e3b\u673a\u7684\u66f4\u65b0\uff0c\u5168\u90e8\u53d6\u56de\u672c\u5730\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgit fetch\u53d6\u56de\u6240\u6709\u5206\u652f\uff08branch\uff09\u7684\u66f4\u65b0\u3002\u5982\u679c\u53ea\u60f3\u53d6\u56de\u7279\u5b9a\u5206\u652f\u7684\u66f4\u65b0\uff0c\u53ef\u4ee5\u6307\u5b9a\u5206\u652f\u540d\u3002</p> <pre><code>git fetch &lt;\u8fdc\u7a0b\u4e3b\u673a&gt; &lt;\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u53d6\u56deorigin\u4e3b\u673a\u7684master\u5206\u652f\u3002</p> <pre><code>git fetch origin master\n</code></pre> <p>\u6240\u53d6\u56de\u7684\u66f4\u65b0\uff0c\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8981\u7528\u201c\u8fdc\u7a0b\u4e3b\u673a\u540d/\u5206\u652f\u540d\u201d\u7684\u5f62\u5f0f\u8bfb\u53d6\u3002\u6bd4\u5982origin\u4e3b\u673a\u7684master\uff0c\u5c31\u8981\u7528origin/master\u8bfb\u53d6\u3002</p> <p>git branch\u547d\u4ee4\u7684-r\u9009\u9879\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u8fdc\u7a0b\u5206\u652f\uff0c-a\u9009\u9879\u67e5\u770b\u6240\u6709\u5206\u652f\u3002</p> <pre><code>$ git branch -r\norigin/master\n\n$ git branch -a\n* master\n  remotes/origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u672c\u5730\u4e3b\u673a\u7684\u5f53\u524d\u5206\u652f\u662fmaster\uff0c\u8fdc\u7a0b\u5206\u652f\u662forigin/master\u3002</p> <p>\u53d6\u56de\u8fdc\u7a0b\u4e3b\u673a\u7684\u66f4\u65b0\u4ee5\u540e\uff0c\u53ef\u4ee5\u5728\u5b83\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528git checkout\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u3002</p> <pre><code>git checkout -b newBrach origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5728origin/master\u7684\u57fa\u7840\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u3002</p> <p>\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528git merge\u547d\u4ee4\u6216\u8005git rebase\u547d\u4ee4\uff0c\u5728\u672c\u5730\u5206\u652f\u4e0a\u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u3002</p> <pre><code>$ git merge origin/master\n# \u6216\u8005\n$ git rebase origin/master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\u5728\u5f53\u524d\u5206\u652f\u4e0a\uff0c\u5408\u5e76origin/master\u3002</p>"},{"location":"git/git-remote/#\u56dbgit-pull","title":"\u56db\u3001git pull","text":"<p>git pull\u547d\u4ee4\u7684\u4f5c\u7528\u662f\uff0c\u53d6\u56de\u8fdc\u7a0b\u4e3b\u673a\u67d0\u4e2a\u5206\u652f\u7684\u66f4\u65b0\uff0c\u518d\u4e0e\u672c\u5730\u7684\u6307\u5b9a\u5206\u652f\u5408\u5e76\u3002\u5b83\u7684\u5b8c\u6574\u683c\u5f0f\u7a0d\u7a0d\u6709\u70b9\u590d\u6742\u3002</p> <pre><code>git pull &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;:&lt;\u672c\u5730\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6bd4\u5982\uff0c\u53d6\u56deorigin\u4e3b\u673a\u7684next\u5206\u652f\uff0c\u4e0e\u672c\u5730\u7684master\u5206\u652f\u5408\u5e76\uff0c\u9700\u8981\u5199\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>git pull origin next:master\n</code></pre> <p>\u5982\u679c\u8fdc\u7a0b\u5206\u652f\u662f\u4e0e\u5f53\u524d\u5206\u652f\u5408\u5e76\uff0c\u5219\u5192\u53f7\u540e\u9762\u7684\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git pull origin next\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u53d6\u56deorigin/next\u5206\u652f\uff0c\u518d\u4e0e\u5f53\u524d\u5206\u652f\u5408\u5e76\u3002\u5b9e\u8d28\u4e0a\uff0c\u8fd9\u7b49\u540c\u4e8e\u5148\u505agit fetch\uff0c\u518d\u505agit merge\u3002</p> <pre><code>git fetch origin\ngit merge origin/next\n</code></pre> <p>\u5728\u67d0\u4e9b\u573a\u5408\uff0cGit\u4f1a\u81ea\u52a8\u5728\u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\uff0c\u5efa\u7acb\u4e00\u79cd\u8ffd\u8e2a\u5173\u7cfb\uff08tracking\uff09\u3002\u6bd4\u5982\uff0c\u5728git clone\u7684\u65f6\u5019\uff0c\u6240\u6709\u672c\u5730\u5206\u652f\u9ed8\u8ba4\u4e0e\u8fdc\u7a0b\u4e3b\u673a\u7684\u540c\u540d\u5206\u652f\uff0c\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u672c\u5730\u7684master\u5206\u652f\u81ea\u52a8\u201c\u8ffd\u8e2a\u201dorigin/master\u5206\u652f\u3002</p> <p>Git\u4e5f\u5141\u8bb8\u624b\u52a8\u5efa\u7acb\u8ffd\u8e2a\u5173\u7cfb\u3002</p> <pre><code>git branch --set-upstream master origin/next\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u6307\u5b9amaster\u5206\u652f\u8ffd\u8e2aorigin/next\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u7701\u7565\u8fdc\u7a0b\u5206\u652f\u540d\u3002</p> <pre><code>git pull origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u672c\u5730\u7684\u5f53\u524d\u5206\u652f\u81ea\u52a8\u4e0eorigin\u4e3b\u673a\u7684\u201c\u8ffd\u8e2a\u5206\u652f\u201d\uff08remote-tracking branch\uff09\u8fdb\u884c\u5408\u5e76\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u53ea\u6709\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\uff0c\u8fde\u8fdc\u7a0b\u4e3b\u673a\u540d\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git pull\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5f53\u524d\u5206\u652f\u81ea\u52a8\u4e0e\u552f\u4e00\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\u8fdb\u884c\u5408\u5e76\u3002</p> <p>\u5982\u679c\u5408\u5e76\u9700\u8981\u91c7\u7528rebase\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528--rebase\u9009\u9879\u3002</p> <pre><code>git pull --rebase &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;:&lt;\u672c\u5730\u5206\u652f\u540d&gt;\n</code></pre>"},{"location":"git/git-remote/#\u4e94git-push","title":"\u4e94\u3001git push","text":"<p>git push\u547d\u4ee4\u7528\u4e8e\u5c06\u672c\u5730\u5206\u652f\u7684\u66f4\u65b0\uff0c\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u5b83\u7684\u683c\u5f0f\u4e0egit pull\u547d\u4ee4\u76f8\u4eff\u3002</p> <pre><code>git push &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u672c\u5730\u5206\u652f\u540d&gt;:&lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;\n</code></pre> <p>\u6ce8\u610f\uff0c\u5206\u652f\u63a8\u9001\u987a\u5e8f\u7684\u5199\u6cd5\u662f&lt;\u6765\u6e90\u5730&gt;:&lt;\u76ee\u7684\u5730&gt;\uff0c\u6240\u4ee5git pull\u662f&lt;\u8fdc\u7a0b\u5206\u652f&gt;:&lt;\u672c\u5730\u5206\u652f&gt;\uff0c\u800cgit push\u662f&lt;\u672c\u5730\u5206\u652f&gt;:&lt;\u8fdc\u7a0b\u5206\u652f&gt;\u3002</p> <p>\u5982\u679c\u7701\u7565\u8fdc\u7a0b\u5206\u652f\u540d\uff0c\u5219\u8868\u793a\u5c06\u672c\u5730\u5206\u652f\u63a8\u9001\u4e0e\u4e4b\u5b58\u5728\u201c\u8ffd\u8e2a\u5173\u7cfb\u201d\u7684\u8fdc\u7a0b\u5206\u652f\uff08\u901a\u5e38\u4e24\u8005\u540c\u540d\uff09\uff0c\u5982\u679c\u8be5\u8fdc\u7a0b\u5206\u652f\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u65b0\u5efa\u3002</p> <pre><code>git push origin master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u672c\u5730\u7684master\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\u7684master\u5206\u652f\u3002\u5982\u679c\u540e\u8005\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u65b0\u5efa\u3002</p> <p>\u5982\u679c\u7701\u7565\u672c\u5730\u5206\u652f\u540d\uff0c\u5219\u8868\u793a\u5220\u9664\u6307\u5b9a\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u56e0\u4e3a\u8fd9\u7b49\u540c\u4e8e\u63a8\u9001\u4e00\u4e2a\u7a7a\u7684\u672c\u5730\u5206\u652f\u5230\u8fdc\u7a0b\u5206\u652f\u3002</p> <pre><code>$ git push origin :master\n# \u7b49\u540c\u4e8e\n$ git push origin --delete master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\u5220\u9664origin\u4e3b\u673a\u7684master\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e4b\u95f4\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5219\u672c\u5730\u5206\u652f\u548c\u8fdc\u7a0b\u5206\u652f\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git push origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u5f53\u524d\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\u7684\u5bf9\u5e94\u5206\u652f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u53ea\u6709\u4e00\u4e2a\u8ffd\u8e2a\u5206\u652f\uff0c\u90a3\u4e48\u4e3b\u673a\u540d\u90fd\u53ef\u4ee5\u7701\u7565\u3002</p> <pre><code>git push\n</code></pre> <p>\u5982\u679c\u5f53\u524d\u5206\u652f\u4e0e\u591a\u4e2a\u4e3b\u673a\u5b58\u5728\u8ffd\u8e2a\u5173\u7cfb\uff0c\u5219\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u4e3b\u673a\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u4efb\u4f55\u9009\u9879\u4f7f\u7528git push\u3002</p> <pre><code>git push -u origin master\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u5c06\u672c\u5730\u7684master\u5206\u652f\u63a8\u9001\u5230origin\u4e3b\u673a\uff0c\u540c\u65f6\u6307\u5b9aorigin\u4e3a\u9ed8\u8ba4\u4e3b\u673a\u3002</p> <p>\u4e0d\u5e26\u4efb\u4f55\u9009\u9879\u7684git push\u9ed8\u8ba4\u53ea\u63a8\u9001\u5f53\u524d\u5206\u652f\uff0c\u8fd9\u53eb\u505asimple\u65b9\u5f0f\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cdmatching\u65b9\u5f0f\uff0c\u4f1a\u63a8\u9001\u6240\u6709\u6709\u5bf9\u5e94\u7684\u8fdc\u7a0b\u5206\u652f\u7684\u672c\u5730\u5206\u652f\u3002Git 2.0\u7248\u672c\u4e4b\u524d\uff0c\u9ed8\u8ba4\u91c7\u7528matching\u65b9\u6cd5\uff0c\u73b0\u5728\u6539\u4e3a\u9ed8\u8ba4\u91c7\u7528simple\u65b9\u5f0f\u3002\u5982\u679c\u8981\u4fee\u6539\u8fd9\u4e2a\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u91c7\u7528git config\u547d\u4ee4\u3002</p> <pre><code>$ git config --global push.default matching\n# \u6216\u8005\n$ git config --global push.default simple\n</code></pre> <p>\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5c31\u662f\u4e0d\u7ba1\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u5c06\u672c\u5730\u7684\u6240\u6709\u5206\u652f\u90fd\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\uff0c\u8fd9\u65f6\u9700\u8981\u4f7f\u7528--all\u9009\u9879\u3002</p> <pre><code>git push --all origin\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0c\u5c06\u6240\u6709\u672c\u5730\u5206\u652f\u90fd\u63a8\u9001\u5230origin\u4e3b\u673a\u3002</p> <p>\u5982\u679c\u8fdc\u7a0b\u4e3b\u673a\u7684\u7248\u672c\u6bd4\u672c\u5730\u7248\u672c\u66f4\u65b0\uff0c\u63a8\u9001\u65f6Git\u4f1a\u62a5\u9519\uff0c\u8981\u6c42\u5148\u5728\u672c\u5730\u505agit pull\u5408\u5e76\u5dee\u5f02\uff0c\u7136\u540e\u518d\u63a8\u9001\u5230\u8fdc\u7a0b\u4e3b\u673a\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u4e00\u5b9a\u8981\u63a8\u9001\uff0c\u53ef\u4ee5\u4f7f\u7528--force\u9009\u9879\u3002</p> <pre><code>git push --force origin </code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u4f7f\u7528--force\u9009\u9879\uff0c\u7ed3\u679c\u5bfc\u81f4\u5728\u8fdc\u7a0b\u4e3b\u673a\u4ea7\u751f\u4e00\u4e2a\u201c\u975e\u76f4\u8fdb\u5f0f\u201d\u7684\u5408\u5e76\uff08non-fast-forward merge\uff09\u3002\u9664\u975e\u4f60\u5f88\u786e\u5b9a\u8981\u8fd9\u6837\u505a\uff0c\u5426\u5219\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528--force\u9009\u9879\u3002</p> <p>\u6700\u540e\uff0cgit push\u4e0d\u4f1a\u63a8\u9001\u6807\u7b7e\uff08tag\uff09\uff0c\u9664\u975e\u4f7f\u7528--tags\u9009\u9879\u3002</p> <pre><code>git push origin --tags\n</code></pre> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-use-process/","title":"Git \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b</p> <p>\u56e2\u961f\u5f00\u53d1\u4e2d\uff0c\u9075\u5faa\u4e00\u4e2a\u5408\u7406\u3001\u6e05\u6670\u7684Git\u4f7f\u7528\u6d41\u7a0b\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p> <p>\u5426\u5219\uff0c\u6bcf\u4e2a\u4eba\u90fd\u63d0\u4ea4\u4e00\u5806\u6742\u4e71\u65e0\u7ae0\u7684<code>commit</code>\uff0c\u9879\u76ee\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u96be\u4ee5\u534f\u8c03\u548c\u7ef4\u62a4\u3002</p> <p>\u4e0b\u9762\u662fThoughtBot \u7684Git\u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u3002\u6211\u4ece\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\uff0c\u63a8\u8350\u4f60\u4e5f\u8fd9\u6837\u4f7f\u7528Git\u3002</p> <p></p>"},{"location":"git/git-use-process/#\u7b2c\u4e00\u6b65\u65b0\u5efa\u5206\u652f","title":"\u7b2c\u4e00\u6b65\uff1a\u65b0\u5efa\u5206\u652f","text":"<p>\u9996\u5148\uff0c\u6bcf\u6b21\u5f00\u53d1\u65b0\u529f\u80fd\uff0c\u90fd\u5e94\u8be5\u65b0\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5206\u652f\uff08\u8fd9\u65b9\u9762\u53ef\u4ee5\u53c2\u8003\u300aGit\u5206\u652f\u7ba1\u7406\u7b56\u7565\u300b\uff09\u3002</p> <pre><code># \u83b7\u53d6\u4e3b\u5e72\u6700\u65b0\u4ee3\u7801\n$ git checkout master\n$ git pull\n\n# \u65b0\u5efa\u4e00\u4e2a\u5f00\u53d1\u5206\u652fmyfeature\n$ git checkout -b myfeature\n</code></pre>"},{"location":"git/git-use-process/#\u7b2c\u4e8c\u6b65\u63d0\u4ea4\u5206\u652fcommit","title":"\u7b2c\u4e8c\u6b65\uff1a\u63d0\u4ea4\u5206\u652fcommit","text":"<p>\u5206\u652f\u4fee\u6539\u540e\uff0c\u5c31\u53ef\u4ee5\u63d0\u4ea4commit\u4e86\u3002</p> <pre><code>git add --all\ngit status\ngit commit --verbose\n</code></pre> <p><code>git add</code> \u547d\u4ee4\u7684<code>all</code>\u53c2\u6570\uff0c\u8868\u793a\u4fdd\u5b58\u6240\u6709\u53d8\u5316\uff08\u5305\u62ec\u65b0\u5efa\u3001\u4fee\u6539\u548c\u5220\u9664\uff09\u3002\u4eceGit 2.0\u5f00\u59cb\uff0c<code>all</code>\u662f <code>git add</code> \u7684\u9ed8\u8ba4\u53c2\u6570\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528 <code>git add .</code> \u4ee3\u66ff\u3002</p> <p><code>git status</code> \u547d\u4ee4\uff0c\u7528\u6765\u67e5\u770b\u53d1\u751f\u53d8\u52a8\u7684\u6587\u4ef6\u3002</p> <p><code>git commit</code> \u547d\u4ee4\u7684<code>verbose</code>\u53c2\u6570\uff0c\u4f1a\u5217\u51fa diff \u7684\u7ed3\u679c\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u4e09\u6b65\u64b0\u5199\u63d0\u4ea4\u4fe1\u606f","title":"\u7b2c\u4e09\u6b65\uff1a\u64b0\u5199\u63d0\u4ea4\u4fe1\u606f","text":"<p>\u63d0\u4ea4<code>commit</code>\u65f6\uff0c\u5fc5\u987b\u7ed9\u51fa\u5b8c\u6574\u627c\u8981\u7684\u63d0\u4ea4\u4fe1\u606f\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u8303\u672c\u3002</p> <pre><code>Present-tense summary under 50 characters\n\n* More information about commit (under 72 characters).\n* More information about commit (under 72 characters).\n\nhttp://project.management-system.com/ticket/123\n</code></pre> <p>\u7b2c\u4e00\u884c\u662f\u4e0d\u8d85\u8fc750\u4e2a\u5b57\u7684\u63d0\u8981\uff0c\u7136\u540e\u7a7a\u4e00\u884c\uff0c\u7f57\u5217\u51fa\u6539\u52a8\u539f\u56e0\u3001\u4e3b\u8981\u53d8\u52a8\u3001\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002\u6700\u540e\uff0c\u63d0\u4f9b\u5bf9\u5e94\u7684\u7f51\u5740\uff08\u6bd4\u5982Bug ticket\uff09\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u56db\u6b65\u4e0e\u4e3b\u5e72\u540c\u6b65","title":"\u7b2c\u56db\u6b65\uff1a\u4e0e\u4e3b\u5e72\u540c\u6b65","text":"<p>\u5206\u652f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u8981\u7ecf\u5e38\u4e0e\u4e3b\u5e72\u4fdd\u6301\u540c\u6b65\u3002</p> <pre><code>git fetch origin\ngit rebase origin/master\n</code></pre>"},{"location":"git/git-use-process/#\u7b2c\u4e94\u6b65\u5408\u5e76commit","title":"\u7b2c\u4e94\u6b65\uff1a\u5408\u5e76commit","text":"<p>\u5206\u652f\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5f88\u53ef\u80fd\u6709\u4e00\u5806<code>commit</code>\uff0c\u4f46\u662f\u5408\u5e76\u5230\u4e3b\u5e72\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u5e0c\u671b\u53ea\u6709\u4e00\u4e2a\uff08\u6216\u6700\u591a\u4e24\u4e09\u4e2a\uff09<code>commit</code>\uff0c\u8fd9\u6837\u4e0d\u4ec5\u6e05\u6670\uff0c\u4e5f\u5bb9\u6613\u7ba1\u7406\u3002</p> <p>\u90a3\u4e48\uff0c\u600e\u6837\u624d\u80fd\u5c06\u591a\u4e2a<code>commit</code>\u5408\u5e76\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230 <code>git rebase</code> \u547d\u4ee4\u3002</p> <pre><code>git rebase -i origin/master\n</code></pre> <p><code>git rebase</code>\u547d\u4ee4\u7684i\u53c2\u6570\u8868\u793a\u4e92\u52a8\uff08interactive\uff09\uff0c\u8fd9\u65f6<code>git</code>\u4f1a\u6253\u5f00\u4e00\u4e2a\u4e92\u52a8\u754c\u9762\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002</p> <p>\u4e0b\u9762\u91c7\u7528Tute Costa\u7684\u4f8b\u5b50\uff0c\u6765\u89e3\u91ca\u600e\u4e48\u5408\u5e76<code>commit</code>\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\npick de9b1eb Fix PostChecker::Post#urls\npick 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n\n# Rebase 8db7e8b..fa20af3 onto 8db7e8b\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre> <p>\u4e0a\u9762\u7684\u4e92\u52a8\u754c\u9762\uff0c\u5148\u5217\u51fa\u5f53\u524d\u5206\u652f\u6700\u65b0\u76844\u4e2a<code>commit</code>\uff08\u8d8a\u4e0b\u9762\u8d8a\u65b0\uff09\u3002\u6bcf\u4e2a<code>commit</code>\u524d\u9762\u6709\u4e00\u4e2a\u64cd\u4f5c\u547d\u4ee4\uff0c\u9ed8\u8ba4\u662f<code>pick</code>\uff0c\u8868\u793a\u8be5\u884c<code>commit</code>\u88ab\u9009\u4e2d\uff0c\u8981\u8fdb\u884c<code>rebase</code>\u64cd\u4f5c\u3002</p> <p>4\u4e2acommit\u7684\u4e0b\u9762\u662f\u4e00\u5927\u5806\u6ce8\u91ca\uff0c\u5217\u51fa\u53ef\u4ee5\u4f7f\u7528\u7684\u547d\u4ee4\u3002</p> <ul> <li>pick\uff1a\u6b63\u5e38\u9009\u4e2d</li> <li>reword\uff1a\u9009\u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f\uff1b</li> <li>edit\uff1a\u9009\u4e2d\uff0crebase\u65f6\u4f1a\u6682\u505c\uff0c\u5141\u8bb8\u4f60\u4fee\u6539\u8fd9\u4e2acommit\uff08\u53c2\u8003\u8fd9\u91cc\uff09</li> <li>squash\uff1a\u9009\u4e2d\uff0c\u4f1a\u5c06\u5f53\u524dcommit\u4e0e\u4e0a\u4e00\u4e2acommit\u5408\u5e76</li> <li>fixup\uff1a\u4e0esquash\u76f8\u540c\uff0c\u4f46\u4e0d\u4f1a\u4fdd\u5b58\u5f53\u524dcommit\u7684\u63d0\u4ea4\u4fe1\u606f</li> <li>exec\uff1a\u6267\u884c\u5176\u4ed6shell\u547d\u4ee4</li> </ul> <p>\u4e0a\u9762\u8fd96\u4e2a\u547d\u4ee4\u5f53\u4e2d\uff0c<code>squash</code>\u548c<code>fixup</code>\u53ef\u4ee5\u7528\u6765\u5408\u5e76<code>commit</code>\u3002\u5148\u628a\u9700\u8981\u5408\u5e76\u7684<code>commit</code>\u524d\u9762\u7684\u52a8\u8bcd\uff0c\u6539\u6210<code>squash</code>\uff08\u6216\u8005s\uff09\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\ns de9b1eb Fix PostChecker::Post#urls\ns 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n</code></pre> <p>\u8fd9\u6837\u4e00\u6539\uff0c\u6267\u884c\u540e\uff0c\u5f53\u524d\u5206\u652f\u53ea\u4f1a\u5269\u4e0b\u4e24\u4e2a<code>commit</code>\u3002\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u7684<code>commit</code>\uff0c\u90fd\u4f1a\u5408\u5e76\u5230\u7b2c\u4e00\u884c\u7684<code>commit</code>\u3002\u63d0\u4ea4\u4fe1\u606f\u4f1a\u540c\u65f6\u5305\u542b\uff0c\u8fd9\u4e09\u4e2a<code>commit</code>\u7684\u63d0\u4ea4\u4fe1\u606f\u3002</p> <pre><code># This is a combination of 3 commits.\n# The first commit's message is:\nIntroduce OpenPGP and teach basic usage\n\n# This is the 2nd commit message:\nFix PostChecker::Post#urls\n\n# This is the 3rd commit message:\nHey kids, stop all the highlighting\n</code></pre> <p>\u5982\u679c\u5c06\u7b2c\u4e09\u884c\u7684<code>squash</code>\u547d\u4ee4\u6539\u6210<code>fixup</code>\u547d\u4ee4\u3002</p> <pre><code>pick 07c5abd Introduce OpenPGP and teach basic usage\ns de9b1eb Fix PostChecker::Post#urls\nf 3e7ee36 Hey kids, stop all the highlighting\npick fa20af3 git interactive rebase, squash, amend\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\u76f8\u540c\uff0c\u8fd8\u662f\u4f1a\u751f\u6210\u4e24\u4e2acommit\uff0c\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u7684commit\uff0c\u90fd\u5408\u5e76\u5230\u7b2c\u4e00\u884c\u7684commit\u3002\u4f46\u662f\uff0c\u65b0\u7684\u63d0\u4ea4\u4fe1\u606f\u91cc\u9762\uff0c\u7b2c\u4e09\u884ccommit\u7684\u63d0\u4ea4\u4fe1\u606f\uff0c\u4f1a\u88ab\u6ce8\u91ca\u6389\u3002</p> <pre><code># This is a combination of 3 commits.\n# The first commit's message is:\nIntroduce OpenPGP and teach basic usage\n\n# This is the 2nd commit message:\nFix PostChecker::Post#urls\n\n# This is the 3rd commit message:\n# Hey kids, stop all the highlighting\n</code></pre> <p><code>squash</code>\u548c<code>fixup</code>\u547d\u4ee4\uff0c\u8fd8\u53ef\u4ee5\u5f53\u4f5c\u547d\u4ee4\u884c\u53c2\u6570\u4f7f\u7528\uff0c\u81ea\u52a8\u5408\u5e76<code>commit</code>\u3002</p> <pre><code>git commit --fixup &lt;commit&gt; \ngit rebase -i --autosquash </code></pre> <p>\u8fd9\u4e2a\u7528\u6cd5\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8fd9\u91cc\u5c31\u4e0d\u89e3\u91ca\u4e86\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u516d\u6b65\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93","title":"\u7b2c\u516d\u6b65\uff1a\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93","text":"<p>\u5408\u5e76commit\u540e\uff0c\u5c31\u53ef\u4ee5\u63a8\u9001\u5f53\u524d\u5206\u652f\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e86\u3002</p> <pre><code>git push --force origin myfeature\n</code></pre> <p><code>git push</code>\u547d\u4ee4\u8981\u52a0\u4e0a<code>force</code>\u53c2\u6570\uff0c\u56e0\u4e3a<code>rebase</code>\u4ee5\u540e\uff0c\u5206\u652f\u5386\u53f2\u6539\u53d8\u4e86\uff0c\u8ddf\u8fdc\u7a0b\u5206\u652f\u4e0d\u4e00\u5b9a\u517c\u5bb9\uff0c\u6709\u53ef\u80fd\u8981\u5f3a\u884c\u63a8\u9001\uff08\u53c2\u89c1\u8fd9\u91cc\uff09\u3002</p>"},{"location":"git/git-use-process/#\u7b2c\u4e03\u6b65\u53d1\u51fapull-request","title":"\u7b2c\u4e03\u6b65\uff1a\u53d1\u51faPull Request","text":"<p>\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u53d1\u51fa <code>Pull Request</code> \u5230master\u5206\u652f\uff0c\u7136\u540e\u8bf7\u6c42\u522b\u4eba\u8fdb\u884c\u4ee3\u7801<code>review</code>\uff0c\u786e\u8ba4\u53ef\u4ee5\u5408\u5e76\u5230<code>master</code>\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"git/git-work-flow/","title":"Git \u534f\u4f5c\u6d41\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - Git \u5de5\u4f5c\u6d41\u7a0b</p> <p>Git \u4f5c\u4e3a\u4e00\u4e2a\u6e90\u7801\u7ba1\u7406\u7cfb\u7edf\uff0c\u4e0d\u53ef\u907f\u514d\u6d89\u53ca\u5230\u591a\u4eba\u534f\u4f5c\u3002</p> <p>\u534f\u4f5c\u5fc5\u987b\u6709\u4e00\u4e2a\u89c4\u8303\u7684\u6d41\u7a0b\uff0c\u8ba9\u5927\u5bb6\u6709\u6548\u5730\u5408\u4f5c\uff0c\u4f7f\u5f97\u9879\u76ee\u4e95\u4e95\u6709\u6761\u5730\u53d1\u5c55\u4e0b\u53bb\u3002\"\u534f\u4f5c\u6d41\u7a0b\"\u5728\u82f1\u8bed\u91cc\uff0c\u53eb\u505a\"workflow\"\u6216\u8005\"flow\"\uff0c\u539f\u610f\u662f\u6c34\u6d41\uff0c\u6bd4\u55bb\u9879\u76ee\u50cf\u6c34\u6d41\u90a3\u6837\uff0c\u987a\u7545\u3001\u81ea\u7136\u5730\u5411\u524d\u6d41\u52a8\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u51fb\u3001\u5bf9\u649e\u3001\u751a\u81f3\u6f29\u6da1\u3002</p> <p></p> <p>\u672c\u6587\u4ecb\u7ecd\u4e09\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u534f\u4f5c\u6d41\u7a0b\uff1a</p> <ul> <li>Git flow</li> <li>Github flow</li> <li>Gitlab flow</li> </ul> <p>\u5982\u679c\u4f60\u5bf9Git\u8fd8\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u53ef\u4ee5\u5148\u9605\u8bfb\u4e0b\u9762\u7684\u6587\u7ae0\u3002</p> <ul> <li>\u300aGit \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u300b</li> <li>\u300a\u5e38\u7528 Git \u547d\u4ee4\u6e05\u5355\u300b</li> <li>\u300aGit \u8fdc\u7a0b\u64cd\u4f5c\u8be6\u89e3\u300b</li> </ul>"},{"location":"git/git-work-flow/#\u4e00\u529f\u80fd\u9a71\u52a8","title":"\u4e00\u3001\u529f\u80fd\u9a71\u52a8","text":"<p>\u672c\u6587\u7684\u4e09\u79cd\u534f\u4f5c\u6d41\u7a0b\uff0c\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a\u90fd\u91c7\u7528\"\u529f\u80fd\u9a71\u52a8\u5f0f\u5f00\u53d1\"\uff08Feature-driven development\uff0c\u7b80\u79f0FDD\uff09\u3002</p> <p>\u5b83\u6307\u7684\u662f\uff0c\u9700\u6c42\u662f\u5f00\u53d1\u7684\u8d77\u70b9\uff0c\u5148\u6709\u9700\u6c42\u518d\u6709\u529f\u80fd\u5206\u652f\uff08feature branch\uff09\u6216\u8005\u8865\u4e01\u5206\u652f\uff08hotfix branch\uff09\u3002\u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u8be5\u5206\u652f\u5c31\u5408\u5e76\u5230\u4e3b\u5206\u652f\uff0c\u7136\u540e\u88ab\u5220\u9664\u3002</p>"},{"location":"git/git-work-flow/#\u4e8cgit-flow","title":"\u4e8c\u3001Git flow","text":"<p>\u6700\u65e9\u8bde\u751f\u3001\u5e76\u5f97\u5230\u5e7f\u6cdb\u91c7\u7528\u7684\u4e00\u79cd\u534f\u4f5c\u6d41\u7a0b\uff0c\u5c31\u662fGit flow \u3002</p>"},{"location":"git/git-work-flow/#21-\u7279\u70b9","title":"2.1 \u7279\u70b9","text":"<p>\u5b83\u6700\u4e3b\u8981\u7684\u7279\u70b9\u6709\u4e24\u4e2a\u3002</p> <p></p> <p>\u9996\u5148\uff0c\u9879\u76ee\u5b58\u5728\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002</p> <ul> <li>\u4e3b\u5206\u652f<code>master</code></li> <li>\u5f00\u53d1\u5206\u652f<code>develop</code></li> </ul> <p>\u524d\u8005\u7528\u4e8e\u5b58\u653e\u5bf9\u5916\u53d1\u5e03\u7684\u7248\u672c\uff0c\u4efb\u4f55\u65f6\u5019\u5728\u8fd9\u4e2a\u5206\u652f\u62ff\u5230\u7684\uff0c\u90fd\u662f\u7a33\u5b9a\u7684\u5206\u5e03\u7248\uff1b\u540e\u8005\u7528\u4e8e\u65e5\u5e38\u5f00\u53d1\uff0c\u5b58\u653e\u6700\u65b0\u7684\u5f00\u53d1\u7248\u3002</p> <p>\u5176\u6b21\uff0c\u9879\u76ee\u5b58\u5728\u4e09\u79cd\u77ed\u671f\u5206\u652f\u3002</p> <ul> <li>\u529f\u80fd\u5206\u652f\uff08feature branch\uff09</li> <li>\u8865\u4e01\u5206\u652f\uff08hotfix branch\uff09</li> <li>\u9884\u53d1\u5206\u652f\uff08release branch\uff09</li> </ul> <p>\u4e00\u65e6\u5b8c\u6210\u5f00\u53d1\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u5408\u5e76\u8fdb<code>develop</code>\u6216<code>master</code>\uff0c\u7136\u540e\u88ab\u5220\u9664\u3002</p> <p>Git flow \u7684\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8bf7\u9605\u8bfb\u6211\u7ffb\u8bd1\u7684\u4e2d\u6587\u7248\u300aGit \u5206\u652f\u7ba1\u7406\u7b56\u7565\u300b\u3002</p>"},{"location":"git/git-work-flow/#22-\u8bc4\u4ef7","title":"2.2 \u8bc4\u4ef7","text":"<p>Git flow\u7684\u4f18\u70b9\u662f\u6e05\u6670\u53ef\u63a7\uff0c\u7f3a\u70b9\u662f\u76f8\u5bf9\u590d\u6742\uff0c\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002\u5927\u591a\u6570\u5de5\u5177\u90fd\u5c06<code>master</code>\u5f53\u4f5c\u9ed8\u8ba4\u5206\u652f\uff0c\u53ef\u662f\u5f00\u53d1\u662f\u5728<code>develop</code>\u5206\u652f\u8fdb\u884c\u7684\uff0c\u8fd9\u5bfc\u81f4\u7ecf\u5e38\u8981\u5207\u6362\u5206\u652f\uff0c\u975e\u5e38\u70e6\u4eba\u3002</p> <p>\u66f4\u5927\u95ee\u9898\u5728\u4e8e\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u662f\u57fa\u4e8e\"\u7248\u672c\u53d1\u5e03\"\u7684\uff0c\u76ee\u6807\u662f\u4e00\u6bb5\u65f6\u95f4\u4ee5\u540e\u4ea7\u51fa\u4e00\u4e2a\u65b0\u7248\u672c\u3002\u4f46\u662f\uff0c\u5f88\u591a\u7f51\u7ad9\u9879\u76ee\u662f\"\u6301\u7eed\u53d1\u5e03\"\uff0c\u4ee3\u7801\u4e00\u6709\u53d8\u52a8\uff0c\u5c31\u90e8\u7f72\u4e00\u6b21\u3002\u8fd9\u65f6\uff0c<code>master</code>\u5206\u652f\u548c<code>develop</code>\u5206\u652f\u7684\u5dee\u522b\u4e0d\u5927\uff0c\u6ca1\u5fc5\u8981\u7ef4\u62a4\u4e24\u4e2a\u957f\u671f\u5206\u652f\u3002</p>"},{"location":"git/git-work-flow/#\u4e09github-flow","title":"\u4e09\u3001Github flow","text":"<p>Github flow \u662fGit flow\u7684\u7b80\u5316\u7248\uff0c\u4e13\u95e8\u914d\u5408\"\u6301\u7eed\u53d1\u5e03\"\u3002\u5b83\u662f Github.com \u4f7f\u7528\u7684\u534f\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"git/git-work-flow/#31-\u6d41\u7a0b","title":"3.1 \u6d41\u7a0b","text":"<p>\u5b83\u53ea\u6709\u4e00\u4e2a\u957f\u671f\u5206\u652f\uff0c\u5c31\u662f<code>master</code>\uff0c\u56e0\u6b64\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002</p> <p>\u5b98\u65b9\u63a8\u8350\u7684\u6d41\u7a0b\u5982\u4e0b\u3002</p> <p></p> \u7b2c\u4e00\u6b65 \u6839\u636e\u9700\u6c42\uff0c\u4ece<code>master</code>\u62c9\u51fa\u65b0\u5206\u652f\uff0c\u4e0d\u533a\u5206\u529f\u80fd\u5206\u652f\u6216\u8865\u4e01\u5206\u652f\u3002 \u7b2c\u4e8c\u6b65 \u65b0\u5206\u652f\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u6216\u8005\u9700\u8981\u8ba8\u8bba\u7684\u65f6\u5019\uff0c\u5c31\u5411<code>master</code>\u53d1\u8d77\u4e00\u4e2apull reqest\uff08\u7b80\u79f0PR\uff09\u3002 \u7b2c\u4e09\u6b65 Pull Request\u65e2\u662f\u4e00\u4e2a\u901a\u77e5\uff0c\u8ba9\u522b\u4eba\u6ce8\u610f\u5230\u4f60\u7684\u8bf7\u6c42\uff0c\u53c8\u662f\u4e00\u79cd\u5bf9\u8bdd\u673a\u5236\uff0c\u5927\u5bb6\u4e00\u8d77\u8bc4\u5ba1\u548c\u8ba8\u8bba\u4f60\u7684\u4ee3\u7801\u3002\u5bf9\u8bdd\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4e0d\u65ad\u63d0\u4ea4\u4ee3\u7801\u3002 \u7b2c\u56db\u6b65 \u4f60\u7684Pull Request\u88ab\u63a5\u53d7\uff0c\u5408\u5e76\u8fdb<code>master</code>\uff0c\u91cd\u65b0\u90e8\u7f72\u540e\uff0c\u539f\u6765\u4f60\u62c9\u51fa\u6765\u7684\u90a3\u4e2a\u5206\u652f\u5c31\u88ab\u5220\u9664\u3002\uff08\u5148\u90e8\u7f72\u518d\u5408\u5e76\u4e5f\u53ef\u3002\uff09"},{"location":"git/git-work-flow/#32-\u8bc4\u4ef7","title":"3.2 \u8bc4\u4ef7","text":"<p>Github flow \u7684\u6700\u5927\u4f18\u70b9\u5c31\u662f\u7b80\u5355\uff0c\u5bf9\u4e8e\"\u6301\u7eed\u53d1\u5e03\"\u7684\u4ea7\u54c1\uff0c\u53ef\u4ee5\u8bf4\u662f\u6700\u5408\u9002\u7684\u6d41\u7a0b\u3002</p> <p>\u95ee\u9898\u5728\u4e8e\u5b83\u7684\u5047\u8bbe\uff1a<code>master</code>\u5206\u652f\u7684\u66f4\u65b0\u4e0e\u4ea7\u54c1\u7684\u53d1\u5e03\u662f\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>master</code>\u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\uff0c\u9ed8\u8ba4\u5c31\u662f\u5f53\u524d\u7684\u7ebf\u4e0a\u4ee3\u7801\u3002</p> <p>\u53ef\u662f\uff0c\u6709\u4e9b\u65f6\u5019\u5e76\u975e\u5982\u6b64\uff0c\u4ee3\u7801\u5408\u5e76\u8fdb\u5165<code>master</code>\u5206\u652f\uff0c\u5e76\u4e0d\u4ee3\u8868\u5b83\u5c31\u80fd\u7acb\u523b\u53d1\u5e03\u3002\u6bd4\u5982\uff0c\u82f9\u679c\u5546\u5e97\u7684APP\u63d0\u4ea4\u5ba1\u6838\u4ee5\u540e\uff0c\u7b49\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u4e0a\u67b6\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u8fd8\u6709\u65b0\u7684\u4ee3\u7801\u63d0\u4ea4\uff0c<code>master</code>\u5206\u652f\u5c31\u4f1a\u4e0e\u521a\u53d1\u5e03\u7684\u7248\u672c\u4e0d\u4e00\u81f4\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u6709\u4e9b\u516c\u53f8\u6709\u53d1\u5e03\u7a97\u53e3\uff0c\u53ea\u6709\u6307\u5b9a\u65f6\u95f4\u624d\u80fd\u53d1\u5e03\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u7ebf\u4e0a\u7248\u672c\u843d\u540e\u4e8e<code>master</code>\u5206\u652f\u3002</p> <p>\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ea\u6709<code>master</code>\u4e00\u4e2a\u4e3b\u5206\u652f\u5c31\u4e0d\u591f\u7528\u4e86\u3002\u901a\u5e38\uff0c\u4f60\u4e0d\u5f97\u4e0d\u5728<code>master</code>\u5206\u652f\u4ee5\u5916\uff0c\u53e6\u5916\u65b0\u5efa\u4e00\u4e2a<code>production</code>\u5206\u652f\u8ddf\u8e2a\u7ebf\u4e0a\u7248\u672c\u3002</p>"},{"location":"git/git-work-flow/#\u56dbgitlab-flow","title":"\u56db\u3001Gitlab flow","text":"<p>Gitlab flow \u662f Git flow \u4e0e Github flow \u7684\u7efc\u5408\u3002\u5b83\u5438\u53d6\u4e86\u4e24\u8005\u7684\u4f18\u70b9\uff0c\u65e2\u6709\u9002\u5e94\u4e0d\u540c\u5f00\u53d1\u73af\u5883\u7684\u5f39\u6027\uff0c\u53c8\u6709\u5355\u4e00\u4e3b\u5206\u652f\u7684\u7b80\u5355\u548c\u4fbf\u5229\u3002\u5b83\u662f Gitlab.com \u63a8\u8350\u7684\u505a\u6cd5\u3002</p>"},{"location":"git/git-work-flow/#41-\u4e0a\u6e38\u4f18\u5148","title":"4.1 \u4e0a\u6e38\u4f18\u5148","text":"<p>Gitlab flow \u7684\u6700\u5927\u539f\u5219\u53eb\u505a\"\u4e0a\u6e38\u4f18\u5148\"\uff08upsteam first\uff09\uff0c\u5373\u53ea\u5b58\u5728\u4e00\u4e2a\u4e3b\u5206\u652f<code>master</code>\uff0c\u5b83\u662f\u6240\u6709\u5176\u4ed6\u5206\u652f\u7684\"\u4e0a\u6e38\"\u3002\u53ea\u6709\u4e0a\u6e38\u5206\u652f\u91c7\u7eb3\u7684\u4ee3\u7801\u53d8\u5316\uff0c\u624d\u80fd\u5e94\u7528\u5230\u5176\u4ed6\u5206\u652f\u3002</p> <p>Chromium\u9879\u76ee\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u660e\u786e\u89c4\u5b9a\uff0c\u4e0a\u6e38\u5206\u652f\u4f9d\u6b21\u4e3a\uff1a</p> <ol> <li>Linus Torvalds\u7684\u5206\u652f</li> <li>\u5b50\u7cfb\u7edf\uff08\u6bd4\u5982netdev\uff09\u7684\u5206\u652f</li> <li>\u8bbe\u5907\u5382\u5546\uff08\u6bd4\u5982\u4e09\u661f\uff09\u7684\u5206\u652f</li> </ol>"},{"location":"git/git-work-flow/#42-\u6301\u7eed\u53d1\u5e03","title":"4.2 \u6301\u7eed\u53d1\u5e03","text":"<p>Gitlab flow \u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff0c\u9002\u5e94\u4e0d\u540c\u7684\u5f00\u53d1\u6d41\u7a0b\u3002</p> <p></p> <p>\u5bf9\u4e8e\"\u6301\u7eed\u53d1\u5e03\"\u7684\u9879\u76ee\uff0c\u5b83\u5efa\u8bae\u5728<code>master</code>\u5206\u652f\u4ee5\u5916\uff0c\u518d\u5efa\u7acb\u4e0d\u540c\u7684\u73af\u5883\u5206\u652f\u3002\u6bd4\u5982\uff0c\"\u5f00\u53d1\u73af\u5883\"\u7684\u5206\u652f\u662f<code>master</code>\uff0c\"\u9884\u53d1\u73af\u5883\"\u7684\u5206\u652f\u662f<code>pre-production</code>\uff0c\"\u751f\u4ea7\u73af\u5883\"\u7684\u5206\u652f\u662f<code>production</code>\u3002</p> <p>\u5f00\u53d1\u5206\u652f\u662f\u9884\u53d1\u5206\u652f\u7684\"\u4e0a\u6e38\"\uff0c\u9884\u53d1\u5206\u652f\u53c8\u662f\u751f\u4ea7\u5206\u652f\u7684\"\u4e0a\u6e38\"\u3002\u4ee3\u7801\u7684\u53d8\u5316\uff0c\u5fc5\u987b\u7531\"\u4e0a\u6e38\"\u5411\"\u4e0b\u6e38\"\u53d1\u5c55\u3002\u6bd4\u5982\uff0c\u751f\u4ea7\u73af\u5883\u51fa\u73b0\u4e86bug\uff0c\u8fd9\u65f6\u5c31\u8981\u65b0\u5efa\u4e00\u4e2a\u529f\u80fd\u5206\u652f\uff0c\u5148\u628a\u5b83\u5408\u5e76\u5230<code>master</code>\uff0c\u786e\u8ba4\u6ca1\u6709\u95ee\u9898\uff0c\u518d<code>cherry-pick</code>\u5230<code>pre-production</code>\uff0c\u8fd9\u4e00\u6b65\u4e5f\u6ca1\u6709\u95ee\u9898\uff0c\u624d\u8fdb\u5165<code>production</code>\u3002</p> <p>\u53ea\u6709\u7d27\u6025\u60c5\u51b5\uff0c\u624d\u5141\u8bb8\u8df3\u8fc7\u4e0a\u6e38\uff0c\u76f4\u63a5\u5408\u5e76\u5230\u4e0b\u6e38\u5206\u652f\u3002</p>"},{"location":"git/git-work-flow/#43-\u7248\u672c\u53d1\u5e03","title":"4.3 \u7248\u672c\u53d1\u5e03","text":"<p>\u5bf9\u4e8e\"\u7248\u672c\u53d1\u5e03\"\u7684\u9879\u76ee\uff0c\u5efa\u8bae\u7684\u505a\u6cd5\u662f\u6bcf\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u90fd\u8981\u4ece<code>master</code>\u5206\u652f\u62c9\u51fa\u4e00\u4e2a\u5206\u652f\uff0c\u6bd4\u5982<code>2-3-stable</code>\u3001<code>2-4-stable</code>\u7b49\u7b49\u3002</p> <p>\u4ee5\u540e\uff0c\u53ea\u6709\u4fee\u8865bug\uff0c\u624d\u5141\u8bb8\u5c06\u4ee3\u7801\u5408\u5e76\u5230\u8fd9\u4e9b\u5206\u652f\uff0c\u5e76\u4e14\u6b64\u65f6\u8981\u66f4\u65b0\u5c0f\u7248\u672c\u53f7\u3002</p>"},{"location":"git/git-work-flow/#\u4e94\u4e00\u4e9b\u5c0f\u6280\u5de7","title":"\u4e94\u3001\u4e00\u4e9b\u5c0f\u6280\u5de7","text":""},{"location":"git/git-work-flow/#51-pull-request","title":"5.1 Pull Request","text":"<p>\u529f\u80fd\u5206\u652f\u5408\u5e76\u8fdb<code>master</code>\u5206\u652f\uff0c\u5fc5\u987b\u901a\u8fc7Pull Request\uff08Gitlab\u91cc\u9762\u53eb\u505a Merge Request\uff09\u3002</p> <p></p> <p>\u524d\u9762\u8bf4\u8fc7\uff0cPull Request\u672c\u8d28\u662f\u4e00\u79cd\u5bf9\u8bdd\u673a\u5236\uff0c\u4f60\u53ef\u4ee5\u5728\u63d0\u4ea4\u7684\u65f6\u5019\uff0c<code>@</code>\u76f8\u5173\u4eba\u5458\u6216\u56e2\u961f\uff0c\u5f15\u8d77\u4ed6\u4eec\u7684\u6ce8\u610f\u3002</p>"},{"location":"git/git-work-flow/#52-protected-branch","title":"5.2 Protected branch","text":"<p><code>master</code>\u5206\u652f\u5e94\u8be5\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u5206\u652f\uff0c\u4ee5\u53ca\u62e5\u6709\u5ba1\u6279 Pull Request \u7684\u6743\u529b\u3002</p> <p>Github \u548c Gitlab \u90fd\u63d0\u4f9b\"\u4fdd\u62a4\u5206\u652f\"\uff08Protected branch\uff09\u8fd9\u4e2a\u529f\u80fd\u3002</p>"},{"location":"git/git-work-flow/#53-issue","title":"5.3 Issue","text":"<p>Issue \u7528\u4e8e Bug\u8ffd\u8e2a\u548c\u9700\u6c42\u7ba1\u7406\u3002\u5efa\u8bae\u5148\u65b0\u5efa Issue\uff0c\u518d\u65b0\u5efa\u5bf9\u5e94\u7684\u529f\u80fd\u5206\u652f\u3002\u529f\u80fd\u5206\u652f\u603b\u662f\u4e3a\u4e86\u89e3\u51b3\u4e00\u4e2a\u6216\u591a\u4e2a Issue\u3002</p> <p>\u529f\u80fd\u5206\u652f\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u4e0eissue\u7684\u540d\u5b57\u4fdd\u6301\u4e00\u81f4\uff0c\u5e76\u4e14\u4ee5issue\u7684\u7f16\u53f7\u8d77\u9996\uff0c\u6bd4\u5982\"15-require-a-password-to-change-it\"\u3002</p> <p></p> <p>\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u5728\u63d0\u4ea4\u8bf4\u660e\u91cc\u9762\uff0c\u53ef\u4ee5\u5199\u4e0a\"fixes #14\"\u6216\u8005\"closes #67\"\u3002Github\u89c4\u5b9a\uff0c\u53ea\u8981commit message\u91cc\u9762\u6709\u4e0b\u9762\u8fd9\u4e9b\u52a8\u8bcd + \u7f16\u53f7\uff0c\u5c31\u4f1a\u5173\u95ed\u5bf9\u5e94\u7684issue\u3002</p> <ul> <li>close</li> <li>closes</li> <li>closed</li> <li>fix</li> <li>fixes</li> <li>fixed</li> <li>resolve</li> <li>resolves</li> <li>resolved</li> </ul> <p>\u8fd9\u79cd\u65b9\u5f0f\u8fd8\u53ef\u4ee5\u4e00\u6b21\u5173\u95ed\u591a\u4e2aissue\uff0c\u6216\u8005\u5173\u95ed\u5176\u4ed6\u4ee3\u7801\u5e93\u7684issue\uff0c\u683c\u5f0f\u662f<code>username/repository#issue_number</code>\u3002</p> <p>Pull Request\u88ab\u63a5\u53d7\u4ee5\u540e\uff0cissue\u5173\u95ed\uff0c\u539f\u59cb\u5206\u652f\u5c31\u5e94\u8be5\u5220\u9664\u3002\u5982\u679c\u4ee5\u540e\u8be5issue\u91cd\u65b0\u6253\u5f00\uff0c\u65b0\u5206\u652f\u53ef\u4ee5\u590d\u7528\u539f\u6765\u7684\u540d\u5b57\u3002</p>"},{"location":"git/git-work-flow/#54-merge\u8282\u70b9","title":"5.4 Merge\u8282\u70b9","text":"<p>Git\u6709\u4e24\u79cd\u5408\u5e76\uff1a\u4e00\u79cd\u662f\"\u76f4\u8fdb\u5f0f\u5408\u5e76\"\uff08fast forward\uff09\uff0c\u4e0d\u751f\u6210\u5355\u72ec\u7684\u5408\u5e76\u8282\u70b9\uff1b\u53e6\u4e00\u79cd\u662f\"\u975e\u76f4\u8fdb\u5f0f\u5408\u5e76\"\uff08none fast-forword\uff09\uff0c\u4f1a\u751f\u6210\u5355\u72ec\u8282\u70b9\u3002</p> <p>\u524d\u8005\u4e0d\u5229\u4e8e\u4fdd\u6301commit\u4fe1\u606f\u7684\u6e05\u6670\uff0c\u4e5f\u4e0d\u5229\u4e8e\u4ee5\u540e\u7684\u56de\u6eda\uff0c\u5efa\u8bae\u603b\u662f\u91c7\u7528\u540e\u8005\uff08\u5373\u4f7f\u7528<code>--no-ff</code>\u53c2\u6570\uff09\u3002\u53ea\u8981\u53d1\u751f\u5408\u5e76\uff0c\u5c31\u8981\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u5408\u5e76\u8282\u70b9\u3002</p>"},{"location":"git/git-work-flow/#55-squash-\u591a\u4e2acommit","title":"5.5 Squash \u591a\u4e2acommit","text":"<p>\u4e3a\u4e86\u4fbf\u4e8e\u4ed6\u4eba\u9605\u8bfb\u4f60\u7684\u63d0\u4ea4\uff0c\u4e5f\u4fbf\u4e8e<code>cherry-pick</code>\u6216\u64a4\u9500\u4ee3\u7801\u53d8\u5316\uff0c\u5728\u53d1\u8d77Pull Request\u4e4b\u524d\uff0c\u5e94\u8be5\u628a\u591a\u4e2acommit\u5408\u5e76\u6210\u4e00\u4e2a\u3002\uff08\u524d\u63d0\u662f\uff0c\u8be5\u5206\u652f\u53ea\u6709\u4f60\u4e00\u4e2a\u4eba\u5f00\u53d1\uff0c\u4e14\u6ca1\u6709\u8ddf<code>master</code>\u5408\u5e76\u8fc7\u3002\uff09</p> <p></p> <p>\u8fd9\u53ef\u4ee5\u91c7\u7528<code>rebase</code>\u547d\u4ee4\u9644\u5e26\u7684<code>squash</code>\u64cd\u4f5c\uff0c\u5177\u4f53\u65b9\u6cd5\u8bf7\u53c2\u8003\u6211\u5199\u7684\u300aGit \u4f7f\u7528\u89c4\u8303\u6d41\u7a0b\u300b\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/","title":"HTTP \u534f\u8bae\u5165\u95e8","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP \u534f\u8bae\u5165\u95e8</p> <p>HTTP\u534f\u8bae\u662f\u4e92\u8054\u7f51\u7684\u57fa\u7840\u534f\u8bae\uff0c\u4e5f\u662f\u7f51\u9875\u5f00\u53d1\u7684\u5fc5\u5907\u77e5\u8bc6\uff0c\u6700\u65b0\u7248\u672c HTTP/2 \u66f4\u662f\u8ba9\u5b83\u6210\u4e3a\u6280\u672f\u70ed\u70b9\u3002</p> <p>\u672c\u6587\u4ecb\u7ecdHTTP\u534f\u8bae\u7684\u5386\u53f2\u6f14\u53d8\u548c\u8bbe\u8ba1\u601d\u8def\u3002</p> <p></p>"},{"location":"http/#\u4e00http09","title":"\u4e00\u3001HTTP/0.9","text":"<p>HTTP\u662f\u57fa\u4e8e TCP/IP \u534f\u8bae\u7684\u5e94\u7528\u5c42\u534f\u8bae\u3002\u5b83\u4e0d\u6d89\u53ca\u6570\u636e\u5305\uff08packet\uff09\u4f20\u8f93\uff0c\u4e3b\u8981\u89c4\u5b9a\u4e86\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u683c\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u752880\u7aef\u53e3\u3002</p> <p>\u6700\u65e9\u7248\u672c\u662f1991\u5e74\u53d1\u5e03\u76840.9\u7248\u3002\u8be5\u7248\u672c\u6781\u5176\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u4e2a\u547d\u4ee4<code>GET</code>\u3002</p> <pre><code>GET /index.html\n</code></pre> <p>\u4e0a\u9762\u547d\u4ee4\u8868\u793a\uff0cTCP\u8fde\u63a5\uff08connection\uff09\u5efa\u7acb\u540e\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u8bf7\u6c42\uff08request\uff09\u7f51\u9875<code>index.html</code>\u3002</p> <p>\u534f\u8bae\u89c4\u5b9a\uff0c\u670d\u52a1\u5668\u53ea\u80fd\u56de\u5e94HTML\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u80fd\u56de\u5e94\u522b\u7684\u683c\u5f0f\u3002</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u670d\u52a1\u5668\u53d1\u9001\u5b8c\u6bd5\uff0c\u5c31\u5173\u95edTCP\u8fde\u63a5\u3002</p>"},{"location":"http/#\u4e8chttp10","title":"\u4e8c\u3001HTTP/1.0","text":""},{"location":"http/#21-\u7b80\u4ecb","title":"2.1 \u7b80\u4ecb","text":"<p>1996\u5e745\u6708\uff0cHTTP/1.0 \u7248\u672c\u53d1\u5e03\uff0c\u5185\u5bb9\u5927\u5927\u589e\u52a0\u3002</p> <p>\u9996\u5148\uff0c\u4efb\u4f55\u683c\u5f0f\u7684\u5185\u5bb9\u90fd\u53ef\u4ee5\u53d1\u9001\u3002\u8fd9\u4f7f\u5f97\u4e92\u8054\u7f51\u4e0d\u4ec5\u53ef\u4ee5\u4f20\u8f93\u6587\u5b57\uff0c\u8fd8\u80fd\u4f20\u8f93\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u4e3a\u4e92\u8054\u7f51\u7684\u5927\u53d1\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002</p> <p>\u5176\u6b21\uff0c\u9664\u4e86<code>GET</code>\u547d\u4ee4\uff0c\u8fd8\u5f15\u5165\u4e86<code>POST</code>\u547d\u4ee4\u548c<code>HEAD</code>\u547d\u4ee4\uff0c\u4e30\u5bcc\u4e86\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u7684\u4e92\u52a8\u624b\u6bb5\u3002</p> <p>\u518d\u6b21\uff0cHTTP\u8bf7\u6c42\u548c\u56de\u5e94\u7684\u683c\u5f0f\u4e5f\u53d8\u4e86\u3002\u9664\u4e86\u6570\u636e\u90e8\u5206\uff0c\u6bcf\u6b21\u901a\u4fe1\u90fd\u5fc5\u987b\u5305\u62ec\u5934\u4fe1\u606f\uff08HTTP header\uff09\uff0c\u7528\u6765\u63cf\u8ff0\u4e00\u4e9b\u5143\u6570\u636e\u3002</p> <p>\u5176\u4ed6\u7684\u65b0\u589e\u529f\u80fd\u8fd8\u5305\u62ec\u72b6\u6001\u7801\uff08status code\uff09\u3001\u591a\u5b57\u7b26\u96c6\u652f\u6301\u3001\u591a\u90e8\u5206\u53d1\u9001\uff08multi-part type\uff09\u3001\u6743\u9650\uff08authorization\uff09\u3001\u7f13\u5b58\uff08cache\uff09\u3001\u5185\u5bb9\u7f16\u7801\uff08content encoding\uff09\u7b49\u3002</p>"},{"location":"http/#22-\u8bf7\u6c42\u683c\u5f0f","title":"2.2 \u8bf7\u6c42\u683c\u5f0f","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a1.0\u7248\u7684HTTP\u8bf7\u6c42\u7684\u4f8b\u5b50\u3002</p> <pre><code>GET / HTTP/1.0\nHost: kamranahmed.info\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u683c\u5f0f\u4e0e0.9\u7248\u6709\u5f88\u5927\u53d8\u5316\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8bf7\u6c42\u547d\u4ee4\uff0c\u5fc5\u987b\u5728\u5c3e\u90e8\u6dfb\u52a0\u534f\u8bae\u7248\u672c\uff08<code>HTTP/1.0</code>\uff09\u3002\u540e\u9762\u5c31\u662f\u591a\u884c\u5934\u4fe1\u606f\uff0c\u63cf\u8ff0\u5ba2\u6237\u7aef\u7684\u60c5\u51b5\u3002</p>"},{"location":"http/#23-\u56de\u5e94\u683c\u5f0f","title":"2.3 \u56de\u5e94\u683c\u5f0f","text":"<p>\u670d\u52a1\u5668\u7684\u56de\u5e94\u5982\u4e0b\u3002</p> <pre><code>HTTP/1.0 200 OK \nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u56de\u5e94\u7684\u683c\u5f0f\u662f<code>\u5934\u4fe1\u606f + \u4e00\u4e2a\u7a7a\u884c\uff08</code>\\r\\n<code>\uff09 + \u6570\u636e</code>\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u884c\u662f<code>\u534f\u8bae\u7248\u672c + \u72b6\u6001\u7801\uff08status code\uff09 + \u72b6\u6001\u63cf\u8ff0</code>\u3002</p>"},{"location":"http/#24-content-type-\u5b57\u6bb5","title":"2.4 Content-Type \u5b57\u6bb5","text":"<p>\u5173\u4e8e\u5b57\u7b26\u7684\u7f16\u7801\uff0c1.0\u7248\u89c4\u5b9a\uff0c\u5934\u4fe1\u606f\u5fc5\u987b\u662f ASCII \u7801\uff0c\u540e\u9762\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\u3002\u56e0\u6b64\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u544a\u8bc9\u5ba2\u6237\u7aef\uff0c\u6570\u636e\u662f\u4ec0\u4e48\u683c\u5f0f\uff0c\u8fd9\u5c31\u662f<code>Content-Type</code>\u5b57\u6bb5\u7684\u4f5c\u7528\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684<code>Content-Type</code>\u5b57\u6bb5\u7684\u503c\u3002</p> <ul> <li> <p>text/plain</p> </li> <li> <p>text/html</p> </li> <li>text/css</li> <li>image/jpeg</li> <li>image/png</li> <li>image/svg+xml</li> <li>audio/mp4</li> <li>video/mp4</li> <li>application/javascript</li> <li>application/pdf</li> <li>application/zip</li> <li>application/atom+xml</li> </ul> <p>\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u603b\u79f0\u4e3a<code>MIME type</code>\uff0c\u5305\u542b\u4e00\u7ea7\u7c7b\u578b\u548c\u4e8c\u7ea7\u7c7b\u578b\uff0c\u4e4b\u95f4\u7528\u659c\u6760\u5206\u9694\u3002</p> <p>\u9664\u4e86\u9884\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5382\u5546\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002</p> <pre><code>application/vnd.debian.binary-package\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662fDebian\u7cfb\u7edf\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u5305\u3002</p> <p><code>MIME type</code>\u8fd8\u53ef\u4ee5\u5728\u5c3e\u90e8\u4f7f\u7528\u5206\u53f7\uff0c\u6dfb\u52a0\u53c2\u6570\u3002</p> <pre><code>Content-Type: text/html; charset=utf-8\n</code></pre> <p>\u4e0a\u9762\u7684\u7c7b\u578b\u8868\u660e\uff0c\u53d1\u9001\u7684\u662f\u7f51\u9875\uff0c\u800c\u4e14\u7f16\u7801\u662fUTF-8\u3002</p> <p><code>MIME type</code>\u4e0d\u4ec5\u7528\u5728HTTP\u534f\u8bae\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6bd4\u5982HTML\u7f51\u9875\u3002</p> <pre><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;!-- \u7b49\u540c\u4e8e --&gt;\n&lt;meta charset=\"utf-8\" /&gt; \n</code></pre>"},{"location":"http/#25-content-encoding-\u5b57\u6bb5","title":"2.5 Content-Encoding \u5b57\u6bb5","text":"<p>\u7531\u4e8e\u53d1\u9001\u7684\u6570\u636e\u53ef\u4ee5\u662f\u4efb\u4f55\u683c\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6570\u636e\u538b\u7f29\u540e\u518d\u53d1\u9001\u3002<code>Content-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u6570\u636e\u7684\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Content-Encoding: gzip\nContent-Encoding: compress\nContent-Encoding: deflate\n</code></pre> <p>\u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u65f6\uff0c\u7528<code>Accept-Encoding</code>\u5b57\u6bb5\u8bf4\u660e\u81ea\u5df1\u53ef\u4ee5\u63a5\u53d7\u54ea\u4e9b\u538b\u7f29\u65b9\u6cd5\u3002</p> <pre><code>Accept-Encoding: gzip, deflate\n</code></pre>"},{"location":"http/#26-\u7f3a\u70b9","title":"2.6 \u7f3a\u70b9","text":"<p>HTTP/1.0 \u7248\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u53ea\u80fd\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u3002\u53d1\u9001\u6570\u636e\u5b8c\u6bd5\uff0c\u8fde\u63a5\u5c31\u5173\u95ed\uff0c\u5982\u679c\u8fd8\u8981\u8bf7\u6c42\u5176\u4ed6\u8d44\u6e90\uff0c\u5c31\u5fc5\u987b\u518d\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5\u3002</p> <p>TCP\u8fde\u63a5\u7684\u65b0\u5efa\u6210\u672c\u5f88\u9ad8\uff0c\u56e0\u4e3a\u9700\u8981\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u4e09\u6b21\u63e1\u624b\uff0c\u5e76\u4e14\u5f00\u59cb\u65f6\u53d1\u9001\u901f\u7387\u8f83\u6162\uff08slow start\uff09\u3002\u6240\u4ee5\uff0cHTTP 1.0\u7248\u672c\u7684\u6027\u80fd\u6bd4\u8f83\u5dee\u3002\u968f\u7740\u7f51\u9875\u52a0\u8f7d\u7684\u5916\u90e8\u8d44\u6e90\u8d8a\u6765\u8d8a\u591a\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u6108\u53d1\u7a81\u51fa\u4e86\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u6d4f\u89c8\u5668\u5728\u8bf7\u6c42\u65f6\uff0c\u7528\u4e86\u4e00\u4e2a\u975e\u6807\u51c6\u7684<code>Connection</code>\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u8fd9\u4e2a\u5b57\u6bb5\u8981\u6c42\u670d\u52a1\u5668\u4e0d\u8981\u5173\u95edTCP\u8fde\u63a5\uff0c\u4ee5\u4fbf\u5176\u4ed6\u8bf7\u6c42\u590d\u7528\u3002\u670d\u52a1\u5668\u540c\u6837\u56de\u5e94\u8fd9\u4e2a\u5b57\u6bb5\u3002</p> <pre><code>Connection: keep-alive\n</code></pre> <p>\u4e00\u4e2a\u53ef\u4ee5\u590d\u7528\u7684TCP\u8fde\u63a5\u5c31\u5efa\u7acb\u4e86\uff0c\u76f4\u5230\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u6807\u51c6\u5b57\u6bb5\uff0c\u4e0d\u540c\u5b9e\u73b0\u7684\u884c\u4e3a\u53ef\u80fd\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64\u4e0d\u662f\u6839\u672c\u7684\u89e3\u51b3\u529e\u6cd5\u3002</p>"},{"location":"http/#\u4e09http11","title":"\u4e09\u3001HTTP/1.1","text":"<p>1997\u5e741\u6708\uff0cHTTP/1.1 \u7248\u672c\u53d1\u5e03\uff0c\u53ea\u6bd4 1.0 \u7248\u672c\u665a\u4e86\u534a\u5e74\u3002\u5b83\u8fdb\u4e00\u6b65\u5b8c\u5584\u4e86 HTTP \u534f\u8bae\uff0c\u4e00\u76f4\u7528\u5230\u4e8620\u5e74\u540e\u7684\u4eca\u5929\uff0c\u76f4\u5230\u73b0\u5728\u8fd8\u662f\u6700\u6d41\u884c\u7684\u7248\u672c\u3002</p>"},{"location":"http/#31-\u6301\u4e45\u8fde\u63a5","title":"3.1 \u6301\u4e45\u8fde\u63a5","text":"<p>1.1 \u7248\u7684\u6700\u5927\u53d8\u5316\uff0c\u5c31\u662f\u5f15\u5165\u4e86\u6301\u4e45\u8fde\u63a5\uff08persistent connection\uff09\uff0c\u5373TCP\u8fde\u63a5\u9ed8\u8ba4\u4e0d\u5173\u95ed\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a\u8bf7\u6c42\u590d\u7528\uff0c\u4e0d\u7528\u58f0\u660e<code>Connection: keep-alive</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u53d1\u73b0\u5bf9\u65b9\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u6d3b\u52a8\uff0c\u5c31\u53ef\u4ee5\u4e3b\u52a8\u5173\u95ed\u8fde\u63a5\u3002\u4e0d\u8fc7\uff0c\u89c4\u8303\u7684\u505a\u6cd5\u662f\uff0c\u5ba2\u6237\u7aef\u5728\u6700\u540e\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u53d1\u9001<code>Connection: close</code>\uff0c\u660e\u786e\u8981\u6c42\u670d\u52a1\u5668\u5173\u95edTCP\u8fde\u63a5\u3002</p> <pre><code>Connection: close\n</code></pre> <p>\u76ee\u524d\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u57df\u540d\uff0c\u5927\u591a\u6570\u6d4f\u89c8\u5668\u5141\u8bb8\u540c\u65f6\u5efa\u7acb6\u4e2a\u6301\u4e45\u8fde\u63a5\u3002</p>"},{"location":"http/#32-\u7ba1\u9053\u673a\u5236","title":"3.2 \u7ba1\u9053\u673a\u5236","text":"<p>1.1 \u7248\u8fd8\u5f15\u5165\u4e86\u7ba1\u9053\u673a\u5236\uff08pipelining\uff09\uff0c\u5373\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u3002\u8fd9\u6837\u5c31\u8fdb\u4e00\u6b65\u6539\u8fdb\u4e86HTTP\u534f\u8bae\u7684\u6548\u7387\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u8bf7\u6c42\u4e24\u4e2a\u8d44\u6e90\u3002\u4ee5\u524d\u7684\u505a\u6cd5\u662f\uff0c\u5728\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u5148\u53d1\u9001A\u8bf7\u6c42\uff0c\u7136\u540e\u7b49\u5f85\u670d\u52a1\u5668\u505a\u51fa\u56de\u5e94\uff0c\u6536\u5230\u540e\u518d\u53d1\u51faB\u8bf7\u6c42\u3002\u7ba1\u9053\u673a\u5236\u5219\u662f\u5141\u8bb8\u6d4f\u89c8\u5668\u540c\u65f6\u53d1\u51faA\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4f46\u662f\u670d\u52a1\u5668\u8fd8\u662f\u6309\u7167\u987a\u5e8f\uff0c\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\u518d\u56de\u5e94B\u8bf7\u6c42\u3002</p>"},{"location":"http/#33-content-length-\u5b57\u6bb5","title":"3.3 Content-Length \u5b57\u6bb5","text":"<p>\u4e00\u4e2aTCP\u8fde\u63a5\u73b0\u5728\u53ef\u4ee5\u4f20\u9001\u591a\u4e2a\u56de\u5e94\uff0c\u52bf\u5fc5\u5c31\u8981\u6709\u4e00\u79cd\u673a\u5236\uff0c\u533a\u5206\u6570\u636e\u5305\u662f\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u56de\u5e94\u7684\u3002\u8fd9\u5c31\u662f<code>Content-length</code>\u5b57\u6bb5\u7684\u4f5c\u7528\uff0c\u58f0\u660e\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <pre><code>Content-Length: 3495\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u544a\u8bc9\u6d4f\u89c8\u5668\uff0c\u672c\u6b21\u56de\u5e94\u7684\u957f\u5ea6\u662f3495\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u7684\u5b57\u8282\u5c31\u5c5e\u4e8e\u4e0b\u4e00\u4e2a\u56de\u5e94\u4e86\u3002</p> <p>\u57281.0\u7248\u4e2d\uff0c<code>Content-Length</code>\u5b57\u6bb5\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u53d1\u73b0\u670d\u52a1\u5668\u5173\u95ed\u4e86TCP\u8fde\u63a5\uff0c\u5c31\u8868\u660e\u6536\u5230\u7684\u6570\u636e\u5305\u5df2\u7ecf\u5168\u4e86\u3002</p>"},{"location":"http/#34-\u5206\u5757\u4f20\u8f93\u7f16\u7801","title":"3.4 \u5206\u5757\u4f20\u8f93\u7f16\u7801","text":"<p>\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\u7684\u524d\u63d0\u6761\u4ef6\u662f\uff0c\u670d\u52a1\u5668\u53d1\u9001\u56de\u5e94\u4e4b\u524d\uff0c\u5fc5\u987b\u77e5\u9053\u56de\u5e94\u7684\u6570\u636e\u957f\u5ea6\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u5f88\u8017\u65f6\u7684\u52a8\u6001\u64cd\u4f5c\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u670d\u52a1\u5668\u8981\u7b49\u5230\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\uff0c\u663e\u7136\u8fd9\u6837\u7684\u6548\u7387\u4e0d\u9ad8\u3002\u66f4\u597d\u7684\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u4ea7\u751f\u4e00\u5757\u6570\u636e\uff0c\u5c31\u53d1\u9001\u4e00\u5757\uff0c\u91c7\u7528\u201c\u6d41\u6a21\u5f0f\u201d\uff08stream\uff09\u53d6\u4ee3\u201c\u7f13\u5b58\u6a21\u5f0f\u201d\uff08buffer\uff09\u3002</p> <p>\u56e0\u6b64\uff0c1.1\u7248\u89c4\u5b9a\u53ef\u4ee5\u4e0d\u4f7f\u7528<code>Content-Length</code>\u5b57\u6bb5\uff0c\u800c\u4f7f\u7528\u201c\u5206\u5757\u4f20\u8f93\u7f16\u7801\u201d\uff08chunked transfer encoding\uff09\u3002\u53ea\u8981\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u5934\u4fe1\u606f\u6709<code>Transfer-Encoding</code>\u5b57\u6bb5\uff0c\u5c31\u8868\u660e\u56de\u5e94\u5c06\u7531\u6570\u91cf\u672a\u5b9a\u7684\u6570\u636e\u5757\u7ec4\u6210\u3002</p> <pre><code>Transfer-Encoding: chunked\n</code></pre> <p>\u6bcf\u4e2a\u975e\u7a7a\u7684\u6570\u636e\u5757\u4e4b\u524d\uff0c\u4f1a\u6709\u4e00\u4e2a16\u8fdb\u5236\u7684\u6570\u503c\uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u3002\u6700\u540e\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u5757\uff0c\u5c31\u8868\u793a\u672c\u6b21\u56de\u5e94\u7684\u6570\u636e\u53d1\u9001\u5b8c\u4e86\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nTransfer-Encoding: chunked\n\n25\nThis is the data in the first chunk\n\n1C\nand this is the second one\n\n3\ncon\n\n8\nsequence\n\n0\n</code></pre>"},{"location":"http/#35-\u5176\u4ed6\u529f\u80fd","title":"3.5 \u5176\u4ed6\u529f\u80fd","text":"<p>1.1\u7248\u8fd8\u65b0\u589e\u4e86\u8bb8\u591a\u52a8\u8bcd\u65b9\u6cd5\uff1a<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>HEAD</code>\u3001 <code>OPTIONS</code>\u3001<code>DELETE</code>\u3002</p> <p>\u53e6\u5916\uff0c\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u65b0\u589e\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u7528\u6765\u6307\u5b9a\u670d\u52a1\u5668\u7684\u57df\u540d\u3002</p> <pre><code>Host: www.example.com\n</code></pre> <p>\u6709\u4e86<code>Host</code>\u5b57\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u5f80\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u7684\u4e0d\u540c\u7f51\u7ad9\uff0c\u4e3a\u865a\u62df\u4e3b\u673a\u7684\u5174\u8d77\u6253\u4e0b\u4e86\u57fa\u7840\u3002</p>"},{"location":"http/#36-\u7f3a\u70b9","title":"3.6 \u7f3a\u70b9","text":"<p>\u867d\u71361.1\u7248\u5141\u8bb8\u590d\u7528TCP\u8fde\u63a5\uff0c\u4f46\u662f\u540c\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u6240\u6709\u7684\u6570\u636e\u901a\u4fe1\u662f\u6309\u6b21\u5e8f\u8fdb\u884c\u7684\u3002\u670d\u52a1\u5668\u53ea\u6709\u5904\u7406\u5b8c\u4e00\u4e2a\u56de\u5e94\uff0c\u624d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u4e2a\u56de\u5e94\u3002\u8981\u662f\u524d\u9762\u7684\u56de\u5e94\u7279\u522b\u6162\uff0c\u540e\u9762\u5c31\u4f1a\u6709\u8bb8\u591a\u8bf7\u6c42\u6392\u961f\u7b49\u7740\u3002\u8fd9\u79f0\u4e3a\u201c\u961f\u5934\u5835\u585e\u201d\uff08Head-of-line blocking\uff09\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4e00\u662f\u51cf\u5c11\u8bf7\u6c42\u6570\uff0c\u4e8c\u662f\u540c\u65f6\u591a\u5f00\u6301\u4e45\u8fde\u63a5\u3002\u8fd9\u5bfc\u81f4\u4e86\u5f88\u591a\u7684\u7f51\u9875\u4f18\u5316\u6280\u5de7\uff0c\u6bd4\u5982\u5408\u5e76\u811a\u672c\u548c\u6837\u5f0f\u8868\u3001\u5c06\u56fe\u7247\u5d4c\u5165CSS\u4ee3\u7801\u3001\u57df\u540d\u5206\u7247\uff08domain sharding\uff09\u7b49\u7b49\u3002\u5982\u679cHTTP\u534f\u8bae\u8bbe\u8ba1\u5f97\u66f4\u597d\u4e00\u4e9b\uff0c\u8fd9\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u662f\u53ef\u4ee5\u907f\u514d\u7684\u3002</p>"},{"location":"http/#\u56dbspdy-\u534f\u8bae","title":"\u56db\u3001SPDY \u534f\u8bae","text":"<p>2009\u5e74\uff0c\u8c37\u6b4c\u516c\u5f00\u4e86\u81ea\u884c\u7814\u53d1\u7684 SPDY \u534f\u8bae\uff0c\u4e3b\u8981\u89e3\u51b3 HTTP/1.1 \u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\u3002</p> <p>\u8fd9\u4e2a\u534f\u8bae\u5728Chrome\u6d4f\u89c8\u5668\u4e0a\u8bc1\u660e\u53ef\u884c\u4ee5\u540e\uff0c\u5c31\u88ab\u5f53\u4f5c HTTP/2 \u7684\u57fa\u7840\uff0c\u4e3b\u8981\u7279\u6027\u90fd\u5728 HTTP/2 \u4e4b\u4e2d\u5f97\u5230\u7ee7\u627f\u3002</p>"},{"location":"http/#\u4e94http2","title":"\u4e94\u3001HTTP/2","text":"<p>2015\u5e74\uff0cHTTP/2 \u53d1\u5e03\u3002\u5b83\u4e0d\u53eb HTTP/2.0\uff0c\u662f\u56e0\u4e3a\u6807\u51c6\u59d4\u5458\u4f1a\u4e0d\u6253\u7b97\u518d\u53d1\u5e03\u5b50\u7248\u672c\u4e86\uff0c\u4e0b\u4e00\u4e2a\u65b0\u7248\u672c\u5c06\u662f HTTP/3\u3002</p>"},{"location":"http/#51-\u4e8c\u8fdb\u5236\u534f\u8bae","title":"5.1 \u4e8c\u8fdb\u5236\u534f\u8bae","text":"<p>HTTP/1.1 \u7248\u7684\u5934\u4fe1\u606f\u80af\u5b9a\u662f\u6587\u672c\uff08ASCII\u7f16\u7801\uff09\uff0c\u6570\u636e\u4f53\u53ef\u4ee5\u662f\u6587\u672c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u3002HTTP/2 \u5219\u662f\u4e00\u4e2a\u5f7b\u5e95\u7684\u4e8c\u8fdb\u5236\u534f\u8bae\uff0c\u5934\u4fe1\u606f\u548c\u6570\u636e\u4f53\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5e76\u4e14\u7edf\u79f0\u4e3a\u201c\u5e27\u201d\uff08frame\uff09\uff1a\u5934\u4fe1\u606f\u5e27\u548c\u6570\u636e\u5e27\u3002</p> <p>\u4e8c\u8fdb\u5236\u534f\u8bae\u7684\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u5b9a\u4e49\u989d\u5916\u7684\u5e27\u3002HTTP/2 \u5b9a\u4e49\u4e86\u8fd1\u5341\u79cd\u5e27\uff0c\u4e3a\u5c06\u6765\u7684\u9ad8\u7ea7\u5e94\u7528\u6253\u597d\u4e86\u57fa\u7840\u3002\u5982\u679c\u4f7f\u7528\u6587\u672c\u5b9e\u73b0\u8fd9\u79cd\u529f\u80fd\uff0c\u89e3\u6790\u6570\u636e\u5c06\u4f1a\u53d8\u5f97\u975e\u5e38\u9ebb\u70e6\uff0c\u4e8c\u8fdb\u5236\u89e3\u6790\u5219\u65b9\u4fbf\u5f97\u591a\u3002</p>"},{"location":"http/#52-\u591a\u5de5","title":"5.2 \u591a\u5de5","text":"<p>HTTP/2 \u590d\u7528TCP\u8fde\u63a5\uff0c\u5728\u4e00\u4e2a\u8fde\u63a5\u91cc\uff0c\u5ba2\u6237\u7aef\u548c\u6d4f\u89c8\u5668\u90fd\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u591a\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\uff0c\u800c\u4e14\u4e0d\u7528\u6309\u7167\u987a\u5e8f\u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u201c\u961f\u5934\u5835\u585e\u201d\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u4e00\u4e2aTCP\u8fde\u63a5\u91cc\u9762\uff0c\u670d\u52a1\u5668\u540c\u65f6\u6536\u5230\u4e86A\u8bf7\u6c42\u548cB\u8bf7\u6c42\uff0c\u4e8e\u662f\u5148\u56de\u5e94A\u8bf7\u6c42\uff0c\u7ed3\u679c\u53d1\u73b0\u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u4e8e\u662f\u5c31\u53d1\u9001A\u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u597d\u7684\u90e8\u5206\uff0c \u63a5\u7740\u56de\u5e94B\u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\uff0c\u518d\u53d1\u9001A\u8bf7\u6c42\u5269\u4e0b\u7684\u90e8\u5206\u3002</p> <p>\u8fd9\u6837\u53cc\u5411\u7684\u3001\u5b9e\u65f6\u7684\u901a\u4fe1\uff0c\u5c31\u53eb\u505a\u591a\u5de5\uff08Multiplexing\uff09\u3002</p>"},{"location":"http/#53-\u6570\u636e\u6d41","title":"5.3 \u6570\u636e\u6d41","text":"<p>\u56e0\u4e3a HTTP/2 \u7684\u6570\u636e\u5305\u662f\u4e0d\u6309\u987a\u5e8f\u53d1\u9001\u7684\uff0c\u540c\u4e00\u4e2a\u8fde\u63a5\u91cc\u9762\u8fde\u7eed\u7684\u6570\u636e\u5305\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u56de\u5e94\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8981\u5bf9\u6570\u636e\u5305\u505a\u6807\u8bb0\uff0c\u6307\u51fa\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u56de\u5e94\u3002</p> <p>HTTP/2 \u5c06\u6bcf\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u6240\u6709\u6570\u636e\u5305\uff0c\u79f0\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41\uff08stream\uff09\u3002\u6bcf\u4e2a\u6570\u636e\u6d41\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7f16\u53f7\u3002\u6570\u636e\u5305\u53d1\u9001\u7684\u65f6\u5019\uff0c\u90fd\u5fc5\u987b\u6807\u8bb0\u6570\u636e\u6d41ID\uff0c\u7528\u6765\u533a\u5206\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u6570\u636e\u6d41\u3002\u53e6\u5916\u8fd8\u89c4\u5b9a\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u6d41\uff0cID\u4e00\u5f8b\u4e3a\u5947\u6570\uff0c\u670d\u52a1\u5668\u53d1\u51fa\u7684\uff0cID\u4e3a\u5076\u6570\u3002</p> <p>\u6570\u636e\u6d41\u53d1\u9001\u5230\u4e00\u534a\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\uff08<code>RST_STREAM</code>\u5e27\uff09\uff0c\u53d6\u6d88\u8fd9\u4e2a\u6570\u636e\u6d41\u30021.1\u7248\u53d6\u6d88\u6570\u636e\u6d41\u7684\u552f\u4e00\u65b9\u6cd5\uff0c\u5c31\u662f\u5173\u95edTCP\u8fde\u63a5\u3002\u8fd9\u5c31\u662f\u8bf4\uff0cHTTP/2 \u53ef\u4ee5\u53d6\u6d88\u67d0\u4e00\u6b21\u8bf7\u6c42\uff0c\u540c\u65f6\u4fdd\u8bc1TCP\u8fde\u63a5\u8fd8\u6253\u5f00\u7740\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bf7\u6c42\u4f7f\u7528\u3002</p> <p>\u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u6d41\u7684\u4f18\u5148\u7ea7\u3002\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u8d8a\u65e9\u56de\u5e94\u3002</p>"},{"location":"http/#54-\u5934\u4fe1\u606f\u538b\u7f29","title":"5.4 \u5934\u4fe1\u606f\u538b\u7f29","text":"<p>HTTP \u534f\u8bae\u4e0d\u5e26\u6709\u72b6\u6001\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u4e0a\u6240\u6709\u4fe1\u606f\u3002\u6240\u4ee5\uff0c\u8bf7\u6c42\u7684\u5f88\u591a\u5b57\u6bb5\u90fd\u662f\u91cd\u590d\u7684\uff0c\u6bd4\u5982<code>Cookie</code>\u548c<code>User Agent</code>\uff0c\u4e00\u6a21\u4e00\u6837\u7684\u5185\u5bb9\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u5fc5\u987b\u9644\u5e26\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u5f88\u591a\u5e26\u5bbd\uff0c\u4e5f\u5f71\u54cd\u901f\u5ea6\u3002</p> <p>HTTP/2 \u5bf9\u8fd9\u4e00\u70b9\u505a\u4e86\u4f18\u5316\uff0c\u5f15\u5165\u4e86\u5934\u4fe1\u606f\u538b\u7f29\u673a\u5236\uff08header compression\uff09\u3002\u4e00\u65b9\u9762\uff0c\u5934\u4fe1\u606f\u4f7f\u7528<code>gzip</code>\u6216<code>compress</code>\u538b\u7f29\u540e\u518d\u53d1\u9001\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u540c\u65f6\u7ef4\u62a4\u4e00\u5f20\u5934\u4fe1\u606f\u8868\uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u4f1a\u5b58\u5165\u8fd9\u4e2a\u8868\uff0c\u751f\u6210\u4e00\u4e2a\u7d22\u5f15\u53f7\uff0c\u4ee5\u540e\u5c31\u4e0d\u53d1\u9001\u540c\u6837\u5b57\u6bb5\u4e86\uff0c\u53ea\u53d1\u9001\u7d22\u5f15\u53f7\uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u901f\u5ea6\u4e86\u3002</p>"},{"location":"http/#55-\u670d\u52a1\u5668\u63a8\u9001","title":"5.5 \u670d\u52a1\u5668\u63a8\u9001","text":"<p>HTTP/2 \u5141\u8bb8\u670d\u52a1\u5668\u672a\u7ecf\u8bf7\u6c42\uff0c\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u8d44\u6e90\uff0c\u8fd9\u53eb\u505a\u670d\u52a1\u5668\u63a8\u9001\uff08server push\uff09\u3002</p> <p>\u5e38\u89c1\u573a\u666f\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e00\u4e2a\u7f51\u9875\uff0c\u8fd9\u4e2a\u7f51\u9875\u91cc\u9762\u5305\u542b\u5f88\u591a\u9759\u6001\u8d44\u6e90\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6536\u5230\u7f51\u9875\u540e\uff0c\u89e3\u6790HTML\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u9759\u6001\u8d44\u6e90\uff0c\u518d\u53d1\u51fa\u9759\u6001\u8d44\u6e90\u8bf7\u6c42\u3002\u5176\u5b9e\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u9884\u671f\u5230\u5ba2\u6237\u7aef\u8bf7\u6c42\u7f51\u9875\u540e\uff0c\u5f88\u53ef\u80fd\u4f1a\u518d\u8bf7\u6c42\u9759\u6001\u8d44\u6e90\uff0c\u6240\u4ee5\u5c31\u4e3b\u52a8\u628a\u8fd9\u4e9b\u9759\u6001\u8d44\u6e90\u968f\u7740\u7f51\u9875\u4e00\u8d77\u53d1\u7ed9\u5ba2\u6237\u7aef\u4e86\u3002</p>"},{"location":"http/#\u516d\u53c2\u8003\u94fe\u63a5","title":"\u516d\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Journey to HTTP/2, by Kamran Ahmed</li> <li>HTTP, by Wikipedia</li> <li>HTTP/2 Specification</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/http-referer/","title":"HTTP Referer \u6559\u7a0b","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTP Referer \u6559\u7a0b</p> <p>HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f\u91cc\u9762\uff0c<code>Referer</code> \u662f\u4e00\u4e2a\u5e38\u89c1\u5b57\u6bb5\uff0c\u63d0\u4f9b\u8bbf\u95ee\u6765\u6e90\u7684\u4fe1\u606f\u3002</p> <p>\u5f88\u591a\u5f00\u53d1\u8005\u77e5\u9053\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u8bf4\u4e0d\u6e05\u5b83\u7684\u5177\u4f53\u7ec6\u8282\u3002\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u8be5\u5b57\u6bb5\u3002</p>"},{"location":"http/http-referer/#\u4e00referer-\u7684\u542b\u4e49","title":"\u4e00\u3001Referer \u7684\u542b\u4e49","text":"<p>\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u8d2d\u4e70\u670d\u52a1\u6216\u52a0\u5165\u4f1a\u5458\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u8981\u6c42\u63d0\u4f9b\u4fe1\u606f\uff1a\u201c\u4f60\u4ece\u54ea\u91cc\u77e5\u9053\u4e86\u6211\u4eec\uff1f\u201d</p> <p></p> <p>\u8fd9\u53eb\u505a\u5f15\u8350\u4eba\uff08referrer\uff09\uff0c\u8c01\u5f15\u8350\u4e86\u4f60\uff1f\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u662f\u5f88\u6709\u7528\u7684\u4fe1\u606f\u3002</p> <p>\u4e92\u8054\u7f51\u4e5f\u662f\u4e00\u6837\uff0c\u4f60\u4e0d\u4f1a\u65e0\u7f18\u65e0\u6545\u8bbf\u95ee\u4e00\u4e2a\u7f51\u9875\uff0c\u603b\u662f\u6709\u4eba\u544a\u8bc9\u4f60\uff0c\u53ef\u4ee5\u53bb\u90a3\u91cc\u770b\u770b\u3002\u670d\u52a1\u5668\u4e5f\u60f3\u77e5\u9053\uff0c\u4f60\u7684\u201c\u5f15\u8350\u4eba\u201d\u662f\u8c01\uff1f</p> <p>HTTP \u534f\u8bae\u5728\u8bf7\u6c42\uff08request\uff09\u7684\u5934\u4fe1\u606f\u91cc\u9762\uff0c\u8bbe\u8ba1\u4e86\u4e00\u4e2a<code>Referer</code>\u5b57\u6bb5\uff0c\u7ed9\u51fa\u201c\u5f15\u8350\u7f51\u9875\u201d\u7684 URL\u3002</p> <p></p> <p>\u8fd9\u4e2a\u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u81ea\u4e3b\u51b3\u5b9a\u662f\u5426\u52a0\u4e0a\u8be5\u5b57\u6bb5\u3002</p> <p>\u5f88\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7684\u62fc\u5199\u662f\u9519\u7684\u3002<code>Referer</code>\u7684\u6b63\u786e\u62fc\u5199\u662f<code>Referrer</code>\uff0c\u4f46\u662f\u5199\u5165\u6807\u51c6\u7684\u65f6\u5019\uff0c\u4e0d\u77e5\u4e3a\u4f55\uff0c\u6ca1\u4eba\u53d1\u73b0\u5c11\u4e86\u4e00\u4e2a\u5b57\u6bcd<code>r</code>\u3002\u6807\u51c6\u5b9a\u6848\u4ee5\u540e\uff0c\u53ea\u80fd\u5c06\u9519\u5c31\u9519\uff0c\u6240\u6709\u5934\u4fe1\u606f\u7684\u8be5\u5b57\u6bb5\u90fd\u4e00\u5f8b\u9519\u8bef\u62fc\u5199\u6210<code>Referer</code>\u3002</p>"},{"location":"http/http-referer/#\u4e8creferer-\u7684\u53d1\u751f\u573a\u666f","title":"\u4e8c\u3001Referer \u7684\u53d1\u751f\u573a\u666f","text":"<p>\u6d4f\u89c8\u5668\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\u7684\u65f6\u5019\uff0c<code>Referer</code>\u5b57\u6bb5\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff0c\u7528\u6237\u5728\u5730\u5740\u680f\u8f93\u5165\u7f51\u5740\uff0c\u6216\u8005\u9009\u4e2d\u6d4f\u89c8\u5668\u4e66\u7b7e\uff0c\u5c31\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u4e3b\u8981\u662f\u4ee5\u4e0b\u4e09\u79cd\u573a\u666f\uff0c\u4f1a\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\uff081\uff09\u7528\u6237\u70b9\u51fb\u7f51\u9875\u4e0a\u7684\u94fe\u63a5\u3002</p> <p>\uff082\uff09\u7528\u6237\u53d1\u9001\u8868\u5355\u3002</p> <p>\uff083\uff09\u7f51\u9875\u52a0\u8f7d\u9759\u6001\u8d44\u6e90\uff0c\u6bd4\u5982\u52a0\u8f7d\u56fe\u7247\u3001\u811a\u672c\u3001\u6837\u5f0f\u3002</p> <pre><code>&lt;!-- \u52a0\u8f7d\u56fe\u7247 --&gt;\n&lt;img src=\"foo.jpg\"&gt;\n&lt;!-- \u52a0\u8f7d\u811a\u672c --&gt;\n&lt;script src=\"foo.js\"&gt;&lt;/script&gt;\n&lt;!-- \u52a0\u8f7d\u6837\u5f0f --&gt;\n&lt;link href=\"foo.css\" rel=\"stylesheet\"&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4e9b\u573a\u666f\uff0c\u6d4f\u89c8\u5668\u90fd\u4f1a\u5c06\u5f53\u524d\u7f51\u5740\u4f5c\u4e3a<code>Referer</code>\u5b57\u6bb5\uff0c\u653e\u5728 HTTP \u8bf7\u6c42\u7684\u5934\u4fe1\u606f\u53d1\u9001\u3002</p> <p>\u6d4f\u89c8\u5668\u7684 JavaScript \u5f15\u64ce\u63d0\u4f9b<code>document.referrer</code>\u5c5e\u6027\uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u9875\u9762\u7684\u5f15\u8350\u6765\u6e90\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u6b63\u786e\u62fc\u5199\u3002</p>"},{"location":"http/http-referer/#\u4e09referer-\u7684\u4f5c\u7528","title":"\u4e09\u3001Referer \u7684\u4f5c\u7528","text":"<p><code>Referer</code>\u5b57\u6bb5\u5b9e\u9645\u4e0a\u544a\u8bc9\u4e86\u670d\u52a1\u5668\uff0c\u7528\u6237\u5728\u8bbf\u95ee\u5f53\u524d\u8d44\u6e90\u4e4b\u524d\u7684\u4f4d\u7f6e\u3002\u8fd9\u5f80\u5f80\u53ef\u4ee5\u7528\u6765\u7528\u6237\u8ddf\u8e2a\u3002</p> <p>\u4e00\u4e2a\u5178\u578b\u7684\u5e94\u7528\u662f\uff0c\u6709\u4e9b\u7f51\u7ad9\u4e0d\u5141\u8bb8\u56fe\u7247\u5916\u94fe\uff0c\u53ea\u6709\u81ea\u5bb6\u7684\u7f51\u7ad9\u624d\u80fd\u663e\u793a\u56fe\u7247\uff0c\u5916\u90e8\u7f51\u7ad9\u52a0\u8f7d\u56fe\u7247\u5c31\u4f1a\u62a5\u9519\u3002\u5b83\u7684\u5b9e\u73b0\u5c31\u662f\u57fa\u4e8e<code>Referer</code>\u5b57\u6bb5\uff0c\u5982\u679c\u8be5\u5b57\u6bb5\u7684\u7f51\u5740\u662f\u81ea\u5bb6\u7f51\u5740\uff0c\u5c31\u653e\u884c\u3002</p> <p>\u7531\u4e8e\u6d89\u53ca\u9690\u79c1\uff0c\u5f88\u591a\u65f6\u5019\u4e0d\u9002\u5408\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u8fd9\u91cc\u4e3e\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u4e0d\u9002\u5408\u66b4\u9732 URL\u3002</p> \u4e00\u4e2a\u662f \u529f\u80fd URL\uff0c\u5373\u6709\u7684 URL \u4e0d\u8981\u767b\u5f55\uff0c\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5c31\u80fd\u76f4\u63a5\u5b8c\u6210\u5bc6\u7801\u91cd\u7f6e\u3001\u90ae\u4ef6\u9000\u8ba2\u7b49\u529f\u80fd\u3002 \u53e6\u4e00\u4e2a\u662f \u5185\u7f51 URL\uff0c\u4e0d\u5e0c\u671b\u5916\u90e8\u7528\u6237\u77e5\u9053\u5185\u7f51\u6709\u8fd9\u6837\u7684\u5730\u5740\u3002<code>Referer</code>\u5b57\u6bb5\u5f88\u53ef\u80fd\u628a\u8fd9\u4e9b URL \u66b4\u9732\u51fa\u53bb\u3002 <p>\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u9700\u8981\u5b9a\u5236<code>Referer</code>\u5b57\u6bb5\u3002\u6bd4\u5982\u793e\u4ea4\u7f51\u7ad9\u4e0a\uff0c\u7528\u6237\u5728\u5bf9\u8bdd\u4e2d\u63d0\u5230\u67d0\u4e2a\u7f51\u5740\u3002\u8fd9\u65f6\uff0c\u4e0d\u5e0c\u671b\u66b4\u9732\u7528\u6237\u6240\u5728\u7684\u539f\u59cb\u7f51\u5740\uff0c\u4f46\u662f\u53ef\u4ee5\u66b4\u9732\u793e\u4ea4\u7f51\u7ad9\u7684\u57df\u540d\uff0c\u8ba9\u5bf9\u65b9\u77e5\u9053\uff0c\u662f\u6211\u8d21\u732e\u4e86\u4f60\u7684\u6d41\u91cf\u3002</p>"},{"location":"http/http-referer/#\u56dbrel\u5c5e\u6027","title":"\u56db\u3001<code>rel</code>\u5c5e\u6027","text":"<p>\u7531\u4e8e\u4e0a\u4e00\u8282\u7684\u539f\u56e0\uff0c\u6d4f\u89c8\u5668\u63d0\u4f9b\u4e00\u7cfb\u5217\u624b\u6bb5\uff0c\u5141\u8bb8\u6539\u53d8\u9ed8\u8ba4\u7684<code>Referer</code>\u884c\u4e3a\u3002</p> <p>\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u4ee5\u6539\u53d8\u6d4f\u89c8\u5668\u672c\u8eab\u7684\u5168\u5c40\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u5b89\u88c5\u6d4f\u89c8\u5668\u6269\u5c55\u3002\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002</p> <p>\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c<code>rel=\"noreferrer\"</code>\u5c5e\u6027\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u6cd5\u3002<code>&lt;a&gt;</code>\u3001<code>&lt;area&gt;</code>\u548c<code>&lt;form&gt;</code>\u4e09\u4e2a\u6807\u7b7e\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\uff0c\u4e00\u65e6\u4f7f\u7528\uff0c\u8be5\u5143\u7d20\u5c31\u4e0d\u4f1a\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002</p> <pre><code>&lt;a href=\"...\" rel=\"noreferrer\" target=\"_blank\"&gt;xxx&lt;/a&gt;\n</code></pre> <p>\u4e0a\u9762\u94fe\u63a5\u70b9\u51fb\u4ea7\u751f\u7684 HTTP \u8bf7\u6c42\uff0c\u4e0d\u4f1a\u5e26\u6709<code>Referer</code>\u5b57\u6bb5\u3002</p> <p>\u6ce8\u610f\uff0c<code>rel=\"noreferrer\"</code>\u91c7\u7528\u7684\u662f\u6b63\u786e\u7684\u62fc\u5199\u3002</p>"},{"location":"http/http-referer/#\u4e94referrer-policy-\u7684\u503c","title":"\u4e94\u3001Referrer Policy \u7684\u503c","text":"<p><code>rel</code>\u5c5e\u6027\u53ea\u80fd\u5b9a\u5236\u5355\u4e2a\u5143\u7d20\u7684<code>Referer</code>\u884c\u4e3a\uff0c\u800c\u4e14\u9009\u62e9\u6bd4\u8f83\u5c11\uff0c\u53ea\u80fd\u53d1\u9001\u6216\u4e0d\u53d1\u9001\u3002W3C \u4e3a\u6b64\u5236\u5b9a\u4e86\u66f4\u5f3a\u5927\u7684 Referrer Policy\u3002</p> <p>Referrer Policy \u53ef\u4ee5\u8bbe\u5b9a8\u4e2a\u503c\u3002</p> \uff081\uff09no-referrer \u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\u3002 \uff082\uff09no-referrer-when-downgrade \u5982\u679c\u4ece HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5176\u4ed6\u60c5\u51b5\u53d1\u9001\uff08\u5305\u62ec HTTP \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff09\u3002\u8fd9\u662f\u6d4f\u89c8\u5668\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \uff083\uff09same-origin \u94fe\u63a5\u5230\u540c\u6e90\u7f51\u5740\uff08\u534f\u8bae+\u57df\u540d+\u7aef\u53e3 \u90fd\u76f8\u540c\uff09\u65f6\u53d1\u9001\uff0c\u5426\u5219\u4e0d\u53d1\u9001\u3002\u6ce8\u610f\uff0c<code>https://foo.com</code>\u94fe\u63a5\u5230<code>http://foo.com</code>\u4e5f\u5c5e\u4e8e\u8de8\u57df\u3002 \uff084\uff09origin <code>Referer</code>\u5b57\u6bb5\u4e00\u5f8b\u53ea\u53d1\u9001\u6e90\u4fe1\u606f\uff08\u534f\u8bae+\u57df\u540d+\u7aef\u53e3\uff09\uff0c\u4e0d\u7ba1\u662f\u5426\u8de8\u57df\u3002 \uff085\uff09strict-origin \u5982\u679c\u4ece HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5176\u4ed6\u60c5\u51b5\u53ea\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff086\uff09origin-when-cross-origin \u540c\u6e90\u65f6\uff0c\u53d1\u9001\u5b8c\u6574\u7684<code>Referer</code>\u5b57\u6bb5\uff0c\u8de8\u57df\u65f6\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff087\uff09strict-origin-when-cross-origin \u540c\u6e90\u65f6\uff0c\u53d1\u9001\u5b8c\u6574\u7684<code>Referer</code>\u5b57\u6bb5\uff1b\u8de8\u57df\u65f6\uff0c\u5982\u679c HTTPS \u7f51\u5740\u94fe\u63a5\u5230 HTTP \u7f51\u5740\uff0c\u4e0d\u53d1\u9001<code>Referer</code>\u5b57\u6bb5\uff0c\u5426\u5219\u53d1\u9001\u6e90\u4fe1\u606f\u3002 \uff088\uff09unsafe-url <code>Referer</code>\u5b57\u6bb5\u5305\u542b\u6e90\u4fe1\u606f\u3001\u8def\u5f84\u548c\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u4e0d\u5305\u542b\u951a\u70b9\u3001\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002"},{"location":"http/http-referer/#\u516dreferrer-policy-\u7684\u7528\u6cd5","title":"\u516d\u3001Referrer Policy \u7684\u7528\u6cd5","text":"<p>Referrer Policy \u6709\u591a\u79cd\u4f7f\u7528\u65b9\u6cd5\u3002</p> \uff081\uff09HTTP \u5934\u4fe1\u606f <p>\u670d\u52a1\u5668\u53d1\u9001\u7f51\u9875\u7684\u65f6\u5019\uff0c\u901a\u8fc7 HTTP \u5934\u4fe1\u606f\u7684<code>Referrer-Policy</code>\u544a\u8bc9\u6d4f\u89c8\u5668\u3002</p> <pre><code>Referrer-Policy: origin\n</code></pre> \uff082\uff09<code>&lt;meta&gt;</code>\u6807\u7b7e <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>&lt;meta&gt;</code>\u6807\u7b7e\uff0c\u5728\u7f51\u9875\u5934\u90e8\u8bbe\u7f6e\u3002</p> <pre><code>&lt;meta name=\"referrer\" content=\"origin\"&gt;\n</code></pre> \uff083\uff09<code>referrerpolicy</code>\u5c5e\u6027 <p><code>&lt;a&gt;</code>\u3001<code>&lt;area&gt;</code>\u3001<code>&lt;img&gt;</code>\u3001<code>&lt;iframe&gt;</code>\u548c<code>&lt;link&gt;</code>\u6807\u7b7e\uff0c\u53ef\u4ee5\u8bbe\u7f6e<code>referrerpolicy</code> \u5c5e\u6027\u3002</p> <pre><code>&lt;a href=\"...\" referrerpolicy=\"origin\" target=\"_blank\"&gt;xxx&lt;/a&gt;\n</code></pre>"},{"location":"http/http-referer/#\u4e03\u9000\u51fa\u9875\u9762\u91cd\u5b9a\u5411","title":"\u4e03\u3001\u9000\u51fa\u9875\u9762\u91cd\u5b9a\u5411","text":"<p>\u8fd8\u6709\u4e00\u79cd\u6bd4\u8f83\u8001\u5f0f\u7684\u6280\u5de7\uff0c\u4f46\u662f\u975e\u5e38\u6709\u6548\uff0c\u53ef\u4ee5\u9690\u85cf\u6389\u539f\u59cb\u7f51\u5740\uff0c\u8c37\u6b4c\u548c Facebook \u90fd\u5728\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <p>\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u76f4\u63a5\u8df3\u8f6c\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u4e2a\u91cd\u5b9a\u5411\u7f51\u5740\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>&lt;a  href=\"/exit.php?url=http%3A%2F%2Fexample.com\"&gt;Example.com&lt;/a&gt;\n</code></pre> <p>\u4e0a\u9762\u7f51\u5740\u4e2d\uff0c\u5148\u8df3\u8f6c\u5230<code>/exit.php</code>\uff0c\u7136\u540e\u518d\u8df3\u8f6c\u5230\u76ee\u6807\u7f51\u5740\u3002\u8fd9\u65f6\uff0c<code>Referer</code>\u5b57\u6bb5\u5c31\u4e0d\u4f1a\u5305\u542b\u539f\u59cb\u7f51\u5740\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"http/https/","title":"HTTPS \u5347\u7ea7\u6307\u5357","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - HTTPS \u5347\u7ea7\u6307\u5357</p> <p>\u4e0a\u4e00\u7bc7\u6587\u7ae0\u6211\u4ecb\u7ecd\u4e86 HTTP/2 \u534f\u8bae \uff0c\u5b83\u53ea\u6709\u5728 HTTPS \u73af\u5883\u624d\u4f1a\u751f\u6548\u3002</p> <p>\u4e3a\u4e86\u5347\u7ea7\u5230 HTTP/2 \u534f\u8bae\uff0c\u5fc5\u987b\u5148\u542f\u7528 HTTPS\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3 HTTPS \u534f\u8bae\uff08\u5b66\u540d TLS \u534f\u8bae\uff09\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4ee5\u524d\u7684\u6587\u7ae0\u3002</p> <ul> <li>\u300aHTTPS \u534f\u8bae\u6982\u8ff0\u300b</li> <li>\u300a\u56fe\u89e3 HTTPS \u534f\u8bae\u300b</li> <li>\u300aHTTPS \u534f\u8bae\u7684\u4e03\u4e2a\u8bef\u89e3\u300b</li> <li>\u300aHTTPS \u534f\u8bae\u7684\u5ef6\u8fdf\u6709\u591a\u5927\uff1f\u300b</li> </ul> <p>\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5c06\u4e00\u4e2a HTTP \u7f51\u7ad9\u5347\u7ea7\u5230 HTTPS \u3002</p> <p></p>"},{"location":"http/https/#\u4e00\u83b7\u53d6\u8bc1\u4e66","title":"\u4e00\u3001\u83b7\u53d6\u8bc1\u4e66","text":"<p>\u5347\u7ea7\u5230HTTPS\u534f\u8bae\u7684\u7b2c\u4e00\u6b65\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u5f20\u8bc1\u4e66\u3002</p> <p>\u8bc1\u4e66\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u91cc\u9762\u5305\u542b\u7ecf\u8fc7\u8ba4\u8bc1\u7684\u7f51\u7ad9\u516c\u94a5\u548c\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u8981\u4ece\u7ecf\u9500\u5546\u8d2d\u4e70\u3002</p> <ul> <li>GoGetSSL</li> <li>SSLs.com</li> <li>SSLmate.com</li> </ul> <p>\u8bc1\u4e66\u6709\u5f88\u591a\u7c7b\u578b\uff0c\u9996\u5148\u5206\u4e3a\u4e09\u79cd\u8ba4\u8bc1\u7ea7\u522b\u3002</p> <p></p> <ul> <li>\u57df\u540d\u8ba4\u8bc1\uff08Domain Validation\uff09\uff1a\u6700\u4f4e\u7ea7\u522b\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u786e\u8ba4\u7533\u8bf7\u4eba\u62e5\u6709\u8fd9\u4e2a\u57df\u540d\u3002\u5bf9\u4e8e\u8fd9\u79cd\u8bc1\u4e66\uff0c\u6d4f\u89c8\u5668\u4f1a\u5728\u5730\u5740\u680f\u663e\u793a\u4e00\u628a\u9501\u3002</li> <li>\u516c\u53f8\u8ba4\u8bc1\uff08Company Validation\uff09\uff1a\u786e\u8ba4\u57df\u540d\u6240\u6709\u4eba\u662f\u54ea\u4e00\u5bb6\u516c\u53f8\uff0c\u8bc1\u4e66\u91cc\u9762\u4f1a\u5305\u542b\u516c\u53f8\u4fe1\u606f\u3002</li> <li>\u6269\u5c55\u8ba4\u8bc1\uff08Extended Validation\uff09\uff1a\u6700\u9ad8\u7ea7\u522b\u7684\u8ba4\u8bc1\uff0c\u6d4f\u89c8\u5668\u5730\u5740\u680f\u4f1a\u663e\u793a\u516c\u53f8\u540d\u3002</li> </ul> <p>\u8fd8\u5206\u4e3a\u4e09\u79cd\u8986\u76d6\u8303\u56f4\u3002</p> <ul> <li>\u5355\u57df\u540d\u8bc1\u4e66\uff1a\u53ea\u80fd\u7528\u4e8e\u5355\u4e00\u57df\u540d\uff0c<code>foo.com</code>\u7684\u8bc1\u4e66\u4e0d\u80fd\u7528\u4e8e<code>www.foo.com</code></li> <li>\u901a\u914d\u7b26\u8bc1\u4e66\uff1a\u53ef\u4ee5\u7528\u4e8e\u67d0\u4e2a\u57df\u540d\u53ca\u5176\u6240\u6709\u4e00\u7ea7\u5b50\u57df\u540d\uff0c\u6bd4\u5982<code>*.foo.com</code>\u7684\u8bc1\u4e66\u53ef\u4ee5\u7528\u4e8e<code>foo.com</code>\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e<code>www.foo.com</code></li> <li>\u591a\u57df\u540d\u8bc1\u4e66\uff1a\u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u57df\u540d\uff0c\u6bd4\u5982<code>foo.com</code>\u548c<code>bar.com</code></li> </ul> <p>\u8ba4\u8bc1\u7ea7\u522b\u8d8a\u9ad8\u3001\u8986\u76d6\u8303\u56f4\u8d8a\u5e7f\u7684\u8bc1\u4e66\uff0c\u4ef7\u683c\u8d8a\u8d35\u3002</p> <p>\u8fd8\u6709\u4e00\u4e2a\u514d\u8d39\u8bc1\u4e66\u7684\u9009\u62e9\u3002\u4e3a\u4e86\u63a8\u5e7fHTTPS\u534f\u8bae\uff0c\u7535\u5b50\u524d\u54e8\u57fa\u91d1\u4f1aEFF\u6210\u7acb\u4e86 Let\u2019s Encrypt\uff0c\u63d0\u4f9b\u514d\u8d39\u8bc1\u4e66\uff08\u6559\u7a0b\u548c\u5de5\u5177\uff09\u3002</p> <p>\u62ff\u5230\u8bc1\u4e66\u4ee5\u540e\uff0c\u53ef\u4ee5\u7528SSL Certificate Check\u68c0\u67e5\u4e00\u4e0b\uff0c\u4fe1\u606f\u662f\u5426\u6b63\u786e\u3002</p>"},{"location":"http/https/#\u4e8c\u5b89\u88c5\u8bc1\u4e66","title":"\u4e8c\u3001\u5b89\u88c5\u8bc1\u4e66","text":"<p>\u8bc1\u4e66\u53ef\u4ee5\u653e\u5728<code>/etc/ssl</code>\u76ee\u5f55\uff08Linux \u7cfb\u7edf\uff09\uff0c\u7136\u540e\u6839\u636e\u4f60\u4f7f\u7528\u7684Web\u670d\u52a1\u5668\u8fdb\u884c\u914d\u7f6e\u3002</p> <ul> <li>\u8bc1\u4e66\u914d\u7f6e\u6587\u4ef6\u751f\u6210\u5668\uff0cby Mozilla</li> <li>\u914d\u7f6e\u6587\u4ef6\u6a21\u677f\uff0cby SSLMate</li> </ul> <p>\u5982\u679c\u4f7f\u7528 Let\u2019s Encrypt \u8bc1\u4e66\uff0c\u8bf7\u4f7f\u7528\u81ea\u52a8\u5b89\u88c5\u5de5\u5177Certbot\u3002</p> <p>\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f7f\u7528 SSL Labs Server Test \u68c0\u67e5\u4e00\u4e0b\u8bc1\u4e66\u662f\u5426\u751f\u6548\u3002</p>"},{"location":"http/https/#\u4e09\u4fee\u6539\u94fe\u63a5","title":"\u4e09\u3001\u4fee\u6539\u94fe\u63a5","text":"<p>\u4e0b\u4e00\u6b65\uff0c\u7f51\u9875\u52a0\u8f7d\u7684 HTTP \u8d44\u6e90\uff0c\u5168\u90e8\u6539\u6210 HTTPS \u94fe\u63a5\u3002\u56e0\u4e3a\u52a0\u5bc6\u7f51\u9875\u5185\u6709\u975e\u52a0\u5bc6\u7684\u8d44\u6e90\uff0c\u6d4f\u89c8\u5668\u662f\u4e0d\u4f1a\u52a0\u8f7d\u7684\u3002</p> <pre><code>&lt;script src=\"http://foo.com/jquery.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u4e0a\u9762\u8fd9\u884c\u52a0\u8f7d\u547d\u4ee4\uff0c\u6709\u4e24\u79cd\u6539\u6cd5\u3002</p> <pre><code>&lt;!-- \u6539\u6cd5\u4e00 --&gt;\n&lt;script src=\"https://foo.com/jquery.js\"&gt;&lt;/script&gt;\n\n&lt;!-- \u6539\u6cd5\u4e8c --&gt;\n&lt;script src=\"//foo.com/jquery.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u5176\u4e2d\uff0c\u6539\u6cd5\u4e8c\u4f1a\u6839\u636e\u5f53\u524d\u7f51\u9875\u7684\u534f\u8bae\uff0c\u52a0\u8f7d\u76f8\u540c\u534f\u8bae\u7684\u5916\u90e8\u8d44\u6e90\uff0c\u66f4\u7075\u6d3b\u4e00\u4e9b\u3002</p> <p>\u53e6\u5916\uff0c\u5982\u679c\u9875\u9762\u5934\u90e8\u7528\u5230\u4e86<code>rel=\"canonical\"</code>\uff0c\u4e5f\u8981\u6539\u6210HTTPS\u7f51\u5740\u3002</p> <pre><code>&lt;link rel=\"canonical\" href=\"https://foo.com/bar.html\" /&gt;\n</code></pre>"},{"location":"http/https/#\u56db301\u91cd\u5b9a\u5411","title":"\u56db\u3001301\u91cd\u5b9a\u5411","text":"<p>\u4e0b\u4e00\u6b65\uff0c\u4fee\u6539 Web \u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528 301 \u91cd\u5b9a\u5411\uff0c\u5c06 HTTP \u534f\u8bae\u7684\u8bbf\u95ee\u5bfc\u5411 HTTPS \u534f\u8bae\u3002</p> <p>Nginx \u7684\u5199\u6cd5\u3002</p> <pre><code>server {\n  listen 80;\n  server_name domain.com www.domain.com;\n  return 301 https://domain.com$request_uri;\n}\n</code></pre> <p>Apache \u7684\u5199\u6cd5\uff08<code>.htaccess</code>\u6587\u4ef6\uff09\u3002</p> <pre><code>RewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n</code></pre>"},{"location":"http/https/#\u4e94\u5b89\u5168\u63aa\u65bd","title":"\u4e94\u3001\u5b89\u5168\u63aa\u65bd","text":"<p>\u4ee5\u4e0b\u63aa\u65bd\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u901a\u4fe1\u5b89\u5168\u3002</p>"},{"location":"http/https/#51-http-strict-transport-security-hsts","title":"5.1 HTTP Strict Transport Security (HSTS)","text":"<p>\u8bbf\u95ee\u7f51\u7ad9\u65f6\uff0c\u7528\u6237\u5f88\u5c11\u76f4\u63a5\u5728\u5730\u5740\u680f\u8f93\u5165<code>https://</code>\uff0c\u603b\u662f\u901a\u8fc7\u70b9\u51fb\u94fe\u63a5\uff0c\u6216\u80053xx\u91cd\u5b9a\u5411\uff0c\u4eceHTTP\u9875\u9762\u8fdb\u5165HTTPS\u9875\u9762\u3002\u653b\u51fb\u8005\u5b8c\u5168\u53ef\u4ee5\u5728\u7528\u6237\u53d1\u51faHTTP\u8bf7\u6c42\u65f6\uff0c\u52ab\u6301\u5e76\u7be1\u6539\u8be5\u8bf7\u6c42\u3002</p> <p>\u53e6\u4e00\u79cd\u60c5\u51b5\u662f\u6076\u610f\u7f51\u7ad9\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u5192\u5145\u53e6\u4e00\u4e2a\u7f51\u7ad9\uff0c\u8fd9\u65f6\u6d4f\u89c8\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u4f46\u662f\u8bb8\u591a\u7528\u6237\u4f1a\u5ffd\u7565\u8b66\u544a\u7ee7\u7eed\u8bbf\u95ee\u3002</p> <p>\u201cHTTP\u4e25\u683c\u4f20\u8f93\u5b89\u5168\u201d\uff08\u7b80\u79f0 HSTS\uff09\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u5f3a\u5236\u6d4f\u89c8\u5668\u53ea\u80fd\u53d1\u51faHTTPS\u8bf7\u6c42\uff0c\u5e76\u963b\u6b62\u7528\u6237\u63a5\u53d7\u4e0d\u5b89\u5168\u7684\u8bc1\u4e66\u3002</p> <p>\u5b83\u5728\u7f51\u7ad9\u7684\u54cd\u5e94\u5934\u91cc\u9762\uff0c\u52a0\u5165\u4e00\u4e2a\u5f3a\u5236\u6027\u58f0\u660e\u3002\u4ee5\u4e0b\u4f8b\u5b50\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\u3002</p> <pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains\n</code></pre> <p>\u4e0a\u9762\u8fd9\u6bb5\u5934\u4fe1\u606f\u6709\u4e24\u4e2a\u4f5c\u7528\u3002</p> <p>\uff081\uff09\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\uff08\u537331536000\u79d2\uff09\u4e2d\uff0c\u6d4f\u89c8\u5668\u53ea\u8981\u5411<code>example.com</code>\u6216\u5176\u5b50\u57df\u540d\u53d1\u9001HTTP\u8bf7\u6c42\u65f6\uff0c\u5fc5\u987b\u91c7\u7528HTTPS\u6765\u53d1\u8d77\u8fde\u63a5\u3002\u7528\u6237\u70b9\u51fb\u8d85\u94fe\u63a5\u6216\u5728\u5730\u5740\u680f\u8f93\u5165<code>http://www.example.com/</code>\uff0c\u6d4f\u89c8\u5668\u5e94\u5f53\u81ea\u52a8\u5c06<code>http</code>\u8f6c\u5199\u6210<code>https</code>\uff0c\u7136\u540e\u76f4\u63a5\u5411<code>https://www.example.com/</code>\u53d1\u9001\u8bf7\u6c42\u3002</p> <p>\uff082\uff09\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\u4e2d\uff0c\u5982\u679c<code>example.com</code>\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bc1\u4e66\u65e0\u6548\uff0c\u7528\u6237\u4e0d\u80fd\u5ffd\u7565\u6d4f\u89c8\u5668\u8b66\u544a\uff0c\u5c06\u65e0\u6cd5\u7ee7\u7eed\u8bbf\u95ee\u8be5\u7f51\u7ad9\u3002</p> <p>HSTS \u5f88\u5927\u7a0b\u5ea6\u4e0a\u89e3\u51b3\u4e86 SSL \u5265\u79bb\u653b\u51fb\u3002\u53ea\u8981\u6d4f\u89c8\u5668\u66fe\u7ecf\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fc7\u4e00\u6b21\u5b89\u5168\u8fde\u63a5\uff0c\u4e4b\u540e\u6d4f\u89c8\u5668\u4f1a\u5f3a\u5236\u4f7f\u7528<code>HTTPS</code>\uff0c\u5373\u4f7f\u94fe\u63a5\u88ab\u6362\u6210\u4e86<code>HTTP</code>\u3002</p> <p>\u8be5\u65b9\u6cd5\u7684\u4e3b\u8981\u4e0d\u8db3\u662f\uff0c\u7528\u6237\u9996\u6b21\u8bbf\u95ee\u7f51\u7ad9\u53d1\u51faHTTP\u8bf7\u6c42\u65f6\uff0c\u662f\u4e0d\u53d7HSTS\u4fdd\u62a4\u7684\u3002</p>"},{"location":"http/https/#52-cookie","title":"5.2 Cookie","text":"<p>\u53e6\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u786e\u4fdd\u6d4f\u89c8\u5668\u53ea\u5728\u4f7f\u7528 HTTPS \u65f6\uff0c\u624d\u53d1\u9001Cookie\u3002</p> <p>\u7f51\u7ad9\u54cd\u5e94\u5934\u91cc\u9762\uff0c<code>Set-Cookie</code>\u5b57\u6bb5\u52a0\u4e0a<code>Secure</code>\u6807\u5fd7\u5373\u53ef\u3002</p> <pre><code>Set-Cookie: LSID=DQAAAK\u2026Eaem_vYg; Secure\n</code></pre>"},{"location":"http/https/#\u516d\u53c2\u8003\u94fe\u63a5","title":"\u516d\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>How To Migrate To HTTPS, by Chris Palmer</li> <li>Complete Guide \u2013 How to Migrate from HTTP to HTTPS, by KeyCDN</li> <li>What You Need to Know About Changing From Http to Https, by Matt Mansfield</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"network/internet_protocol_suite_part_i/","title":"\u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e00\uff09</p> <p>\u6211\u4eec\u6bcf\u5929\u4f7f\u7528\u4e92\u8054\u7f51\uff0c\u4f60\u662f\u5426\u60f3\u8fc7\uff0c\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f</p> <p>\u5168\u4e16\u754c\u51e0\u5341\u4ebf\u53f0\u7535\u8111\uff0c\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4e24\u4e24\u901a\u4fe1\u3002\u4e0a\u6d77\u7684\u67d0\u4e00\u5757\u7f51\u5361\u9001\u51fa\u4fe1\u53f7\uff0c\u6d1b\u6749\u77f6\u7684\u53e6\u4e00\u5757\u7f51\u5361\u5c45\u7136\u5c31\u6536\u5230\u4e86\uff0c\u4e24\u8005\u5b9e\u9645\u4e0a\u6839\u672c\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u4f60\u4e0d\u89c9\u5f97\u8fd9\u662f\u5f88\u795e\u5947\u7684\u4e8b\u60c5\u5417\uff1f</p> <p>\u4e92\u8054\u7f51\u7684\u6838\u5fc3\u662f\u4e00\u7cfb\u5217\u534f\u8bae\uff0c\u603b\u79f0\u4e3a\"\u4e92\u8054\u7f51\u534f\u8bae\"\uff08Internet Protocol Suite\uff09\u3002\u5b83\u4eec\u5bf9\u7535\u8111\u5982\u4f55\u8fde\u63a5\u548c\u7ec4\u7f51\uff0c\u505a\u51fa\u4e86\u8be6\u5c3d\u7684\u89c4\u5b9a\u3002\u7406\u89e3\u4e86\u8fd9\u4e9b\u534f\u8bae\uff0c\u5c31\u7406\u89e3\u4e86\u4e92\u8054\u7f51\u7684\u539f\u7406\u3002</p> <p>\u4e0b\u9762\u5c31\u662f\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002\u56e0\u4e3a\u8fd9\u4e9b\u534f\u8bae\u5b9e\u5728\u592a\u590d\u6742\u3001\u592a\u5e9e\u5927\uff0c\u6211\u60f3\u6574\u7406\u4e00\u4e2a\u7b80\u6d01\u7684\u6846\u67b6\uff0c\u5e2e\u52a9\u81ea\u5df1\u4ece\u603b\u4f53\u4e0a\u628a\u63e1\u5b83\u4eec\u3002\u4e3a\u4e86\u4fdd\u8bc1\u7b80\u5355\u6613\u61c2\uff0c\u6211\u505a\u4e86\u5927\u91cf\u7684\u7b80\u5316\uff0c\u6709\u4e9b\u5730\u65b9\u5e76\u4e0d\u5168\u9762\u548c\u7cbe\u786e\uff0c\u4f46\u662f\u5e94\u8be5\u80fd\u591f\u8bf4\u6e05\u695a\u4e92\u8054\u7f51\u7684\u539f\u7406\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u4e00\u6982\u8ff0","title":"\u4e00\u3001\u6982\u8ff0","text":""},{"location":"network/internet_protocol_suite_part_i/#11-\u4e94\u5c42\u6a21\u578b","title":"1.1 \u4e94\u5c42\u6a21\u578b","text":"<p>\u4e92\u8054\u7f51\u7684\u5b9e\u73b0\uff0c\u5206\u6210\u597d\u51e0\u5c42\u3002\u6bcf\u4e00\u5c42\u90fd\u6709\u81ea\u5df1\u7684\u529f\u80fd\uff0c\u5c31\u50cf\u5efa\u7b51\u7269\u4e00\u6837\uff0c\u6bcf\u4e00\u5c42\u90fd\u9760\u4e0b\u4e00\u5c42\u652f\u6301\u3002</p> <p>\u7528\u6237\u63a5\u89e6\u5230\u7684\uff0c\u53ea\u662f\u6700\u4e0a\u9762\u7684\u4e00\u5c42\uff0c\u6839\u672c\u6ca1\u6709\u611f\u89c9\u5230\u4e0b\u9762\u7684\u5c42\u3002\u8981\u7406\u89e3\u4e92\u8054\u7f51\uff0c\u5fc5\u987b\u4ece\u6700\u4e0b\u5c42\u5f00\u59cb\uff0c\u81ea\u4e0b\u800c\u4e0a\u7406\u89e3\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\u3002</p> <p>\u5982\u4f55\u5206\u5c42\u6709\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u6709\u7684\u6a21\u578b\u5206\u4e03\u5c42\uff0c\u6709\u7684\u5206\u56db\u5c42\u3002\u6211\u89c9\u5f97\uff0c\u628a\u4e92\u8054\u7f51\u5206\u6210\u4e94\u5c42\uff0c\u6bd4\u8f83\u5bb9\u6613\u89e3\u91ca\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6700\u5e95\u4e0b\u7684\u4e00\u5c42\u53eb\u505a\"\u5b9e\u4f53\u5c42\"\uff08Physical Layer\uff09\uff0c\u6700\u4e0a\u9762\u7684\u4e00\u5c42\u53eb\u505a\"\u5e94\u7528\u5c42\"\uff08Application Layer\uff09\uff0c\u4e2d\u95f4\u7684\u4e09\u5c42\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\u5206\u522b\u662f\"\u94fe\u63a5\u5c42\"\uff08Link Layer\uff09\u3001\"\u7f51\u7edc\u5c42\"\uff08Network Layer\uff09\u548c\"\u4f20\u8f93\u5c42\"\uff08Transport Layer\uff09\u3002\u8d8a\u4e0b\u9762\u7684\u5c42\uff0c\u8d8a\u9760\u8fd1\u786c\u4ef6\uff1b\u8d8a\u4e0a\u9762\u7684\u5c42\uff0c\u8d8a\u9760\u8fd1\u7528\u6237\u3002</p> <p>\u5b83\u4eec\u53eb\u4ec0\u4e48\u540d\u5b57\uff0c\u5176\u5b9e\u5e76\u4e0d\u91cd\u8981\u3002\u53ea\u9700\u8981\u77e5\u9053\uff0c\u4e92\u8054\u7f51\u5206\u6210\u82e5\u5e72\u5c42\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#12-\u5c42\u4e0e\u534f\u8bae","title":"1.2 \u5c42\u4e0e\u534f\u8bae","text":"<p>\u6bcf\u4e00\u5c42\u90fd\u662f\u4e3a\u4e86\u5b8c\u6210\u4e00\u79cd\u529f\u80fd\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u5c31\u9700\u8981\u5927\u5bb6\u90fd\u9075\u5b88\u5171\u540c\u7684\u89c4\u5219\u3002</p> <p>\u5927\u5bb6\u90fd\u9075\u5b88\u7684\u89c4\u5219\uff0c\u5c31\u53eb\u505a\"\u534f\u8bae\"\uff08protocol\uff09\u3002</p> <p>\u4e92\u8054\u7f51\u7684\u6bcf\u4e00\u5c42\uff0c\u90fd\u5b9a\u4e49\u4e86\u5f88\u591a\u534f\u8bae\u3002\u8fd9\u4e9b\u534f\u8bae\u7684\u603b\u79f0\uff0c\u5c31\u53eb\u505a\"\u4e92\u8054\u7f51\u534f\u8bae\"\uff08Internet Protocol Suite\uff09\u3002\u5b83\u4eec\u662f\u4e92\u8054\u7f51\u7684\u6838\u5fc3\uff0c\u4e0b\u9762\u4ecb\u7ecd\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u5c31\u662f\u4ecb\u7ecd\u6bcf\u4e00\u5c42\u7684\u4e3b\u8981\u534f\u8bae\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u4e8c\u5b9e\u4f53\u5c42","title":"\u4e8c\u3001\u5b9e\u4f53\u5c42","text":"<p>\u6211\u4eec\u4ece\u6700\u5e95\u4e0b\u7684\u4e00\u5c42\u5f00\u59cb\u3002</p> <p>\u7535\u8111\u8981\u7ec4\u7f51\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u8981\u5e72\u4ec0\u4e48\uff1f\u5f53\u7136\u662f\u5148\u628a\u7535\u8111\u8fde\u8d77\u6765\uff0c\u53ef\u4ee5\u7528\u5149\u7f06\u3001\u7535\u7f06\u3001\u53cc\u7ede\u7ebf\u3001\u65e0\u7ebf\u7535\u6ce2\u7b49\u65b9\u5f0f\u3002</p> <p></p> <p>\u8fd9\u5c31\u53eb\u505a\"\u5b9e\u4f53\u5c42\"\uff0c\u5b83\u5c31\u662f\u628a\u7535\u8111\u8fde\u63a5\u8d77\u6765\u7684\u7269\u7406\u624b\u6bb5\u3002\u5b83\u4e3b\u8981\u89c4\u5b9a\u4e86\u7f51\u7edc\u7684\u4e00\u4e9b\u7535\u6c14\u7279\u6027\uff0c\u4f5c\u7528\u662f\u8d1f\u8d23\u4f20\u90010\u548c1\u7684\u7535\u4fe1\u53f7\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u4e09\u94fe\u63a5\u5c42","title":"\u4e09\u3001\u94fe\u63a5\u5c42","text":""},{"location":"network/internet_protocol_suite_part_i/#31-\u5b9a\u4e49","title":"3.1 \u5b9a\u4e49","text":"<p>\u5355\u7eaf\u7684<code>0</code>\u548c<code>1</code>\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u5fc5\u987b\u89c4\u5b9a\u89e3\u8bfb\u65b9\u5f0f\uff1a\u591a\u5c11\u4e2a\u7535\u4fe1\u53f7\u7b97\u4e00\u7ec4\uff1f\u6bcf\u4e2a\u4fe1\u53f7\u4f4d\u6709\u4f55\u610f\u4e49\uff1f</p> <p>\u8fd9\u5c31\u662f\"\u94fe\u63a5\u5c42\"\u7684\u529f\u80fd\uff0c\u5b83\u5728\"\u5b9e\u4f53\u5c42\"\u7684\u4e0a\u65b9\uff0c\u786e\u5b9a\u4e860\u548c1\u7684\u5206\u7ec4\u65b9\u5f0f\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#32-\u4ee5\u592a\u7f51\u534f\u8bae","title":"3.2 \u4ee5\u592a\u7f51\u534f\u8bae","text":"<p>\u65e9\u671f\u7684\u65f6\u5019\uff0c\u6bcf\u5bb6\u516c\u53f8\u90fd\u6709\u81ea\u5df1\u7684\u7535\u4fe1\u53f7\u5206\u7ec4\u65b9\u5f0f\u3002\u9010\u6e10\u5730\uff0c\u4e00\u79cd\u53eb\u505a\"\u4ee5\u592a\u7f51\"\uff08Ethernet\uff09\u7684\u534f\u8bae\uff0c\u5360\u636e\u4e86\u4e3b\u5bfc\u5730\u4f4d\u3002</p> <p>\u4ee5\u592a\u7f51\u89c4\u5b9a\uff0c\u4e00\u7ec4\u7535\u4fe1\u53f7\u6784\u6210\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u53eb\u505a\"\u5e27\"\uff08Frame\uff09\u3002\u6bcf\u4e00\u5e27\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\u6807\u5934\uff08Head\uff09\u548c\u6570\u636e\uff08Data\uff09\u3002</p> <p></p> <p>\"\u6807\u5934\"\u5305\u542b\u6570\u636e\u5305\u7684\u4e00\u4e9b\u8bf4\u660e\u9879\uff0c\u6bd4\u5982\u53d1\u9001\u8005\u3001\u63a5\u53d7\u8005\u3001\u6570\u636e\u7c7b\u578b\u7b49\u7b49\uff1b\"\u6570\u636e\"\u5219\u662f\u6570\u636e\u5305\u7684\u5177\u4f53\u5185\u5bb9\u3002</p> <p>\"\u6807\u5934\"\u7684\u957f\u5ea6\uff0c\u56fa\u5b9a\u4e3a18\u5b57\u8282\u3002\"\u6570\u636e\"\u7684\u957f\u5ea6\uff0c\u6700\u77ed\u4e3a46\u5b57\u8282\uff0c\u6700\u957f\u4e3a1500\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u6574\u4e2a\"\u5e27\"\u6700\u77ed\u4e3a64\u5b57\u8282\uff0c\u6700\u957f\u4e3a1518\u5b57\u8282\u3002\u5982\u679c\u6570\u636e\u5f88\u957f\uff0c\u5c31\u5fc5\u987b\u5206\u5272\u6210\u591a\u4e2a\u5e27\u8fdb\u884c\u53d1\u9001\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#33-mac\u5730\u5740","title":"3.3 MAC\u5730\u5740","text":"<p>\u4e0a\u9762\u63d0\u5230\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6807\u5934\"\uff0c\u5305\u542b\u4e86\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u7684\u4fe1\u606f\u3002\u90a3\u4e48\uff0c\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u662f\u5982\u4f55\u6807\u8bc6\u5462\uff1f</p> <p>\u4ee5\u592a\u7f51\u89c4\u5b9a\uff0c\u8fde\u5165\u7f51\u7edc\u7684\u6240\u6709\u8bbe\u5907\uff0c\u90fd\u5fc5\u987b\u5177\u6709\"\u7f51\u5361\"\u63a5\u53e3\u3002\u6570\u636e\u5305\u5fc5\u987b\u662f\u4ece\u4e00\u5757\u7f51\u5361\uff0c\u4f20\u9001\u5230\u53e6\u4e00\u5757\u7f51\u5361\u3002\u7f51\u5361\u7684\u5730\u5740\uff0c\u5c31\u662f\u6570\u636e\u5305\u7684\u53d1\u9001\u5730\u5740\u548c\u63a5\u6536\u5730\u5740\uff0c\u8fd9\u53eb\u505aMAC\u5730\u5740\u3002</p> <p></p> <p>\u6bcf\u5757\u7f51\u5361\u51fa\u5382\u7684\u65f6\u5019\uff0c\u90fd\u6709\u4e00\u4e2a\u5168\u4e16\u754c\u72ec\u4e00\u65e0\u4e8c\u7684MAC\u5730\u5740\uff0c\u957f\u5ea6\u662f48\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u901a\u5e38\u752812\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\u3002</p> <p></p> <p>\u524d6\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u662f\u5382\u5546\u7f16\u53f7\uff0c\u540e6\u4e2a\u662f\u8be5\u5382\u5546\u7684\u7f51\u5361\u6d41\u6c34\u53f7\u3002\u6709\u4e86MAC\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u7f51\u5361\u548c\u6570\u636e\u5305\u7684\u8def\u5f84\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#34-\u5e7f\u64ad","title":"3.4 \u5e7f\u64ad","text":"<p>\u5b9a\u4e49\u5730\u5740\u53ea\u662f\u7b2c\u4e00\u6b65\uff0c\u540e\u9762\u8fd8\u6709\u66f4\u591a\u7684\u6b65\u9aa4\u3002</p> <p>\u9996\u5148\uff0c\u4e00\u5757\u7f51\u5361\u600e\u4e48\u4f1a\u77e5\u9053\u53e6\u4e00\u5757\u7f51\u5361\u7684MAC\u5730\u5740\uff1f</p> <p>\u56de\u7b54\u662f\u6709\u4e00\u79cdARP\u534f\u8bae\uff0c\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u7559\u5230\u540e\u9762\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u77e5\u9053\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u5fc5\u987b\u77e5\u9053\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\uff0c\u7136\u540e\u624d\u80fd\u53d1\u9001\u3002</p> <p>\u5176\u6b21\uff0c\u5c31\u7b97\u6709\u4e86MAC\u5730\u5740\uff0c\u7cfb\u7edf\u600e\u6837\u624d\u80fd\u628a\u6570\u636e\u5305\u51c6\u786e\u9001\u5230\u63a5\u6536\u65b9\uff1f</p> <p>\u56de\u7b54\u662f\u4ee5\u592a\u7f51\u91c7\u7528\u4e86\u4e00\u79cd\u5f88\"\u539f\u59cb\"\u7684\u65b9\u5f0f\uff0c\u5b83\u4e0d\u662f\u628a\u6570\u636e\u5305\u51c6\u786e\u9001\u5230\u63a5\u6536\u65b9\uff0c\u800c\u662f\u5411\u672c\u7f51\u7edc\u5185\u6240\u6709\u8ba1\u7b97\u673a\u53d1\u9001\uff0c\u8ba9\u6bcf\u53f0\u8ba1\u7b97\u673a\u81ea\u5df1\u5224\u65ad\uff0c\u662f\u5426\u4e3a\u63a5\u6536\u65b9\u3002</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff0c1\u53f7\u8ba1\u7b97\u673a\u54112\u53f7\u8ba1\u7b97\u673a\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u76843\u53f7\u30014\u53f7\u30015\u53f7\u8ba1\u7b97\u673a\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u5305\u3002\u5b83\u4eec\u8bfb\u53d6\u8fd9\u4e2a\u5305\u7684\"\u6807\u5934\"\uff0c\u627e\u5230\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\uff0c\u7136\u540e\u4e0e\u81ea\u8eab\u7684MAC\u5730\u5740\u76f8\u6bd4\u8f83\uff0c\u5982\u679c\u4e24\u8005\u76f8\u540c\uff0c\u5c31\u63a5\u53d7\u8fd9\u4e2a\u5305\uff0c\u505a\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002\u8fd9\u79cd\u53d1\u9001\u65b9\u5f0f\u5c31\u53eb\u505a\"\u5e7f\u64ad\"\uff08broadcasting\uff09\u3002</p> <p>\u6709\u4e86\u6570\u636e\u5305\u7684\u5b9a\u4e49\u3001\u7f51\u5361\u7684MAC\u5730\u5740\u3001\u5e7f\u64ad\u7684\u53d1\u9001\u65b9\u5f0f\uff0c\"\u94fe\u63a5\u5c42\"\u5c31\u53ef\u4ee5\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u56db\u7f51\u7edc\u5c42","title":"\u56db\u3001\u7f51\u7edc\u5c42","text":""},{"location":"network/internet_protocol_suite_part_i/#41-\u7f51\u7edc\u5c42\u7684\u7531\u6765","title":"4.1 \u7f51\u7edc\u5c42\u7684\u7531\u6765","text":"<p>\u4ee5\u592a\u7f51\u534f\u8bae\uff0c\u4f9d\u9760MAC\u5730\u5740\u53d1\u9001\u6570\u636e\u3002\u7406\u8bba\u4e0a\uff0c\u5355\u5355\u4f9d\u9760MAC\u5730\u5740\uff0c\u4e0a\u6d77\u7684\u7f51\u5361\u5c31\u53ef\u4ee5\u627e\u5230\u6d1b\u6749\u77f6\u7684\u7f51\u5361\u4e86\uff0c\u6280\u672f\u4e0a\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u91cd\u5927\u7684\u7f3a\u70b9\u3002\u4ee5\u592a\u7f51\u91c7\u7528\u5e7f\u64ad\u65b9\u5f0f\u53d1\u9001\u6570\u636e\u5305\uff0c\u6240\u6709\u6210\u5458\u4eba\u624b\u4e00\"\u5305\"\uff0c\u4e0d\u4ec5\u6548\u7387\u4f4e\uff0c\u800c\u4e14\u5c40\u9650\u5728\u53d1\u9001\u8005\u6240\u5728\u7684\u5b50\u7f51\u7edc\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u53f0\u8ba1\u7b97\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5e7f\u64ad\u662f\u4f20\u4e0d\u8fc7\u53bb\u7684\u3002\u8fd9\u79cd\u8bbe\u8ba1\u662f\u5408\u7406\u7684\uff0c\u5426\u5219\u4e92\u8054\u7f51\u4e0a\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\u90fd\u4f1a\u6536\u5230\u6240\u6709\u5305\uff0c\u90a3\u4f1a\u5f15\u8d77\u707e\u96be\u3002</p> <p>\u4e92\u8054\u7f51\u662f\u65e0\u6570\u5b50\u7f51\u7edc\u5171\u540c\u7ec4\u6210\u7684\u4e00\u4e2a\u5de8\u578b\u7f51\u7edc\uff0c\u5f88\u50cf\u60f3\u8c61\u4e0a\u6d77\u548c\u6d1b\u6749\u77f6\u7684\u7535\u8111\u4f1a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5fc5\u987b\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u80fd\u591f\u533a\u5206\u54ea\u4e9bMAC\u5730\u5740\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u54ea\u4e9b\u4e0d\u662f\u3002\u5982\u679c\u662f\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5c31\u91c7\u7528\u5e7f\u64ad\u65b9\u5f0f\u53d1\u9001\uff0c\u5426\u5219\u5c31\u91c7\u7528\"\u8def\u7531\"\u65b9\u5f0f\u53d1\u9001\u3002\uff08\"\u8def\u7531\"\u7684\u610f\u601d\uff0c\u5c31\u662f\u6307\u5982\u4f55\u5411\u4e0d\u540c\u7684\u5b50\u7f51\u7edc\u5206\u53d1\u6570\u636e\u5305\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u4e3b\u9898\uff0c\u672c\u6587\u4e0d\u6d89\u53ca\u3002\uff09\u9057\u61be\u7684\u662f\uff0cMAC\u5730\u5740\u672c\u8eab\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5b83\u53ea\u4e0e\u5382\u5546\u6709\u5173\uff0c\u4e0e\u6240\u5904\u7f51\u7edc\u65e0\u5173\u3002</p> <p>\u8fd9\u5c31\u5bfc\u81f4\u4e86\"\u7f51\u7edc\u5c42\"\u7684\u8bde\u751f\u3002\u5b83\u7684\u4f5c\u7528\u662f\u5f15\u8fdb\u4e00\u5957\u65b0\u7684\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u533a\u5206\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002\u8fd9\u5957\u5730\u5740\u5c31\u53eb\u505a\"\u7f51\u7edc\u5730\u5740\"\uff0c\u7b80\u79f0\"\u7f51\u5740\"\u3002</p> <p>\u4e8e\u662f\uff0c\"\u7f51\u7edc\u5c42\"\u51fa\u73b0\u4ee5\u540e\uff0c\u6bcf\u53f0\u8ba1\u7b97\u673a\u6709\u4e86\u4e24\u79cd\u5730\u5740\uff0c\u4e00\u79cd\u662fMAC\u5730\u5740\uff0c\u53e6\u4e00\u79cd\u662f\u7f51\u7edc\u5730\u5740\u3002\u4e24\u79cd\u5730\u5740\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u8054\u7cfb\uff0cMAC\u5730\u5740\u662f\u7ed1\u5b9a\u5728\u7f51\u5361\u4e0a\u7684\uff0c\u7f51\u7edc\u5730\u5740\u5219\u662f\u7ba1\u7406\u5458\u5206\u914d\u7684\uff0c\u5b83\u4eec\u53ea\u662f\u968f\u673a\u7ec4\u5408\u5728\u4e00\u8d77\u3002</p> <p>\u7f51\u7edc\u5730\u5740\u5e2e\u52a9\u6211\u4eec\u786e\u5b9a\u8ba1\u7b97\u673a\u6240\u5728\u7684\u5b50\u7f51\u7edc\uff0cMAC\u5730\u5740\u5219\u5c06\u6570\u636e\u5305\u9001\u5230\u8be5\u5b50\u7f51\u7edc\u4e2d\u7684\u76ee\u6807\u7f51\u5361\u3002\u56e0\u6b64\uff0c\u4ece\u903b\u8f91\u4e0a\u53ef\u4ee5\u63a8\u65ad\uff0c\u5fc5\u5b9a\u662f\u5148\u5904\u7406\u7f51\u7edc\u5730\u5740\uff0c\u7136\u540e\u518d\u5904\u7406MAC\u5730\u5740\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#42-ip\u534f\u8bae","title":"4.2 IP\u534f\u8bae","text":"<p>\u89c4\u5b9a\u7f51\u7edc\u5730\u5740\u7684\u534f\u8bae\uff0c\u53eb\u505aIP\u534f\u8bae\u3002\u5b83\u6240\u5b9a\u4e49\u7684\u5730\u5740\uff0c\u5c31\u88ab\u79f0\u4e3aIP\u5730\u5740\u3002</p> <p>\u76ee\u524d\uff0c\u5e7f\u6cdb\u91c7\u7528\u7684\u662fIP\u534f\u8bae\u7b2c\u56db\u7248\uff0c\u7b80\u79f0IPv4\u3002\u8fd9\u4e2a\u7248\u672c\u89c4\u5b9a\uff0c\u7f51\u7edc\u5730\u5740\u753132\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7ec4\u6210\u3002</p> <p></p> <p>\u4e60\u60ef\u4e0a\uff0c\u6211\u4eec\u7528\u5206\u6210\u56db\u6bb5\u7684\u5341\u8fdb\u5236\u6570\u8868\u793aIP\u5730\u5740\uff0c\u4ece<code>0.0.0.0</code>\u4e00\u76f4\u5230<code>255.255.255.255</code>\u3002</p> <p>\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\uff0c\u90fd\u4f1a\u5206\u914d\u5230\u4e00\u4e2aIP\u5730\u5740\u3002\u8fd9\u4e2a\u5730\u5740\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u4ee3\u8868\u7f51\u7edc\uff0c\u540e\u4e00\u90e8\u5206\u4ee3\u8868\u4e3b\u673a\u3002\u6bd4\u5982\uff0cIP\u5730\u5740<code>172.16.254.1</code>\uff0c\u8fd9\u662f\u4e00\u4e2a<code>32</code>\u4f4d\u7684\u5730\u5740\uff0c\u5047\u5b9a\u5b83\u7684\u7f51\u7edc\u90e8\u5206\u662f\u524d<code>24</code>\u4f4d\uff08<code>172.16.254</code>\uff09\uff0c\u90a3\u4e48\u4e3b\u673a\u90e8\u5206\u5c31\u662f\u540e<code>8</code>\u4f4d\uff08\u6700\u540e\u7684\u90a3\u4e2a<code>1</code>\uff09\u3002\u5904\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u7684\u7535\u8111\uff0c\u5b83\u4eecIP\u5730\u5740\u7684\u7f51\u7edc\u90e8\u5206\u5fc5\u5b9a\u662f\u76f8\u540c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4<code>172.16.254.2</code>\u5e94\u8be5\u4e0e<code>172.16.254.1</code>\u5904\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u4f46\u662f\uff0c\u95ee\u9898\u5728\u4e8e\u5355\u5355\u4eceIP\u5730\u5740\uff0c\u6211\u4eec\u65e0\u6cd5\u5224\u65ad\u7f51\u7edc\u90e8\u5206\u3002\u8fd8\u662f\u4ee5<code>172.16.254.1</code>\u4e3a\u4f8b\uff0c\u5b83\u7684\u7f51\u7edc\u90e8\u5206\uff0c\u5230\u5e95\u662f\u524d24\u4f4d\uff0c\u8fd8\u662f\u524d<code>16</code>\u4f4d\uff0c\u751a\u81f3\u524d<code>28</code>\u4f4d\uff0c\u4eceIP\u5730\u5740\u4e0a\u662f\u770b\u4e0d\u51fa\u6765\u7684\u3002</p> <p>\u90a3\u4e48\uff0c\u600e\u6837\u624d\u80fd\u4eceIP\u5730\u5740\uff0c\u5224\u65ad\u4e24\u53f0\u8ba1\u7b97\u673a\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230\u53e6\u4e00\u4e2a\u53c2\u6570\"\u5b50\u7f51\u63a9\u7801\"\uff08subnet mask\uff09\u3002</p> <p>\u6240\u8c13\"\u5b50\u7f51\u63a9\u7801\"\uff0c\u5c31\u662f\u8868\u793a\u5b50\u7f51\u7edc\u7279\u5f81\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u5b83\u5728\u5f62\u5f0f\u4e0a\u7b49\u540c\u4e8eIP\u5730\u5740\uff0c\u4e5f\u662f\u4e00\u4e2a<code>32</code>\u4f4d\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u5b83\u7684\u7f51\u7edc\u90e8\u5206\u5168\u90e8\u4e3a<code>1</code>\uff0c\u4e3b\u673a\u90e8\u5206\u5168\u90e8\u4e3a<code>0</code>\u3002\u6bd4\u5982\uff0cIP\u5730\u5740<code>172.16.254.1</code>\uff0c\u5982\u679c\u5df2\u77e5\u7f51\u7edc\u90e8\u5206\u662f\u524d24\u4f4d\uff0c\u4e3b\u673a\u90e8\u5206\u662f\u540e<code>8</code>\u4f4d\uff0c\u90a3\u4e48\u5b50\u7f51\u7edc\u63a9\u7801\u5c31\u662f<code>11111111.11111111.11111111.00000000</code>\uff0c\u5199\u6210\u5341\u8fdb\u5236\u5c31\u662f<code>255.255.255.0</code>\u3002</p> <p>\u77e5\u9053\"\u5b50\u7f51\u63a9\u7801\"\uff0c\u6211\u4eec\u5c31\u80fd\u5224\u65ad\uff0c\u4efb\u610f\u4e24\u4e2aIP\u5730\u5740\u662f\u5426\u5904\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002\u65b9\u6cd5\u662f\u5c06\u4e24\u4e2aIP\u5730\u5740\u4e0e\u5b50\u7f51\u63a9\u7801\u5206\u522b\u8fdb\u884c<code>AND</code>\u8fd0\u7b97\uff08\u4e24\u4e2a\u6570\u4f4d\u90fd\u4e3a<code>1</code>\uff0c\u8fd0\u7b97\u7ed3\u679c\u4e3a<code>1</code>\uff0c\u5426\u5219\u4e3a<code>0</code>\uff09\uff0c\u7136\u540e\u6bd4\u8f83\u7ed3\u679c\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u8868\u660e\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u4e2d\uff0c\u5426\u5219\u5c31\u4e0d\u662f\u3002</p> <p>\u6bd4\u5982\uff0c\u5df2\u77e5IP\u5730\u5740<code>172.16.254.1</code>\u548c<code>172.16.254.233</code>\u7684\u5b50\u7f51\u63a9\u7801\u90fd\u662f<code>255.255.255.0</code>\uff0c\u8bf7\u95ee\u5b83\u4eec\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff1f\u4e24\u8005\u4e0e\u5b50\u7f51\u63a9\u7801\u5206\u522b\u8fdb\u884c<code>AND</code>\u8fd0\u7b97\uff0c\u7ed3\u679c\u90fd\u662f<code>172.16.254.0</code>\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b\uff0cIP\u534f\u8bae\u7684\u4f5c\u7528\u4e3b\u8981\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u4e3a\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\u5206\u914dIP\u5730\u5740\uff0c\u53e6\u4e00\u4e2a\u662f\u786e\u5b9a\u54ea\u4e9b\u5730\u5740\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#43-ip\u6570\u636e\u5305","title":"4.3 IP\u6570\u636e\u5305","text":"<p>\u6839\u636eIP\u534f\u8bae\u53d1\u9001\u7684\u6570\u636e\uff0c\u5c31\u53eb\u505aIP\u6570\u636e\u5305\u3002\u4e0d\u96be\u60f3\u8c61\uff0c\u5176\u4e2d\u5fc5\u5b9a\u5305\u62ecIP\u5730\u5740\u4fe1\u606f\u3002</p> <p>\u4f46\u662f\u524d\u9762\u8bf4\u8fc7\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u53ea\u5305\u542bMAC\u5730\u5740\uff0c\u5e76\u6ca1\u6709IP\u5730\u5740\u7684\u680f\u4f4d\u3002\u90a3\u4e48\u662f\u5426\u9700\u8981\u4fee\u6539\u6570\u636e\u5b9a\u4e49\uff0c\u518d\u6dfb\u52a0\u4e00\u4e2a\u680f\u4f4d\u5462\uff1f</p> <p>\u56de\u7b54\u662f\u4e0d\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u628aIP\u6570\u636e\u5305\u76f4\u63a5\u653e\u8fdb\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u56e0\u6b64\u5b8c\u5168\u4e0d\u7528\u4fee\u6539\u4ee5\u592a\u7f51\u7684\u89c4\u683c\u3002\u8fd9\u5c31\u662f\u4e92\u8054\u7f51\u5206\u5c42\u7ed3\u6784\u7684\u597d\u5904\uff1a\u4e0a\u5c42\u7684\u53d8\u52a8\u5b8c\u5168\u4e0d\u6d89\u53ca\u4e0b\u5c42\u7684\u7ed3\u6784\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0cIP\u6570\u636e\u5305\u4e5f\u5206\u4e3a\"\u6807\u5934\"\u548c\"\u6570\u636e\"\u4e24\u4e2a\u90e8\u5206\u3002</p> <p></p> <p>\"\u6807\u5934\"\u90e8\u5206\u4e3b\u8981\u5305\u62ec\u7248\u672c\u3001\u957f\u5ea6\u3001IP\u5730\u5740\u7b49\u4fe1\u606f\uff0c\"\u6570\u636e\"\u90e8\u5206\u5219\u662fIP\u6570\u636e\u5305\u7684\u5177\u4f53\u5185\u5bb9\u3002\u5b83\u653e\u8fdb\u4ee5\u592a\u7f51\u6570\u636e\u5305\u540e\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\u3002</p> <p></p> <p>IP\u6570\u636e\u5305\u7684\"\u6807\u5934\"\u90e8\u5206\u7684\u957f\u5ea6\u4e3a20\u523060\u5b57\u8282\uff0c\u6574\u4e2a\u6570\u636e\u5305\u7684\u603b\u957f\u5ea6\u6700\u5927\u4e3a<code>65,535</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u7406\u8bba\u4e0a\uff0c\u4e00\u4e2aIP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u6700\u957f\u4e3a<code>65,515</code>\u5b57\u8282\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u6700\u957f\u53ea\u6709<code>1500</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u5982\u679cIP\u6570\u636e\u5305\u8d85\u8fc7\u4e86<code>1500</code>\u5b57\u8282\uff0c\u5b83\u5c31\u9700\u8981\u5206\u5272\u6210\u51e0\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\uff0c\u5206\u5f00\u53d1\u9001\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#44-arp\u534f\u8bae","title":"4.4 ARP\u534f\u8bae","text":"<p>\u5173\u4e8e\"\u7f51\u7edc\u5c42\"\uff0c\u8fd8\u6709\u6700\u540e\u4e00\u70b9\u9700\u8981\u8bf4\u660e\u3002</p> <p>\u56e0\u4e3aIP\u6570\u636e\u5305\u662f\u653e\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u91cc\u53d1\u9001\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e24\u4e2a\u5730\u5740\uff0c\u4e00\u4e2a\u662f\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u65b9\u7684IP\u5730\u5740\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740\u662f\u5df2\u77e5\u7684\uff08\u540e\u6587\u4f1a\u89e3\u91ca\uff09\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u7684MAC\u5730\u5740\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\uff0c\u80fd\u591f\u4eceIP\u5730\u5740\u5f97\u5230MAC\u5730\u5740\u3002 \u8fd9\u91cc\u53c8\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u3002</p> \u7b2c\u4e00\u79cd\u60c5\u51b5 \u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u6ca1\u6709\u529e\u6cd5\u5f97\u5230\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u53ea\u80fd\u628a\u6570\u636e\u5305\u4f20\u9001\u5230\u4e24\u4e2a\u5b50\u7f51\u7edc\u8fde\u63a5\u5904\u7684\"\u7f51\u5173\"\uff08gateway\uff09\uff0c\u8ba9\u7f51\u5173\u53bb\u5904\u7406\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 \u5982\u679c\u4e24\u53f0\u4e3b\u673a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528ARP\u534f\u8bae\uff0c\u5f97\u5230\u5bf9\u65b9\u7684MAC\u5730\u5740\u3002ARP\u534f\u8bae\u4e5f\u662f\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\uff08\u5305\u542b\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u4e2d\uff09\uff0c\u5176\u4e2d\u5305\u542b\u5b83\u6240\u8981\u67e5\u8be2\u4e3b\u673a\u7684IP\u5730\u5740\uff0c\u5728\u5bf9\u65b9\u7684MAC\u5730\u5740\u8fd9\u4e00\u680f\uff0c\u586b\u7684\u662f<code>FF:FF:FF:FF:FF:FF</code>\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\"\u5e7f\u64ad\"\u5730\u5740\u3002\u5b83\u6240\u5728\u5b50\u7f51\u7edc\u7684\u6bcf\u4e00\u53f0\u4e3b\u673a\uff0c\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u6570\u636e\u5305\uff0c\u4ece\u4e2d\u53d6\u51faIP\u5730\u5740\uff0c\u4e0e\u81ea\u8eab\u7684IP\u5730\u5740\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e24\u8005\u76f8\u540c\uff0c\u90fd\u505a\u51fa\u56de\u590d\uff0c\u5411\u5bf9\u65b9\u62a5\u544a\u81ea\u5df1\u7684MAC\u5730\u5740\uff0c\u5426\u5219\u5c31\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002 <p>\u603b\u4e4b\uff0c\u6709\u4e86ARP\u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u5185\u7684\u4e3b\u673aMAC\u5730\u5740\uff0c\u53ef\u4ee5\u628a\u6570\u636e\u5305\u53d1\u9001\u5230\u4efb\u610f\u4e00\u53f0\u4e3b\u673a\u4e4b\u4e0a\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u4e94\u4f20\u8f93\u5c42","title":"\u4e94\u3001\u4f20\u8f93\u5c42","text":""},{"location":"network/internet_protocol_suite_part_i/#51-\u4f20\u8f93\u5c42\u7684\u7531\u6765","title":"5.1 \u4f20\u8f93\u5c42\u7684\u7531\u6765","text":"<p>\u6709\u4e86MAC\u5730\u5740\u548cIP\u5730\u5740\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u4efb\u610f\u4e24\u53f0\u4e3b\u673a\u4e0a\u5efa\u7acb\u901a\u4fe1\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\uff0c\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u6709\u8bb8\u591a\u7a0b\u5e8f\u90fd\u9700\u8981\u7528\u5230\u7f51\u7edc\uff0c\u6bd4\u5982\uff0c\u4f60\u4e00\u8fb9\u6d4f\u89c8\u7f51\u9875\uff0c\u4e00\u8fb9\u4e0e\u670b\u53cb\u5728\u7ebf\u804a\u5929\u3002\u5f53\u4e00\u4e2a\u6570\u636e\u5305\u4ece\u4e92\u8054\u7f51\u4e0a\u53d1\u6765\u7684\u65f6\u5019\uff0c\u4f60\u600e\u4e48\u77e5\u9053\uff0c\u5b83\u662f\u8868\u793a\u7f51\u9875\u7684\u5185\u5bb9\uff0c\u8fd8\u662f\u8868\u793a\u5728\u7ebf\u804a\u5929\u7684\u5185\u5bb9\uff1f</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u6570\u636e\u5305\u5230\u5e95\u4f9b\u54ea\u4e2a\u7a0b\u5e8f\uff08\u8fdb\u7a0b\uff09\u4f7f\u7528\u3002\u8fd9\u4e2a\u53c2\u6570\u5c31\u53eb\u505a\"\u7aef\u53e3\"\uff08port\uff09\uff0c\u5b83\u5176\u5b9e\u662f\u6bcf\u4e00\u4e2a\u4f7f\u7528\u7f51\u5361\u7684\u7a0b\u5e8f\u7684\u7f16\u53f7\u3002\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u53d1\u5230\u4e3b\u673a\u7684\u7279\u5b9a\u7aef\u53e3\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u7a0b\u5e8f\u5c31\u80fd\u53d6\u5230\u81ea\u5df1\u6240\u9700\u8981\u7684\u6570\u636e\u3002</p> <p>\"\u7aef\u53e3\"\u662f<code>0</code>\u5230<code>65535</code>\u4e4b\u95f4\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6b63\u597d16\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u3002<code>0</code>\u5230<code>1023</code>\u7684\u7aef\u53e3\u88ab\u7cfb\u7edf\u5360\u7528\uff0c\u7528\u6237\u53ea\u80fd\u9009\u7528\u5927\u4e8e<code>1023</code>\u7684\u7aef\u53e3\u3002\u4e0d\u7ba1\u662f\u6d4f\u89c8\u7f51\u9875\u8fd8\u662f\u5728\u7ebf\u804a\u5929\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u968f\u673a\u9009\u7528\u4e00\u4e2a\u7aef\u53e3\uff0c\u7136\u540e\u4e0e\u670d\u52a1\u5668\u7684\u76f8\u5e94\u7aef\u53e3\u8054\u7cfb\u3002</p> <p>\"\u4f20\u8f93\u5c42\"\u7684\u529f\u80fd\uff0c\u5c31\u662f\u5efa\u7acb\"\u7aef\u53e3\u5230\u7aef\u53e3\"\u7684\u901a\u4fe1\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\"\u7f51\u7edc\u5c42\"\u7684\u529f\u80fd\u662f\u5efa\u7acb\"\u4e3b\u673a\u5230\u4e3b\u673a\"\u7684\u901a\u4fe1\u3002\u53ea\u8981\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u6211\u4eec\u5c31\u80fd\u5b9e\u73b0\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4ea4\u6d41\u3002\u56e0\u6b64\uff0cUnix\u7cfb\u7edf\u5c31\u628a\u4e3b\u673a+\u7aef\u53e3\uff0c\u53eb\u505a\"\u5957\u63a5\u5b57\"\uff08socket\uff09\u3002\u6709\u4e86\u5b83\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e86\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#52-udp\u534f\u8bae","title":"5.2 UDP\u534f\u8bae","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u6570\u636e\u5305\u4e2d\u52a0\u5165\u7aef\u53e3\u4fe1\u606f\uff0c\u8fd9\u5c31\u9700\u8981\u65b0\u7684\u534f\u8bae\u3002\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u53eb\u505aUDP\u534f\u8bae\uff0c\u5b83\u7684\u683c\u5f0f\u51e0\u4e4e\u5c31\u662f\u5728\u6570\u636e\u524d\u9762\uff0c\u52a0\u4e0a\u7aef\u53e3\u53f7\u3002</p> <p>UDP\u6570\u636e\u5305\uff0c\u4e5f\u662f\u7531\"\u6807\u5934\"\u548c\"\u6570\u636e\"\u4e24\u90e8\u5206\u7ec4\u6210\u3002</p> <p></p> <p>\"\u6807\u5934\"\u90e8\u5206\u4e3b\u8981\u5b9a\u4e49\u4e86\u53d1\u51fa\u7aef\u53e3\u548c\u63a5\u6536\u7aef\u53e3\uff0c\"\u6570\u636e\"\u90e8\u5206\u5c31\u662f\u5177\u4f53\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u628a\u6574\u4e2aUDP\u6570\u636e\u5305\u653e\u5165IP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\uff0c\u800c\u524d\u9762\u8bf4\u8fc7\uff0cIP\u6570\u636e\u5305\u53c8\u662f\u653e\u5728\u4ee5\u592a\u7f51\u6570\u636e\u5305\u4e4b\u4e2d\u7684\uff0c\u6240\u4ee5\u6574\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\u73b0\u5728\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\uff1a</p> <p></p> <p>UDP\u6570\u636e\u5305\u975e\u5e38\u7b80\u5355\uff0c\"\u6807\u5934\"\u90e8\u5206\u4e00\u5171\u53ea\u67098\u4e2a\u5b57\u8282\uff0c\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>65,535</code>\u5b57\u8282\uff0c\u6b63\u597d\u653e\u8fdb\u4e00\u4e2aIP\u6570\u636e\u5305\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#53-tcp\u534f\u8bae","title":"5.3 TCP\u534f\u8bae","text":"<p>UDP\u534f\u8bae\u7684\u4f18\u70b9\u662f\u6bd4\u8f83\u7b80\u5355\uff0c\u5bb9\u6613\u5b9e\u73b0\uff0c\u4f46\u662f\u7f3a\u70b9\u662f\u53ef\u9760\u6027\u8f83\u5dee\uff0c\u4e00\u65e6\u6570\u636e\u5305\u53d1\u51fa\uff0c\u65e0\u6cd5\u77e5\u9053\u5bf9\u65b9\u662f\u5426\u6536\u5230\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u63d0\u9ad8\u7f51\u7edc\u53ef\u9760\u6027\uff0cTCP\u534f\u8bae\u5c31\u8bde\u751f\u4e86\u3002\u8fd9\u4e2a\u534f\u8bae\u975e\u5e38\u590d\u6742\uff0c\u4f46\u53ef\u4ee5\u8fd1\u4f3c\u8ba4\u4e3a\uff0c\u5b83\u5c31\u662f\u6709\u786e\u8ba4\u673a\u5236\u7684UDP\u534f\u8bae\uff0c\u6bcf\u53d1\u51fa\u4e00\u4e2a\u6570\u636e\u5305\u90fd\u8981\u6c42\u786e\u8ba4\u3002\u5982\u679c\u6709\u4e00\u4e2a\u6570\u636e\u5305\u9057\u5931\uff0c\u5c31\u6536\u4e0d\u5230\u786e\u8ba4\uff0c\u53d1\u51fa\u65b9\u5c31\u77e5\u9053\u6709\u5fc5\u8981\u91cd\u53d1\u8fd9\u4e2a\u6570\u636e\u5305\u4e86\u3002</p> <p>\u56e0\u6b64\uff0cTCP\u534f\u8bae\u80fd\u591f\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u9057\u5931\u3002\u5b83\u7684\u7f3a\u70b9\u662f\u8fc7\u7a0b\u590d\u6742\u3001\u5b9e\u73b0\u56f0\u96be\u3001\u6d88\u8017\u8f83\u591a\u7684\u8d44\u6e90\u3002</p> <p>TCP\u6570\u636e\u5305\u548cUDP\u6570\u636e\u5305\u4e00\u6837\uff0c\u90fd\u662f\u5185\u5d4c\u5728IP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\u3002TCP\u6570\u636e\u5305\u6ca1\u6709\u957f\u5ea6\u9650\u5236\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u957f\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7f51\u7edc\u7684\u6548\u7387\uff0c\u901a\u5e38TCP\u6570\u636e\u5305\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7IP\u6570\u636e\u5305\u7684\u957f\u5ea6\uff0c\u4ee5\u786e\u4fdd\u5355\u4e2aTCP\u6570\u636e\u5305\u4e0d\u5fc5\u518d\u5206\u5272\u3002</p>"},{"location":"network/internet_protocol_suite_part_i/#\u516d\u5e94\u7528\u5c42","title":"\u516d\u3001\u5e94\u7528\u5c42","text":"<p>\u5e94\u7528\u7a0b\u5e8f\u6536\u5230\"\u4f20\u8f93\u5c42\"\u7684\u6570\u636e\uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u8fdb\u884c\u89e3\u8bfb\u3002\u7531\u4e8e\u4e92\u8054\u7f51\u662f\u5f00\u653e\u67b6\u6784\uff0c\u6570\u636e\u6765\u6e90\u4e94\u82b1\u516b\u95e8\uff0c\u5fc5\u987b\u4e8b\u5148\u89c4\u5b9a\u597d\u683c\u5f0f\uff0c\u5426\u5219\u6839\u672c\u65e0\u6cd5\u89e3\u8bfb\u3002</p> <p>\"\u5e94\u7528\u5c42\"\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u89c4\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u683c\u5f0f\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0cTCP\u534f\u8bae\u53ef\u4ee5\u4e3a\u5404\u79cd\u5404\u6837\u7684\u7a0b\u5e8f\u4f20\u9012\u6570\u636e\uff0c\u6bd4\u5982<code>Email</code>\u3001<code>WWW</code>\u3001<code>FTP</code>\u7b49\u7b49\u3002\u90a3\u4e48\uff0c\u5fc5\u987b\u6709\u4e0d\u540c\u534f\u8bae\u89c4\u5b9a<code>\u7535\u5b50\u90ae\u4ef6</code>\u3001<code>\u7f51\u9875</code>\u3001<code>FTP\u6570\u636e</code>\u7684\u683c\u5f0f\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u534f\u8bae\u5c31\u6784\u6210\u4e86\"\u5e94\u7528\u5c42\"\u3002</p> <p>\u8fd9\u662f\u6700\u9ad8\u7684\u4e00\u5c42\uff0c\u76f4\u63a5\u9762\u5bf9\u7528\u6237\u3002\u5b83\u7684\u6570\u636e\u5c31\u653e\u5728TCP\u6570\u636e\u5305\u7684\"\u6570\u636e\"\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u7684\u4ee5\u592a\u7f51\u7684\u6570\u636e\u5305\u5c31\u53d8\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <p></p> <p>\u81f3\u6b64\uff0c\u6574\u4e2a\u4e92\u8054\u7f51\u7684\u4e94\u5c42\u7ed3\u6784\uff0c\u81ea\u4e0b\u800c\u4e0a\u5168\u90e8\u8bb2\u5b8c\u4e86\u3002\u8fd9\u662f\u4ece\u7cfb\u7edf\u7684\u89d2\u5ea6\uff0c\u89e3\u91ca\u4e92\u8054\u7f51\u662f\u5982\u4f55\u6784\u6210\u7684\u3002\u4e0b\u4e00\u7bc7\uff0c\u6211\u53cd\u8fc7\u6765\uff0c\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u81ea\u4e0a\u800c\u4e0b\u770b\u770b\u8fd9\u4e2a\u7ed3\u6784\u662f\u5982\u4f55\u53d1\u6325\u4f5c\u7528\uff0c\u5b8c\u6210\u4e00\u6b21\u7f51\u7edc\u6570\u636e\u4ea4\u6362\u7684\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"network/internet_protocol_suite_part_ii/","title":"\u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e8c\uff09","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - \u4e92\u8054\u7f51\u534f\u8bae\u5165\u95e8\uff08\u4e8c\uff09</p> <p>\u4e0a\u4e00\u7bc7\u6587\u7ae0\u5206\u6790\u4e86\u4e92\u8054\u7f51\u7684\u603b\u4f53\u6784\u601d\uff0c\u4ece\u4e0b\u81f3\u4e0a\uff0c\u6bcf\u4e00\u5c42\u534f\u8bae\u7684\u8bbe\u8ba1\u601d\u60f3\u3002</p> <p>\u8fd9\u662f\u4ece\u8bbe\u8ba1\u8005\u7684\u89d2\u5ea6\u770b\u95ee\u9898\uff0c\u4eca\u5929\u6211\u60f3\u5207\u6362\u5230\u7528\u6237\u7684\u89d2\u5ea6\uff0c\u770b\u770b\u7528\u6237\u662f\u5982\u4f55\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4e0e\u8fd9\u4e9b\u534f\u8bae\u4e92\u52a8\u7684\u3002</p> <p></p> <p>\uff08\u63a5\u4e0a\u6587\uff09</p>"},{"location":"network/internet_protocol_suite_part_ii/#\u4e03\u4e00\u4e2a\u5c0f\u7ed3","title":"\u4e03\u3001\u4e00\u4e2a\u5c0f\u7ed3","text":"<p>\u5148\u5bf9\u524d\u9762\u7684\u5185\u5bb9\uff0c\u505a\u4e00\u4e2a\u5c0f\u7ed3\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u7f51\u7edc\u901a\u4fe1\u5c31\u662f\u4ea4\u6362\u6570\u636e\u5305\u3002\u7535\u8111A\u5411\u7535\u8111B\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u540e\u8005\u6536\u5230\u4e86\uff0c\u56de\u590d\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u4ece\u800c\u5b9e\u73b0\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u6570\u636e\u5305\u7684\u7ed3\u6784\uff0c\u57fa\u672c\u4e0a\u662f\u4e0b\u9762\u8fd9\u6837\uff1a</p> <p></p> <p>\u53d1\u9001\u8fd9\u4e2a\u5305\uff0c\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u5730\u5740\uff1a</p> <pre><code>\u3000\u3000* \u5bf9\u65b9\u7684MAC\u5730\u5740\n\n\u3000\u3000* \u5bf9\u65b9\u7684IP\u5730\u5740\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e24\u4e2a\u5730\u5740\uff0c\u6570\u636e\u5305\u624d\u80fd\u51c6\u786e\u9001\u5230\u63a5\u6536\u8005\u624b\u4e2d\u3002\u4f46\u662f\uff0c\u524d\u9762\u8bf4\u8fc7\uff0cMAC\u5730\u5740\u6709\u5c40\u9650\u6027\uff0c\u5982\u679c\u4e24\u53f0\u7535\u8111\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5c31\u65e0\u6cd5\u77e5\u9053\u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u5fc5\u987b\u901a\u8fc7\u7f51\u5173\uff08gateway\uff09\u8f6c\u53d1\u3002</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff0c1\u53f7\u7535\u8111\u8981\u54114\u53f7\u7535\u8111\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\u3002\u5b83\u5148\u5224\u65ad4\u53f7\u7535\u8111\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u7ed3\u679c\u53d1\u73b0\u4e0d\u662f\uff08\u540e\u6587\u4ecb\u7ecd\u5224\u65ad\u65b9\u6cd5\uff09\uff0c\u4e8e\u662f\u5c31\u628a\u8fd9\u4e2a\u6570\u636e\u5305\u53d1\u5230\u7f51\u5173A\u3002\u7f51\u5173A\u901a\u8fc7\u8def\u7531\u534f\u8bae\uff0c\u53d1\u73b04\u53f7\u7535\u8111\u4f4d\u4e8e\u5b50\u7f51\u7edcB\uff0c\u53c8\u628a\u6570\u636e\u5305\u53d1\u7ed9\u7f51\u5173B\uff0c\u7f51\u5173B\u518d\u8f6c\u53d1\u52304\u53f7\u7535\u8111\u3002</p> <p>1\u53f7\u7535\u8111\u628a\u6570\u636e\u5305\u53d1\u5230\u7f51\u5173A\uff0c\u5fc5\u987b\u77e5\u9053\u7f51\u5173A\u7684MAC\u5730\u5740\u3002\u6240\u4ee5\uff0c\u6570\u636e\u5305\u7684\u76ee\u6807\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a</p> \u573a\u666f \u6570\u636e\u5305\u5730\u5740 \u540c\u4e00\u4e2a\u5b50\u7f51\u7edc \u5bf9\u65b9\u7684MAC\u5730\u5740\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740 \u975e\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc \u7f51\u5173\u7684MAC\u5730\u5740\uff0c\u5bf9\u65b9\u7684IP\u5730\u5740 <p>\u53d1\u9001\u6570\u636e\u5305\u4e4b\u524d\uff0c\u7535\u8111\u5fc5\u987b\u5224\u65ad\u5bf9\u65b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u7136\u540e\u9009\u62e9\u76f8\u5e94\u7684MAC\u5730\u5740\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u6765\u770b\uff0c\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u600e\u4e48\u5b8c\u6210\u7684\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#\u516b\u7528\u6237\u7684\u4e0a\u7f51\u8bbe\u7f6e","title":"\u516b\u3001\u7528\u6237\u7684\u4e0a\u7f51\u8bbe\u7f6e","text":""},{"location":"network/internet_protocol_suite_part_ii/#81-\u9759\u6001ip\u5730\u5740","title":"8.1 \u9759\u6001IP\u5730\u5740","text":"<p>\u4f60\u4e70\u4e86\u4e00\u53f0\u65b0\u7535\u8111\uff0c\u63d2\u4e0a\u7f51\u7ebf\uff0c\u5f00\u673a\uff0c\u8fd9\u65f6\u7535\u8111\u80fd\u591f\u4e0a\u7f51\u5417\uff1f</p> <p></p> <p>\u901a\u5e38\u4f60\u5fc5\u987b\u505a\u4e00\u4e9b\u8bbe\u7f6e\u3002\u6709\u65f6\uff0c\u7ba1\u7406\u5458\uff08\u6216\u8005ISP\uff09\u4f1a\u544a\u8bc9\u4f60\u4e0b\u9762\u56db\u4e2a\u53c2\u6570\uff0c\u4f60\u628a\u5b83\u4eec\u586b\u5165\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8ba1\u7b97\u673a\u5c31\u80fd\u8fde\u4e0a\u7f51\u4e86\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\n    * \u5b50\u7f51\u63a9\u7801\n    * \u7f51\u5173\u7684IP\u5730\u5740\n    * DNS\u7684IP\u5730\u5740\n</code></pre> <p>\u4e0b\u56fe\u662fWindows\u7cfb\u7edf\u7684\u8bbe\u7f6e\u7a97\u53e3\u3002</p> <p></p> <p>\u8fd9\u56db\u4e2a\u53c2\u6570\u7f3a\u4e00\u4e0d\u53ef\uff0c\u540e\u6587\u4f1a\u89e3\u91ca\u4e3a\u4ec0\u4e48\u9700\u8981\u77e5\u9053\u5b83\u4eec\u624d\u80fd\u4e0a\u7f51\u3002\u7531\u4e8e\u5b83\u4eec\u662f\u7ed9\u5b9a\u7684\uff0c\u8ba1\u7b97\u673a\u6bcf\u6b21\u5f00\u673a\uff0c\u90fd\u4f1a\u5206\u5230\u540c\u6837\u7684IP\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4f5c\"\u9759\u6001IP\u5730\u5740\u4e0a\u7f51\"\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u8bbe\u7f6e\u5f88\u4e13\u4e1a\uff0c\u666e\u901a\u7528\u6237\u671b\u800c\u751f\u754f\uff0c\u800c\u4e14\u5982\u679c\u4e00\u53f0\u7535\u8111\u7684IP\u5730\u5740\u4fdd\u6301\u4e0d\u53d8\uff0c\u5176\u4ed6\u7535\u8111\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u5730\u5740\uff0c\u4e0d\u591f\u7075\u6d3b\u3002\u51fa\u4e8e\u8fd9\u4e24\u4e2a\u539f\u56e0\uff0c\u5927\u591a\u6570\u7528\u6237\u4f7f\u7528\"\u52a8\u6001IP\u5730\u5740\u4e0a\u7f51\"\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#82-\u52a8\u6001ip\u5730\u5740","title":"8.2 \u52a8\u6001IP\u5730\u5740","text":"<p>\u6240\u8c13\"\u52a8\u6001IP\u5730\u5740\"\uff0c\u6307\u8ba1\u7b97\u673a\u5f00\u673a\u540e\uff0c\u4f1a\u81ea\u52a8\u5206\u914d\u5230\u4e00\u4e2aIP\u5730\u5740\uff0c\u4e0d\u7528\u4eba\u4e3a\u8bbe\u5b9a\u3002\u5b83\u4f7f\u7528\u7684\u534f\u8bae\u53eb\u505aDHCP\u534f\u8bae\u3002</p> <p>\u8fd9\u4e2a\u534f\u8bae\u89c4\u5b9a\uff0c\u6bcf\u4e00\u4e2a\u5b50\u7f51\u7edc\u4e2d\uff0c\u6709\u4e00\u53f0\u8ba1\u7b97\u673a\u8d1f\u8d23\u7ba1\u7406\u672c\u7f51\u7edc\u7684\u6240\u6709IP\u5730\u5740\uff0c\u5b83\u53eb\u505a\"DHCP\u670d\u52a1\u5668\"\u3002\u65b0\u7684\u8ba1\u7b97\u673a\u52a0\u5165\u7f51\u7edc\uff0c\u5fc5\u987b\u5411\"DHCP\u670d\u52a1\u5668\"\u53d1\u9001\u4e00\u4e2a\"DHCP\u8bf7\u6c42\"\u6570\u636e\u5305\uff0c\u7533\u8bf7IP\u5730\u5740\u548c\u76f8\u5173\u7684\u7f51\u7edc\u53c2\u6570\u3002</p> <p>\u524d\u9762\u8bf4\u8fc7\uff0c\u5982\u679c\u4e24\u53f0\u8ba1\u7b97\u673a\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u5fc5\u987b\u77e5\u9053\u5bf9\u65b9\u7684MAC\u5730\u5740\u548cIP\u5730\u5740\uff0c\u624d\u80fd\u53d1\u9001\u6570\u636e\u5305\u3002\u4f46\u662f\uff0c\u65b0\u52a0\u5165\u7684\u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u8fd9\u4e24\u4e2a\u5730\u5740\uff0c\u600e\u4e48\u53d1\u9001\u6570\u636e\u5305\u5462\uff1f</p> <p>DHCP\u534f\u8bae\u505a\u4e86\u4e00\u4e9b\u5de7\u5999\u7684\u89c4\u5b9a\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#83-dhcp\u534f\u8bae","title":"8.3 DHCP\u534f\u8bae","text":"<p>\u9996\u5148\uff0c\u5b83\u662f\u4e00\u79cd\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u5efa\u7acb\u5728UDP\u534f\u8bae\u4e4b\u4e0a\uff0c\u6240\u4ee5\u6574\u4e2a\u6570\u636e\u5305\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\uff081\uff09\u6700\u524d\u9762\u7684\"\u4ee5\u592a\u7f51\u6807\u5934\"\uff0c\u8bbe\u7f6e\u53d1\u51fa\u65b9\uff08\u672c\u673a\uff09\u7684MAC\u5730\u5740\u548c\u63a5\u6536\u65b9\uff08DHCP\u670d\u52a1\u5668\uff09\u7684MAC\u5730\u5740\u3002\u524d\u8005\u5c31\u662f\u672c\u673a\u7f51\u5361\u7684MAC\u5730\u5740\uff0c\u540e\u8005\u8fd9\u65f6\u4e0d\u77e5\u9053\uff0c\u5c31\u586b\u5165\u4e00\u4e2a\u5e7f\u64ad\u5730\u5740\uff1a<code>FF-FF-FF-FF-FF-FF</code>\u3002</p> <p>\uff082\uff09\u540e\u9762\u7684\"IP\u6807\u5934\"\uff0c\u8bbe\u7f6e\u53d1\u51fa\u65b9\u7684<code>IP\u5730\u5740</code>\u548c<code>\u63a5\u6536\u65b9\u7684IP\u5730\u5740</code>\u3002\u8fd9\u65f6\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u8005\uff0c\u672c\u673a\u90fd\u4e0d\u77e5\u9053\u3002\u4e8e\u662f\uff0c\u53d1\u51fa\u65b9\u7684IP\u5730\u5740\u5c31\u8bbe\u4e3a<code>0.0.0.0</code>\uff0c\u63a5\u6536\u65b9\u7684IP\u5730\u5740\u8bbe\u4e3a<code>255.255.255.255</code>\u3002</p> <p>\uff083\uff09\u6700\u540e\u7684\"UDP\u6807\u5934\"\uff0c\u8bbe\u7f6e<code>\u53d1\u51fa\u65b9\u7684\u7aef\u53e3</code>\u548c<code>\u63a5\u6536\u65b9\u7684\u7aef\u53e3</code>\u3002\u8fd9\u4e00\u90e8\u5206\u662fDHCP\u534f\u8bae\u89c4\u5b9a\u597d\u7684\uff0c\u53d1\u51fa\u65b9\u662f<code>68\u7aef\u53e3</code>\uff0c\u63a5\u6536\u65b9\u662f<code>67\u7aef\u53e3</code>\u3002</p> <p>\u8fd9\u4e2a\u6570\u636e\u5305\u6784\u9020\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u53d1\u51fa\u4e86\u3002\u4ee5\u592a\u7f51\u662f\u5e7f\u64ad\u53d1\u9001\uff0c\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u7684\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6536\u5230\u4e86\u8fd9\u4e2a\u5305\u3002\u56e0\u4e3a\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\u662f<code>FF-FF-FF-FF-FF-FF</code>\uff0c\u770b\u4e0d\u51fa\u662f\u53d1\u7ed9\u8c01\u7684\uff0c\u6240\u4ee5\u6bcf\u53f0\u6536\u5230\u8fd9\u4e2a\u5305\u7684\u8ba1\u7b97\u673a\uff0c\u8fd8\u5fc5\u987b\u5206\u6790\u8fd9\u4e2a\u5305\u7684IP\u5730\u5740\uff0c\u624d\u80fd\u786e\u5b9a\u662f\u4e0d\u662f\u53d1\u7ed9\u81ea\u5df1\u7684\u3002\u5f53\u770b\u5230\u53d1\u51fa\u65b9IP\u5730\u5740\u662f<code>0.0.0.0</code>\uff0c\u63a5\u6536\u65b9\u662f<code>255.255.255.255</code>\uff0c\u4e8e\u662fDHCP\u670d\u52a1\u5668\u77e5\u9053\"\u8fd9\u4e2a\u5305\u662f\u53d1\u7ed9\u6211\u7684\"\uff0c\u800c\u5176\u4ed6\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u4e22\u5f03\u8fd9\u4e2a\u5305\u3002</p> <p>\u63a5\u4e0b\u6765\uff0cDHCP\u670d\u52a1\u5668\u8bfb\u51fa\u8fd9\u4e2a\u5305\u7684\u6570\u636e\u5185\u5bb9\uff0c\u5206\u914d\u597dIP\u5730\u5740\uff0c\u53d1\u9001\u56de\u53bb\u4e00\u4e2a\"DHCP\u54cd\u5e94\"\u6570\u636e\u5305\u3002\u8fd9\u4e2a\u54cd\u5e94\u5305\u7684\u7ed3\u6784\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u4ee5\u592a\u7f51\u6807\u5934\u7684MAC\u5730\u5740\u662f\u53cc\u65b9\u7684\u7f51\u5361\u5730\u5740\uff0cIP\u6807\u5934\u7684IP\u5730\u5740\u662fDHCP\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff08\u53d1\u51fa\u65b9\uff09\u548c<code>255.255.255.255</code>\uff08\u63a5\u6536\u65b9\uff09\uff0cUDP\u6807\u5934\u7684\u7aef\u53e3\u662f<code>67</code>\uff08\u53d1\u51fa\u65b9\uff09\u548c<code>68</code>\uff08\u63a5\u6536\u65b9\uff09\uff0c\u5206\u914d\u7ed9\u8bf7\u6c42\u7aef\u7684IP\u5730\u5740\u548c\u672c\u7f51\u7edc\u7684\u5177\u4f53\u53c2\u6570\u5219\u5305\u542b\u5728Data\u90e8\u5206\u3002</p> <p>\u65b0\u52a0\u5165\u7684\u8ba1\u7b97\u673a\u6536\u5230\u8fd9\u4e2a\u54cd\u5e94\u5305\uff0c\u4e8e\u662f\u5c31\u77e5\u9053\u4e86\u81ea\u5df1\u7684IP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u3001\u7f51\u5173\u5730\u5740\u3001DNS\u670d\u52a1\u5668\u7b49\u7b49\u53c2\u6570\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#84-\u4e0a\u7f51\u8bbe\u7f6e\u5c0f\u7ed3","title":"8.4 \u4e0a\u7f51\u8bbe\u7f6e\uff1a\u5c0f\u7ed3","text":"<p>\u8fd9\u4e2a\u90e8\u5206\uff0c\u9700\u8981\u8bb0\u4f4f\u7684\u5c31\u662f\u4e00\u70b9\uff1a\u4e0d\u7ba1\u662f\"\u9759\u6001IP\u5730\u5740\"\u8fd8\u662f\"\u52a8\u6001IP\u5730\u5740\"\uff0c\u7535\u8111\u4e0a\u7f51\u7684\u9996\u8981\u6b65\u9aa4\uff0c\u662f\u786e\u5b9a\u56db\u4e2a\u53c2\u6570\u3002\u8fd9\u56db\u4e2a\u503c\u5f88\u91cd\u8981\uff0c\u503c\u5f97\u91cd\u590d\u4e00\u904d\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\n    * \u5b50\u7f51\u63a9\u7801\n    * \u7f51\u5173\u7684IP\u5730\u5740\n    * DNS\u7684IP\u5730\u5740\n</code></pre> <p>\u6709\u4e86\u8fd9\u51e0\u4e2a\u6570\u503c\uff0c\u7535\u8111\u5c31\u53ef\u4ee5\u4e0a\u7f51\"\u51b2\u6d6a\"\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u7f51\u9875\u7684\u65f6\u5019\uff0c\u4e92\u8054\u7f51\u534f\u8bae\u662f\u600e\u4e48\u8fd0\u4f5c\u7684\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#\u4e5d\u4e00\u4e2a\u5b9e\u4f8b\u8bbf\u95ee\u7f51\u9875","title":"\u4e5d\u3001\u4e00\u4e2a\u5b9e\u4f8b\uff1a\u8bbf\u95ee\u7f51\u9875","text":""},{"location":"network/internet_protocol_suite_part_ii/#91-\u672c\u673a\u53c2\u6570","title":"9.1 \u672c\u673a\u53c2\u6570","text":"<p>\u6211\u4eec\u5047\u5b9a\uff0c\u7ecf\u8fc7\u4e0a\u4e00\u8282\u7684\u6b65\u9aa4\uff0c\u7528\u6237\u8bbe\u7f6e\u597d\u4e86\u81ea\u5df1\u7684\u7f51\u7edc\u53c2\u6570\uff1a</p> <pre><code>    * \u672c\u673a\u7684IP\u5730\u5740\uff1a192.168.1.100\n    * \u5b50\u7f51\u63a9\u7801\uff1a255.255.255.0\n    * \u7f51\u5173\u7684IP\u5730\u5740\uff1a192.168.1.1\n    * DNS\u7684IP\u5730\u5740\uff1a8.8.8.8\n</code></pre> <p>\u7136\u540e\u4ed6\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u60f3\u8981\u8bbf\u95eeGoogle\uff0c\u5728\u5730\u5740\u680f\u8f93\u5165\u4e86\u7f51\u5740\uff1a<code>www.google.com</code>\u3002</p> <p></p> <p>\u8fd9\u610f\u5473\u7740\uff0c\u6d4f\u89c8\u5668\u8981\u5411Google\u53d1\u9001\u4e00\u4e2a\u7f51\u9875\u8bf7\u6c42\u7684\u6570\u636e\u5305\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#92-dns\u534f\u8bae","title":"9.2 DNS\u534f\u8bae","text":"<p>\u6211\u4eec\u77e5\u9053\uff0c\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u8981\u77e5\u9053\u5bf9\u65b9\u7684IP\u5730\u5740\u3002\u4f46\u662f\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u7f51\u5740<code>www.google.com</code>\uff0c\u4e0d\u77e5\u9053\u5b83\u7684IP\u5730\u5740\u3002</p> <p>DNS\u534f\u8bae\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\uff0c\u5c06\u8fd9\u4e2a\u7f51\u5740\u8f6c\u6362\u6210IP\u5730\u5740\u3002\u5df2\u77e5DNS\u670d\u52a1\u5668\u4e3a<code>8.8.8.8</code>\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u8fd9\u4e2a\u5730\u5740\u53d1\u9001\u4e00\u4e2aDNS\u6570\u636e\u5305\uff08<code>53</code>\u7aef\u53e3\uff09\u3002</p> <p></p> <p>\u7136\u540e\uff0cDNS\u670d\u52a1\u5668\u505a\u51fa\u54cd\u5e94\uff0c\u544a\u8bc9\u6211\u4eecGoogle\u7684IP\u5730\u5740\u662f<code>172.194.72.105</code>\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u5bf9\u65b9\u7684IP\u5730\u5740\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#93-\u5b50\u7f51\u63a9\u7801","title":"9.3 \u5b50\u7f51\u63a9\u7801","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5224\u65ad\uff0c\u8fd9\u4e2aIP\u5730\u5740\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\uff0c\u8fd9\u5c31\u8981\u7528\u5230\u5b50\u7f51\u63a9\u7801\u3002</p> <p>\u5df2\u77e5\u5b50\u7f51\u63a9\u7801\u662f<code>255.255.255.0</code>\uff0c\u672c\u673a\u7528\u5b83\u5bf9\u81ea\u5df1\u7684IP\u5730\u5740<code>192.168.1.100</code>\uff0c\u505a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684AND\u8fd0\u7b97\uff08\u4e24\u4e2a\u6570\u4f4d\u90fd\u4e3a<code>1</code>\uff0c\u7ed3\u679c\u4e3a<code>1</code>\uff0c\u5426\u5219\u4e3a<code>0</code>\uff09\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>192.168.1.0</code>\uff1b\u7136\u540e\u5bf9Google\u7684IP\u5730\u5740<code>172.194.72.105</code>\u4e5f\u505a\u4e00\u4e2aAND\u8fd0\u7b97\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a<code>172.194.72.0</code>\u3002\u8fd9\u4e24\u4e2a\u7ed3\u679c\u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u7ed3\u8bba\u662f\uff0cGoogle\u4e0e\u672c\u673a\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u7f51\u7edc\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u5411Google\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u901a\u8fc7\u7f51\u5173<code>192.168.1.1</code>\u8f6c\u53d1\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u63a5\u6536\u65b9\u7684MAC\u5730\u5740\u5c06\u662f\u7f51\u5173\u7684MAC\u5730\u5740\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#94-\u5e94\u7528\u5c42\u534f\u8bae","title":"9.4 \u5e94\u7528\u5c42\u534f\u8bae","text":"<p>\u6d4f\u89c8\u7f51\u9875\u7528\u7684\u662fHTTP\u534f\u8bae\uff0c\u5b83\u7684\u6574\u4e2a\u6570\u636e\u5305\u6784\u9020\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>HTTP\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>    GET / HTTP/1.1\n    Host: www.google.com\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) ......\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: zh-CN,zh;q=0.8\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.3\nCookie: ... ...\n</code></pre> <p>\u6211\u4eec\u5047\u5b9a\u8fd9\u4e2a\u90e8\u5206\u7684\u957f\u5ea6\u4e3a4960\u5b57\u8282\uff0c\u5b83\u4f1a\u88ab\u5d4c\u5728TCP\u6570\u636e\u5305\u4e4b\u4e2d\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#95-tcp\u534f\u8bae","title":"9.5 TCP\u534f\u8bae","text":"<p>TCP\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\uff0c\u63a5\u6536\u65b9\uff08Google\uff09\u7684HTTP\u7aef\u53e3\u9ed8\u8ba4\u662f<code>80</code>\uff0c\u53d1\u9001\u65b9\uff08\u672c\u673a\uff09\u7684\u7aef\u53e3\u662f\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684<code>1024-65535</code>\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5047\u5b9a\u4e3a<code>51775</code>\u3002</p> <p>TCP\u6570\u636e\u5305\u7684\u6807\u5934\u957f\u5ea6\u4e3a<code>20</code>\u5b57\u8282\uff0c\u52a0\u4e0a\u5d4c\u5165HTTP\u7684\u6570\u636e\u5305\uff0c\u603b\u957f\u5ea6\u53d8\u4e3a<code>4980</code>\u5b57\u8282\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#96-ip\u534f\u8bae","title":"9.6 IP\u534f\u8bae","text":"<p>\u7136\u540e\uff0cTCP\u6570\u636e\u5305\u518d\u5d4c\u5165IP\u6570\u636e\u5305\u3002IP\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u53cc\u65b9\u7684IP\u5730\u5740\uff0c\u8fd9\u662f\u5df2\u77e5\u7684\uff0c\u53d1\u9001\u65b9\u662f<code>192.168.1.100</code>\uff08\u672c\u673a\uff09\uff0c\u63a5\u6536\u65b9\u662f<code>172.194.72.105</code>\uff08Google\uff09\u3002</p> <p>IP\u6570\u636e\u5305\u7684\u6807\u5934\u957f\u5ea6\u4e3a<code>20</code>\u5b57\u8282\uff0c\u52a0\u4e0a\u5d4c\u5165\u7684TCP\u6570\u636e\u5305\uff0c\u603b\u957f\u5ea6\u53d8\u4e3a5000\u5b57\u8282\u3002</p>"},{"location":"network/internet_protocol_suite_part_ii/#97-\u4ee5\u592a\u7f51\u534f\u8bae","title":"9.7 \u4ee5\u592a\u7f51\u534f\u8bae","text":"<p>\u6700\u540e\uff0cIP\u6570\u636e\u5305\u5d4c\u5165\u4ee5\u592a\u7f51\u6570\u636e\u5305\u3002\u4ee5\u592a\u7f51\u6570\u636e\u5305\u9700\u8981\u8bbe\u7f6e\u53cc\u65b9\u7684MAC\u5730\u5740\uff0c\u53d1\u9001\u65b9\u4e3a\u672c\u673a\u7684\u7f51\u5361MAC\u5730\u5740\uff0c\u63a5\u6536\u65b9\u4e3a\u7f51\u5173<code>192.168.1.1</code>\u7684MAC\u5730\u5740\uff08\u901a\u8fc7ARP\u534f\u8bae\u5f97\u5230\uff09\u3002</p> <p>\u4ee5\u592a\u7f51\u6570\u636e\u5305\u7684\u6570\u636e\u90e8\u5206\uff0c\u6700\u5927\u957f\u5ea6\u4e3a<code>1500</code>\u5b57\u8282\uff0c\u800c\u73b0\u5728\u7684IP\u6570\u636e\u5305\u957f\u5ea6\u4e3a<code>5000</code>\u5b57\u8282\u3002\u56e0\u6b64\uff0cIP\u6570\u636e\u5305\u5fc5\u987b\u5206\u5272\u6210\u56db\u4e2a\u5305\u3002\u56e0\u4e3a\u6bcf\u4e2a\u5305\u90fd\u6709\u81ea\u5df1\u7684IP\u6807\u5934\uff0820\u5b57\u8282\uff09\uff0c\u6240\u4ee5\u56db\u4e2a\u5305\u7684IP\u6570\u636e\u5305\u7684\u957f\u5ea6\u5206\u522b\u4e3a<code>1500</code>\u3001<code>1500</code>\u3001<code>1500</code>\u3001<code>560</code>\u3002</p> <p></p>"},{"location":"network/internet_protocol_suite_part_ii/#98-\u670d\u52a1\u5668\u7aef\u54cd\u5e94","title":"9.8 \u670d\u52a1\u5668\u7aef\u54cd\u5e94","text":"<p>\u7ecf\u8fc7\u591a\u4e2a\u7f51\u5173\u7684\u8f6c\u53d1\uff0cGoogle\u7684\u670d\u52a1\u5668<code>172.194.72.105</code>\uff0c\u6536\u5230\u4e86\u8fd9\u56db\u4e2a\u4ee5\u592a\u7f51\u6570\u636e\u5305\u3002</p> <p>\u6839\u636eIP\u6807\u5934\u7684\u5e8f\u53f7\uff0cGoogle\u5c06\u56db\u4e2a\u5305\u62fc\u8d77\u6765\uff0c\u53d6\u51fa\u5b8c\u6574\u7684TCP\u6570\u636e\u5305\uff0c\u7136\u540e\u8bfb\u51fa\u91cc\u9762\u7684\"HTTP\u8bf7\u6c42\"\uff0c\u63a5\u7740\u505a\u51fa\"HTTP\u54cd\u5e94\"\uff0c\u518d\u7528TCP\u534f\u8bae\u53d1\u56de\u6765\u3002</p> <p>\u672c\u673a\u6536\u5230HTTP\u54cd\u5e94\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u7f51\u9875\u663e\u793a\u51fa\u6765\uff0c\u5b8c\u6210\u4e00\u6b21\u7f51\u7edc\u901a\u4fe1\u3002</p> <p></p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u5230\u6b64\u4e3a\u6b62\uff0c\u867d\u7136\u7ecf\u8fc7\u4e86\u7b80\u5316\uff0c\u4f46\u5b83\u5927\u81f4\u4e0a\u53cd\u6620\u4e86\u4e92\u8054\u7f51\u534f\u8bae\u7684\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"rest-ful/restapi/","title":"Restful API \u8bbe\u8ba1\u6307\u5357","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u8bbe\u8ba1\u6307\u5357</p> <p>\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u5206\u4e3a\u524d\u7aef\u548c\u540e\u7aef\u4e24\u4e2a\u90e8\u5206\u3002\u5f53\u524d\u7684\u53d1\u5c55\u8d8b\u52bf\uff0c\u5c31\u662f\u524d\u7aef\u8bbe\u5907\u5c42\u51fa\u4e0d\u7a77\uff08\u624b\u673a\u3001\u5e73\u677f\u3001\u684c\u9762\u7535\u8111\u3001\u5176\u4ed6\u4e13\u7528\u8bbe\u5907\u2026\u2026\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u7edf\u4e00\u7684\u673a\u5236\uff0c\u65b9\u4fbf\u4e0d\u540c\u7684\u524d\u7aef\u8bbe\u5907\u4e0e\u540e\u7aef\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u5bfc\u81f4API\u6784\u67b6\u7684\u6d41\u884c\uff0c\u751a\u81f3\u51fa\u73b0\u201cAPI First\u201d\u7684\u8bbe\u8ba1\u601d\u60f3\u3002</p> <p>RESTful API\u662f\u76ee\u524d\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u5957\u4e92\u8054\u7f51\u5e94\u7528\u7a0b\u5e8f\u7684API\u8bbe\u8ba1\u7406\u8bba\u3002\u6211\u4ee5\u524d\u5199\u8fc7\u4e00\u7bc7\u300a\u7406\u89e3RESTful\u67b6\u6784\u300b\uff0c\u63a2\u8ba8\u5982\u4f55\u7406\u89e3\u8fd9\u4e2a\u6982\u5ff5\u3002\u4eca\u5929\uff0c\u6211\u5c06\u4ecb\u7ecdRESTful API\u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u63a2\u8ba8\u5982\u4f55\u8bbe\u8ba1\u4e00\u5957\u5408\u7406\u3001\u597d\u7528\u7684API\u3002\u6211\u7684\u4e3b\u8981\u53c2\u8003\u8d44\u6599\u662f\u8fd9\u7bc7\u300aPrinciples of good RESTful API Design\u300b\u3002</p> <p></p>"},{"location":"rest-ful/restapi/#\u4e00\u534f\u8bae","title":"\u4e00\u3001\u534f\u8bae","text":"<p>\u603b\u662f\u4f7f\u7528HTTPs\u534f\u8bae\u3002</p>"},{"location":"rest-ful/restapi/#\u4e8c\u57df\u540d","title":"\u4e8c\u3001\u57df\u540d","text":"<p>\u5e94\u8be5\u5c3d\u91cf\u5c06API\u90e8\u7f72\u5728\u4e13\u7528\u57df\u540d\u4e4b\u4e0b\u3002</p> <pre><code>https://api.example.com\n</code></pre> <p>\u5982\u679c\u786e\u5b9aAPI\u5f88\u7b80\u5355\uff0c\u4e0d\u4f1a\u6709\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u53ef\u4ee5\u8003\u8651\u653e\u5728\u4e3b\u57df\u540d\u4e0b\u3002</p> <pre><code>https://example.org/api/\n</code></pre>"},{"location":"rest-ful/restapi/#\u4e09\u7248\u672cversioning","title":"\u4e09\u3001\u7248\u672c\uff08Versioning\uff09","text":"<p>\u5e94\u8be5\u5c06API\u7684\u7248\u672c\u53f7\u653e\u5165URL\u3002</p> <pre><code>https://api.example.com/v1/\n</code></pre> <p>\u53e6\u4e00\u79cd\u505a\u6cd5\u662f\uff0c\u5c06\u7248\u672c\u53f7\u653e\u5728HTTP\u5934\u4fe1\u606f\u4e2d\uff0c\u4f46\u4e0d\u5982\u653e\u5165URL\u65b9\u4fbf\u548c\u76f4\u89c2\u3002</p>"},{"location":"rest-ful/restapi/#\u56db\u8def\u5f84endpoint","title":"\u56db\u3001\u8def\u5f84\uff08Endpoint\uff09","text":"<p>\u8def\u5f84\u53c8\u79f0\u201c\u7ec8\u70b9\u201d\uff08endpoint\uff09\uff0c\u8868\u793aAPI\u7684\u5177\u4f53\u7f51\u5740\u3002</p> <p>\u5728RESTful\u67b6\u6784\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u5740\u4ee3\u8868\u4e00\u79cd\u8d44\u6e90\uff08resource\uff09\uff0c\u6240\u4ee5\u7f51\u5740\u4e2d\u4e0d\u80fd\u6709\u52a8\u8bcd\uff0c\u53ea\u80fd\u6709\u540d\u8bcd\uff0c\u800c\u4e14\u6240\u7528\u7684\u540d\u8bcd\u5f80\u5f80\u4e0e\u6570\u636e\u5e93\u7684\u8868\u683c\u540d\u5bf9\u5e94\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u8868\u90fd\u662f\u540c\u79cd\u8bb0\u5f55\u7684\u201c\u96c6\u5408\u201d\uff08collection\uff09\uff0c\u6240\u4ee5API\u4e2d\u7684\u540d\u8bcd\u4e5f\u5e94\u8be5\u4f7f\u7528\u590d\u6570\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4e00\u4e2aAPI\u63d0\u4f9b\u52a8\u7269\u56ed\uff08zoo\uff09\u7684\u4fe1\u606f\uff0c\u8fd8\u5305\u62ec\u5404\u79cd\u52a8\u7269\u548c\u96c7\u5458\u7684\u4fe1\u606f\uff0c\u5219\u5b83\u7684\u8def\u5f84\u5e94\u8be5\u8bbe\u8ba1\u6210\u4e0b\u9762\u8fd9\u6837\u3002</p> <ul> <li>https://api.example.com/v1/zoos</li> <li>https://api.example.com/v1/animals</li> <li>https://api.example.com/v1/employees</li> </ul>"},{"location":"rest-ful/restapi/#\u4e94http\u52a8\u8bcd","title":"\u4e94\u3001HTTP\u52a8\u8bcd","text":"<p>\u5bf9\u4e8e\u8d44\u6e90\u7684\u5177\u4f53\u64cd\u4f5c\u7c7b\u578b\uff0c\u7531HTTP\u52a8\u8bcd\u8868\u793a\u3002</p> <p>\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u6709\u4e0b\u9762\u4e94\u4e2a\uff08\u62ec\u53f7\u91cc\u662f\u5bf9\u5e94\u7684SQL\u547d\u4ee4\uff09\u3002</p> <ul> <li>GET\uff08SELECT\uff09\uff1a\u4ece\u670d\u52a1\u5668\u53d6\u51fa\u8d44\u6e90\uff08\u4e00\u9879\u6216\u591a\u9879\uff09\u3002</li> <li>POST\uff08CREATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90\u3002</li> <li>PUT\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u540e\u7684\u5b8c\u6574\u8d44\u6e90\uff09\u3002</li> <li>PATCH\uff08UPDATE\uff09\uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u7684\u5c5e\u6027\uff09\u3002</li> <li>DELETE\uff08DELETE\uff09\uff1a\u4ece\u670d\u52a1\u5668\u5220\u9664\u8d44\u6e90\u3002</li> </ul> <p>\u8fd8\u6709\u4e24\u4e2a\u4e0d\u5e38\u7528\u7684HTTP\u52a8\u8bcd\u3002</p> <ul> <li>HEAD\uff1a\u83b7\u53d6\u8d44\u6e90\u7684\u5143\u6570\u636e\u3002</li> <li>OPTIONS\uff1a\u83b7\u53d6\u4fe1\u606f\uff0c\u5173\u4e8e\u8d44\u6e90\u7684\u54ea\u4e9b\u5c5e\u6027\u662f\u5ba2\u6237\u7aef\u53ef\u4ee5\u6539\u53d8\u7684\u3002</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002</p> <ul> <li>GET /zoos\uff1a\u5217\u51fa\u6240\u6709\u52a8\u7269\u56ed</li> <li>POST /zoos\uff1a\u65b0\u5efa\u4e00\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID\uff1a\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f</li> <li>PUT /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u5168\u90e8\u4fe1\u606f\uff09</li> <li>PATCH /zoos/ID\uff1a\u66f4\u65b0\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u4fe1\u606f\uff08\u63d0\u4f9b\u8be5\u52a8\u7269\u56ed\u7684\u90e8\u5206\u4fe1\u606f\uff09</li> <li>DELETE /zoos/ID\uff1a\u5220\u9664\u67d0\u4e2a\u52a8\u7269\u56ed</li> <li>GET /zoos/ID/animals\uff1a\u5217\u51fa\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6240\u6709\u52a8\u7269</li> <li>DELETE /zoos/ID/animals/ID\uff1a\u5220\u9664\u67d0\u4e2a\u6307\u5b9a\u52a8\u7269\u56ed\u7684\u6307\u5b9a\u52a8\u7269</li> </ul>"},{"location":"rest-ful/restapi/#\u516d\u8fc7\u6ee4\u4fe1\u606ffiltering","title":"\u516d\u3001\u8fc7\u6ee4\u4fe1\u606f\uff08Filtering\uff09","text":"<p>\u5982\u679c\u8bb0\u5f55\u6570\u91cf\u5f88\u591a\uff0c\u670d\u52a1\u5668\u4e0d\u53ef\u80fd\u90fd\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u7528\u6237\u3002API\u5e94\u8be5\u63d0\u4f9b\u53c2\u6570\uff0c\u8fc7\u6ee4\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u53c2\u6570\u3002</p> <ul> <li>?limit=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u6570\u91cf</li> <li>?offset=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002</li> <li>?sortby=name&amp;order=asc\uff1a\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u6309\u7167\u54ea\u4e2a\u5c5e\u6027\u6392\u5e8f\uff0c\u4ee5\u53ca\u6392\u5e8f\u987a\u5e8f\u3002</li> <li>?animal_type_id=1\uff1a\u6307\u5b9a\u7b5b\u9009\u6761\u4ef6</li> </ul> <p>\u53c2\u6570\u7684\u8bbe\u8ba1\u5141\u8bb8\u5b58\u5728\u5197\u4f59\uff0c\u5373\u5141\u8bb8API\u8def\u5f84\u548cURL\u53c2\u6570\u5076\u5c14\u6709\u91cd\u590d\u3002\u6bd4\u5982\uff0cGET /zoo/ID/animals \u4e0e GET /animals?zoo_id=ID \u7684\u542b\u4e49\u662f\u76f8\u540c\u7684\u3002</p>"},{"location":"rest-ful/restapi/#\u4e03\u72b6\u6001\u7801status-codes","title":"\u4e03\u3001\u72b6\u6001\u7801\uff08Status Codes\uff09","text":"<p>\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u72b6\u6001\u7801\u548c\u63d0\u793a\u4fe1\u606f\uff0c\u5e38\u89c1\u7684\u6709\u4ee5\u4e0b\u4e00\u4e9b\uff08\u65b9\u62ec\u53f7\u4e2d\u662f\u8be5\u72b6\u6001\u7801\u5bf9\u5e94\u7684HTTP\u52a8\u8bcd\uff09\u3002</p> <ul> <li>200 OK \u2013 [GET]\uff1a\u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\uff08Idempotent\uff09\u3002</li> <li>201 CREATED \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u6210\u529f\u3002</li> <li>204 NO CONTENT \u2013 [DELETE]\uff1a\u7528\u6237\u5220\u9664\u6570\u636e\u6210\u529f\u3002</li> <li>400 INVALID REQUEST \u2013 [POST/PUT/PATCH]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002\u3002</li> <li>404 NOT FOUND \u2013 [*]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u9488\u5bf9\u7684\u662f\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002</li> <li>500 INTERNAL SERVER ERROR \u2013 [*]\uff1a\u670d\u52a1\u5668\u53d1\u751f\u9519\u8bef\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u5224\u65ad\u53d1\u51fa\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002</li> </ul> <p>\u72b6\u6001\u7801\u7684\u5b8c\u5168\u5217\u8868\u53c2\u89c1\u8fd9\u91cc\u3002</p>"},{"location":"rest-ful/restapi/#\u516b\u8fd4\u56de\u7ed3\u679c","title":"\u516b\u3001\u8fd4\u56de\u7ed3\u679c","text":"<p>\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u7b26\u5408\u4ee5\u4e0b\u89c4\u8303\u3002</p> <ul> <li>GET /collection\uff1a\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\u7684\u5217\u8868\uff08\u6570\u7ec4\uff09</li> <li>GET /collection/resource\uff1a\u8fd4\u56de\u5355\u4e2a\u8d44\u6e90\u5bf9\u8c61</li> <li>POST /collection\uff1a\u8fd4\u56de\u65b0\u751f\u6210\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PUT /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>PATCH /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61</li> <li>DELETE /collection/resource\uff1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6587\u6863</li> </ul>"},{"location":"rest-ful/restapi/#\u4e5d\u5176\u4ed6","title":"\u4e5d\u3001\u5176\u4ed6","text":"<p>\uff083\uff09API\u5e94\u8be5\u662fHypermedia\u7684\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002</p> <p>\u6bd4\u5982\uff0c\u5f53\u7528\u6237\u5411api.example.com\u7684\u6839\u76ee\u5f55\u53d1\u51fa\u8bf7\u6c42\uff0c\u4f1a\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u6587\u6863\u3002</p> <pre><code>{\"link\": {\n\"rel\":   \"collection https://www.example.com/zoos\",\n\"href\":  \"https://api.example.com/zoos\",\n\"title\": \"List of zoos\",\n\"type\":  \"application/vnd.yourformat+json\"\n}}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u6587\u6863\u4e2d\u6709\u4e00\u4e2alink\u5c5e\u6027\uff0c\u7528\u6237\u8bfb\u53d6\u8fd9\u4e2a\u5c5e\u6027\u5c31\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u8c03\u7528\u4ec0\u4e48API\u4e86\u3002rel\u8868\u793a\u8fd9\u4e2aAPI\u4e0e\u5f53\u524d\u7f51\u5740\u7684\u5173\u7cfb\uff08collection\u5173\u7cfb\uff0c\u5e76\u7ed9\u51fa\u8be5collection\u7684\u7f51\u5740\uff09\uff0chref\u8868\u793aAPI\u7684\u8def\u5f84\uff0ctitle\u8868\u793aAPI\u7684\u6807\u9898\uff0ctype\u8868\u793a\u8fd4\u56de\u7c7b\u578b\u3002</p> <p>Hypermedia API\u7684\u8bbe\u8ba1\u88ab\u79f0\u4e3aHATEOAS\u3002Github\u7684API\u5c31\u662f\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8bbf\u95eeapi.github.com\u4f1a\u5f97\u5230\u4e00\u4e2a\u6240\u6709\u53ef\u7528API\u7684\u7f51\u5740\u5217\u8868\u3002</p> <pre><code>{\n\"current_user_url\": \"https://api.github.com/user\",\n\"authorizations_url\": \"https://api.github.com/authorizations\",\n// ...\n}\n</code></pre> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u53bb\u8bbf\u95eeapi.github.com/user\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u7ed3\u679c\u3002</p> <pre><code>{\n\"message\": \"Requires authentication\",\n\"documentation_url\": \"https://developer.github.com/v3\"\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u8868\u793a\uff0c\u670d\u52a1\u5668\u7ed9\u51fa\u4e86\u63d0\u793a\u4fe1\u606f\uff0c\u4ee5\u53ca\u6587\u6863\u7684\u7f51\u5740\u3002</p>"},{"location":"rest-ful/restapi/#\u5341\u5176\u4ed6","title":"\u5341\u3001\u5176\u4ed6","text":"<p>\uff081\uff09API\u7684\u8eab\u4efd\u8ba4\u8bc1\u5e94\u8be5\u4f7f\u7528OAuth 2.0\u6846\u67b6\u3002</p> <p>\uff082\uff09\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5e94\u8be5\u4f7f\u7528JSON\uff0c\u4e0d\u5e94\u4f7f\u7528XML\uff08\u66f4\u4e0d\u5fc5\u63d0SOAP\u4e86\uff09\u3002</p> <p>\uff08\u5b8c\uff09</p>"},{"location":"rest-ful/restapibsetp/","title":"RESTful API \u6700\u4f73\u5b9e\u8df5","text":"<p>\u8f6c\u81ea: \u962e\u4e00\u5cf0\u8001\u5e08\u7684 - RESTful API \u6700\u4f73\u5b9e\u8df5</p> <p>RESTful \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 API \u8bbe\u8ba1\u89c4\u8303\uff0c\u7528\u4e8e Web \u6570\u636e\u63a5\u53e3\u7684\u8bbe\u8ba1\u3002</p> <p>\u5b83\u7684\u5927\u539f\u5219\u5bb9\u6613\u628a\u63e1\uff0c\u4f46\u662f\u7ec6\u8282\u4e0d\u5bb9\u6613\u505a\u5bf9\u3002\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u603b\u7ed3 API \u7684\u8bbe\u8ba1\u7ec6\u8282\uff0c\u4ecb\u7ecd\u600e\u4e48\u8bbe\u8ba1\u51fa\u6613\u4e8e\u7406\u89e3\u548c\u4f7f\u7528\u7684 API\u3002</p> <p></p>"},{"location":"rest-ful/restapibsetp/#\u4e00url-\u8bbe\u8ba1","title":"\u4e00\u3001URL \u8bbe\u8ba1","text":""},{"location":"rest-ful/restapibsetp/#11-\u52a8\u8bcd--\u8c13\u8bed","title":"1.1 \u52a8\u8bcd + \u8c13\u8bed","text":"<p>RESTful \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u64cd\u4f5c\u6307\u4ee4\u90fd\u662f\u201c\u52a8\u8bcd + \u8c13\u8bed\u201d\u7684\u7ed3\u6784\u3002\u6bd4\u5982\uff0c<code>GET /articles</code>\u8fd9\u4e2a\u547d\u4ee4\uff0c<code>GET</code>\u662f\u52a8\u8bcd\uff0c<code>/articles</code>\u662f\u8c13\u8bed\u3002</p> <p>\u52a8\u8bcd\u901a\u5e38\u5c31\u662f\u4e94\u79cd HTTP \u65b9\u6cd5\uff0c\u5bf9\u5e94 CRUD \u64cd\u4f5c\u3002</p> <ul> <li>GET\uff1a\u8bfb\u53d6\uff08Read\uff09</li> <li>POST\uff1a\u65b0\u5efa\uff08Create\uff09</li> <li>PUT\uff1a\u66f4\u65b0\uff08Update\uff09</li> <li>PATCH\uff1a\u66f4\u65b0\uff08Update\uff09\uff0c\u901a\u5e38\u662f\u90e8\u5206\u66f4\u65b0</li> <li>DELETE\uff1a\u5220\u9664\uff08Delete\uff09</li> </ul> <p>\u6839\u636e HTTP \u89c4\u8303\uff0c\u52a8\u8bcd\u4e00\u5f8b\u5927\u5199\u3002</p>"},{"location":"rest-ful/restapibsetp/#12-\u52a8\u8bcd\u7684\u8986\u76d6","title":"1.2 \u52a8\u8bcd\u7684\u8986\u76d6","text":"<p>\u6709\u4e9b\u5ba2\u6237\u7aef\u53ea\u80fd\u4f7f\u7528<code>GET</code>\u548c<code>POST</code>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002\u670d\u52a1\u5668\u5fc5\u987b\u63a5\u53d7<code>POST</code>\u6a21\u62df\u5176\u4ed6\u4e09\u4e2a\u65b9\u6cd5\uff08<code>PUT</code>\u3001<code>PATCH</code>\u3001<code>DELETE</code>\uff09\u3002</p> <p>\u8fd9\u65f6\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u7684 HTTP \u8bf7\u6c42\uff0c\u8981\u52a0\u4e0a<code>X-HTTP-Method-Override</code>\u5c5e\u6027\uff0c\u544a\u8bc9\u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u52a8\u8bcd\uff0c\u8986\u76d6<code>POST</code>\u65b9\u6cd5\u3002</p> <pre><code>POST /api/Person/4 HTTP/1.1  \nX-HTTP-Method-Override: PUT\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>X-HTTP-Method-Override</code>\u6307\u5b9a\u672c\u6b21\u8bf7\u6c42\u7684\u65b9\u6cd5\u662f<code>PUT</code>\uff0c\u800c\u4e0d\u662f<code>POST</code>\u3002</p>"},{"location":"rest-ful/restapibsetp/#13-\u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","title":"1.3 \u8c13\u8bed\u5fc5\u987b\u662f\u540d\u8bcd","text":"<p>\u8c13\u8bed\u5c31\u662f API \u7684 URL\uff0c\u662f HTTP \u52a8\u8bcd\u4f5c\u7528\u7684\u5bf9\u8c61\u3002\u5b83\u5e94\u8be5\u662f\u540d\u8bcd\uff0c\u4e0d\u80fd\u662f\u52a8\u8bcd\u3002\u6bd4\u5982\uff0c<code>/articles</code>\u8fd9\u4e2a URL \u5c31\u662f\u6b63\u786e\u7684\uff0c\u800c\u4e0b\u9762\u7684 URL \u4e0d\u662f\u540d\u8bcd\uff0c\u6240\u4ee5\u90fd\u662f\u9519\u8bef\u7684\u3002</p> <ul> <li>/getAllCars</li> <li>/createNewCar</li> <li>/deleteAllRedCars</li> </ul>"},{"location":"rest-ful/restapibsetp/#14-\u590d\u6570-url","title":"1.4 \u590d\u6570 URL","text":"<p>\u65e2\u7136 URL \u662f\u540d\u8bcd\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u590d\u6570\uff0c\u8fd8\u662f\u5355\u6570\uff1f</p> <p>\u8fd9\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u5b9a\uff0c\u4f46\u662f\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u8bfb\u53d6\u4e00\u4e2a\u96c6\u5408\uff0c\u6bd4\u5982<code>GET /articles</code>\uff08\u8bfb\u53d6\u6240\u6709\u6587\u7ae0\uff09\uff0c\u8fd9\u91cc\u660e\u663e\u5e94\u8be5\u662f\u590d\u6570\u3002</p> <p>\u4e3a\u4e86\u7edf\u4e00\u8d77\u89c1\uff0c\u5efa\u8bae\u90fd\u4f7f\u7528\u590d\u6570 URL\uff0c\u6bd4\u5982<code>GET /articles/2</code>\u8981\u597d\u4e8e<code>GET /article/2</code>\u3002</p>"},{"location":"rest-ful/restapibsetp/#15-\u907f\u514d\u591a\u7ea7-url","title":"1.5 \u907f\u514d\u591a\u7ea7 URL","text":"<p>\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u8d44\u6e90\u9700\u8981\u591a\u7ea7\u5206\u7c7b\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u5199\u51fa\u591a\u7ea7\u7684 URL\uff0c\u6bd4\u5982\u83b7\u53d6\u67d0\u4e2a\u4f5c\u8005\u7684\u67d0\u4e00\u7c7b\u6587\u7ae0\u3002</p> <pre><code>GET /authors/12/categories/2\n</code></pre> <p>\u8fd9\u79cd URL \u4e0d\u5229\u4e8e\u6269\u5c55\uff0c\u8bed\u4e49\u4e5f\u4e0d\u660e\u786e\uff0c\u5f80\u5f80\u8981\u60f3\u4e00\u4f1a\uff0c\u624d\u80fd\u660e\u767d\u542b\u4e49\u3002</p> <p>\u66f4\u597d\u7684\u505a\u6cd5\u662f\uff0c\u9664\u4e86\u7b2c\u4e00\u7ea7\uff0c\u5176\u4ed6\u7ea7\u522b\u90fd\u7528\u67e5\u8be2\u5b57\u7b26\u4e32\u8868\u8fbe\u3002</p> <pre><code>GET /authors/12?categories=2\n</code></pre> <p>\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u67e5\u8be2\u5df2\u53d1\u5e03\u7684\u6587\u7ae0\u3002\u4f60\u53ef\u80fd\u4f1a\u8bbe\u8ba1\u6210\u4e0b\u9762\u7684 URL\u3002</p> <pre><code>GET /articles/published\n</code></pre> <p>\u67e5\u8be2\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u660e\u663e\u66f4\u597d\u3002</p> <pre><code>GET /articles?published=true\n</code></pre>"},{"location":"rest-ful/restapibsetp/#\u4e8c\u72b6\u6001\u7801","title":"\u4e8c\u3001\u72b6\u6001\u7801","text":""},{"location":"rest-ful/restapibsetp/#21-\u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","title":"2.1 \u72b6\u6001\u7801\u5fc5\u987b\u7cbe\u786e","text":"<p>\u5ba2\u6237\u7aef\u7684\u6bcf\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u90fd\u5fc5\u987b\u7ed9\u51fa\u56de\u5e94\u3002\u56de\u5e94\u5305\u62ec\u72b6\u6001\u7801\u548c\u6570\u636e\u4e24\u90e8\u5206\u3002</p> <p>\u72b6\u6001\u7801\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u6570\uff0c\u5206\u6210\u4e94\u4e2a\u7c7b\u522b\u3002</p> <ul> <li><code>1xx</code>\uff1a\u76f8\u606f</li> <li><code>2xx</code>\uff1a\u64cd\u4f5c\u6210\u529f</li> <li><code>3xx</code>\uff1a\u91cd\u5b9a\u5411</li> <li><code>4xx</code>\uff1a\u5ba2\u6237\u7aef\u9519\u8bef</li> <li><code>5xx</code>\uff1a\u670d\u52a1\u5668\u9519\u8bef</li> </ul> <p>\u8fd9\u4e94\u5927\u7c7b\u603b\u5171\u5305\u542b100\u591a\u79cd\u72b6\u6001\u7801\uff0c\u8986\u76d6\u4e86\u7edd\u5927\u90e8\u5206\u53ef\u80fd\u9047\u5230\u7684\u60c5\u51b5\u3002\u6bcf\u4e00\u79cd\u72b6\u6001\u7801\u90fd\u6709\u6807\u51c6\u7684\uff08\u6216\u8005\u7ea6\u5b9a\u7684\uff09\u89e3\u91ca\uff0c\u5ba2\u6237\u7aef\u53ea\u9700\u67e5\u770b\u72b6\u6001\u7801\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u53d1\u751f\u4e86\u4ec0\u4e48\u60c5\u51b5\uff0c\u6240\u4ee5\u670d\u52a1\u5668\u5e94\u8be5\u8fd4\u56de\u5c3d\u53ef\u80fd\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <p>API \u4e0d\u9700\u8981<code>1xx</code>\u72b6\u6001\u7801\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4ed6\u56db\u7c7b\u72b6\u6001\u7801\u7684\u7cbe\u786e\u542b\u4e49\u3002</p>"},{"location":"rest-ful/restapibsetp/#22-2xx-\u72b6\u6001\u7801","title":"2.2 2xx \u72b6\u6001\u7801","text":"<p><code>200</code>\u72b6\u6001\u7801\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u66f4\u7cbe\u786e\u7684\u72b6\u6001\u7801\u3002</p> <ul> <li>GET: 200 OK</li> <li>POST: 201 Created</li> <li>PUT: 200 OK</li> <li>PATCH: 200 OK</li> <li>DELETE: 204 No Content</li> </ul> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c<code>POST</code>\u8fd4\u56de<code>201</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u751f\u6210\u4e86\u65b0\u7684\u8d44\u6e90\uff1b<code>DELETE</code>\u8fd4\u56de<code>204</code>\u72b6\u6001\u7801\uff0c\u8868\u793a\u8d44\u6e90\u5df2\u7ecf\u4e0d\u5b58\u5728\u3002</p> <p>\u6b64\u5916\uff0c<code>202 Accepted</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u5668\u5df2\u7ecf\u6536\u5230\u8bf7\u6c42\uff0c\u4f46\u8fd8\u672a\u8fdb\u884c\u5904\u7406\uff0c\u4f1a\u5728\u672a\u6765\u518d\u5904\u7406\uff0c\u901a\u5e38\u7528\u4e8e\u5f02\u6b65\u64cd\u4f5c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 202 Accepted\n\n{\n  \"task\": {\n    \"href\": \"/api/company/job-management/jobs/2130040\",\n    \"id\": \"2130040\"\n  }\n}\n</code></pre>"},{"location":"rest-ful/restapibsetp/#23-3xx-\u72b6\u6001\u7801","title":"2.3 3xx \u72b6\u6001\u7801","text":"<p>API \u7528\u4e0d\u5230<code>301</code>\u72b6\u6001\u7801\uff08\u6c38\u4e45\u91cd\u5b9a\u5411\uff09\u548c<code>302</code>\u72b6\u6001\u7801\uff08\u6682\u65f6\u91cd\u5b9a\u5411\uff0c<code>307</code>\u4e5f\u662f\u8fd9\u4e2a\u542b\u4e49\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u7531\u5e94\u7528\u7ea7\u522b\u8fd4\u56de\uff0c\u6d4f\u89c8\u5668\u4f1a\u76f4\u63a5\u8df3\u8f6c\uff0cAPI \u7ea7\u522b\u53ef\u4ee5\u4e0d\u8003\u8651\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>API \u7528\u5230\u7684<code>3xx</code>\u72b6\u6001\u7801\uff0c\u4e3b\u8981\u662f<code>303 See Other</code>\uff0c\u8868\u793a\u53c2\u8003\u53e6\u4e00\u4e2a URL\u3002\u5b83\u4e0e<code>302</code>\u548c<code>307</code>\u7684\u542b\u4e49\u4e00\u6837\uff0c\u4e5f\u662f\u201c\u6682\u65f6\u91cd\u5b9a\u5411\u201d\uff0c\u533a\u522b\u5728\u4e8e<code>302</code>\u548c<code>307</code>\u7528\u4e8e<code>GET</code>\u8bf7\u6c42\uff0c\u800c<code>303</code>\u7528\u4e8e<code>POST</code>\u3001<code>PUT</code>\u548c<code>DELETE</code>\u8bf7\u6c42\u3002\u6536\u5230<code>303</code>\u4ee5\u540e\uff0c\u6d4f\u89c8\u5668\u4e0d\u4f1a\u81ea\u52a8\u8df3\u8f6c\uff0c\u800c\u4f1a\u8ba9\u7528\u6237\u81ea\u5df1\u51b3\u5b9a\u4e0b\u4e00\u6b65\u600e\u4e48\u529e\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 303 See Other\nLocation: /api/orders/12345\n</code></pre>"},{"location":"rest-ful/restapibsetp/#24-4xx-\u72b6\u6001\u7801","title":"2.4 4xx \u72b6\u6001\u7801","text":"<p><code>4xx</code>\u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u9519\u8bef\uff0c\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u79cd\u3002</p> <p><code>400 Bad Request</code>\uff1a\u670d\u52a1\u5668\u4e0d\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u672a\u505a\u4efb\u4f55\u5904\u7406\u3002</p> <p><code>401 Unauthorized</code>\uff1a\u7528\u6237\u672a\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\uff0c\u6216\u8005\u6ca1\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3002</p> <p><code>403 Forbidden</code>\uff1a\u7528\u6237\u901a\u8fc7\u4e86\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u4e0d\u5177\u6709\u8bbf\u95ee\u8d44\u6e90\u6240\u9700\u7684\u6743\u9650\u3002</p> <p><code>404 Not Found</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\uff0c\u6216\u4e0d\u53ef\u7528\u3002</p> <p><code>405 Method Not Allowed</code>\uff1a\u7528\u6237\u5df2\u7ecf\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u662f\u6240\u7528\u7684 HTTP \u65b9\u6cd5\u4e0d\u5728\u4ed6\u7684\u6743\u9650\u4e4b\u5185\u3002</p> <p><code>410 Gone</code>\uff1a\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u5df2\u4ece\u8fd9\u4e2a\u5730\u5740\u8f6c\u79fb\uff0c\u4e0d\u518d\u53ef\u7528\u3002</p> <p><code>415 Unsupported Media Type</code>\uff1a\u5ba2\u6237\u7aef\u8981\u6c42\u7684\u8fd4\u56de\u683c\u5f0f\u4e0d\u652f\u6301\u3002\u6bd4\u5982\uff0cAPI \u53ea\u80fd\u8fd4\u56de JSON \u683c\u5f0f\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u8981\u6c42\u8fd4\u56de XML \u683c\u5f0f\u3002</p> <p><code>422 Unprocessable Entity</code> \uff1a\u5ba2\u6237\u7aef\u4e0a\u4f20\u7684\u9644\u4ef6\u65e0\u6cd5\u5904\u7406\uff0c\u5bfc\u81f4\u8bf7\u6c42\u5931\u8d25\u3002</p> <p><code>429 Too Many Requests</code>\uff1a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6b21\u6570\u8d85\u8fc7\u9650\u989d\u3002</p>"},{"location":"rest-ful/restapibsetp/#25-5xx-\u72b6\u6001\u7801","title":"2.5 5xx \u72b6\u6001\u7801","text":"<p><code>5xx</code>\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u7aef\u9519\u8bef\u3002\u4e00\u822c\u6765\u8bf4\uff0cAPI \u4e0d\u4f1a\u5411\u7528\u6237\u900f\u9732\u670d\u52a1\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6240\u4ee5\u53ea\u8981\u4e24\u4e2a\u72b6\u6001\u7801\u5c31\u591f\u4e86\u3002</p> <p><code>500 Internal Server Error</code>\uff1a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6709\u6548\uff0c\u670d\u52a1\u5668\u5904\u7406\u65f6\u53d1\u751f\u4e86\u610f\u5916\u3002</p> <p><code>503 Service Unavailable</code>\uff1a\u670d\u52a1\u5668\u65e0\u6cd5\u5904\u7406\u8bf7\u6c42\uff0c\u4e00\u822c\u7528\u4e8e\u7f51\u7ad9\u7ef4\u62a4\u72b6\u6001\u3002</p>"},{"location":"rest-ful/restapibsetp/#\u4e09\u670d\u52a1\u5668\u56de\u5e94","title":"\u4e09\u3001\u670d\u52a1\u5668\u56de\u5e94","text":""},{"location":"rest-ful/restapibsetp/#31-\u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","title":"3.1 \u4e0d\u8981\u8fd4\u56de\u7eaf\u672c\u6587","text":"<p>API \u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4e0d\u5e94\u8be5\u662f\u7eaf\u6587\u672c\uff0c\u800c\u5e94\u8be5\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u8fd4\u56de\u6807\u51c6\u7684\u7ed3\u6784\u5316\u6570\u636e\u3002\u6240\u4ee5\uff0c\u670d\u52a1\u5668\u56de\u5e94\u7684 HTTP \u5934\u7684<code>Content-Type</code>\u5c5e\u6027\u8981\u8bbe\u4e3a<code>application/json</code>\u3002</p> <p>\u5ba2\u6237\u7aef\u8bf7\u6c42\u65f6\uff0c\u4e5f\u8981\u660e\u786e\u544a\u8bc9\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u63a5\u53d7 JSON \u683c\u5f0f\uff0c\u5373\u8bf7\u6c42\u7684 HTTP \u5934\u7684<code>ACCEPT</code>\u5c5e\u6027\u4e5f\u8981\u8bbe\u6210<code>application/json</code>\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>GET /orders/2 HTTP/1.1 \nAccept: application/json\n</code></pre>"},{"location":"rest-ful/restapibsetp/#32-\u53d1\u751f\u9519\u8bef\u65f6\u4e0d\u8981\u8fd4\u56de-200-\u72b6\u6001\u7801","title":"3.2 \u53d1\u751f\u9519\u8bef\u65f6\uff0c\u4e0d\u8981\u8fd4\u56de 200 \u72b6\u6001\u7801","text":"<p>\u6709\u4e00\u79cd\u4e0d\u6070\u5f53\u7684\u505a\u6cd5\u662f\uff0c\u5373\u4f7f\u53d1\u751f\u9519\u8bef\uff0c\u4e5f\u8fd4\u56de<code>200</code>\u72b6\u6001\u7801\uff0c\u628a\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\"status\": \"failure\",\n\"data\": {\n\"error\": \"Expected at least two items in list.\"\n}\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u89e3\u6790\u6570\u636e\u4f53\u4ee5\u540e\uff0c\u624d\u80fd\u5f97\u77e5\u64cd\u4f5c\u5931\u8d25\u3002</p> <p>\u8fd9\u5f20\u505a\u6cd5\u5b9e\u9645\u4e0a\u53d6\u6d88\u4e86\u72b6\u6001\u7801\uff0c\u8fd9\u662f\u5b8c\u5168\u4e0d\u53ef\u53d6\u7684\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff0c\u72b6\u6001\u7801\u53cd\u6620\u53d1\u751f\u7684\u9519\u8bef\uff0c\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u653e\u5728\u6570\u636e\u4f53\u91cc\u9762\u8fd4\u56de\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002</p> <pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n\"error\": \"Invalid payoad.\",\n\"detail\": {\n\"surname\": \"This field is required.\"\n}\n}\n</code></pre>"},{"location":"rest-ful/restapibsetp/#33-\u63d0\u4f9b\u94fe\u63a5","title":"3.3 \u63d0\u4f9b\u94fe\u63a5","text":"<p>API \u7684\u4f7f\u7528\u8005\u672a\u5fc5\u77e5\u9053\uff0cURL \u662f\u600e\u4e48\u8bbe\u8ba1\u7684\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\uff0c\u5728\u56de\u5e94\u4e2d\uff0c\u7ed9\u51fa\u76f8\u5173\u94fe\u63a5\uff0c\u4fbf\u4e8e\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u7528\u6237\u53ea\u8981\u8bb0\u4f4f\u4e00\u4e2a URL\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u7684 URL\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u505a HATEOAS\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0cGitHub \u7684 API \u90fd\u5728 api.github.com \u8fd9\u4e2a\u57df\u540d\u3002\u8bbf\u95ee\u5b83\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5176\u4ed6 URL\u3002</p> <pre><code>{\n  ...\n  \"feeds_url\": \"https://api.github.com/feeds\",\n  \"followers_url\": \"https://api.github.com/user/followers\",\n  \"following_url\": \"https://api.github.com/user/following{/target}\",\n  \"gists_url\": \"https://api.github.com/gists{/gist_id}\",\n  \"hub_url\": \"https://api.github.com/hub\",\n  ...\n}\n</code></pre> <p>\u4e0a\u9762\u7684\u56de\u5e94\u4e2d\uff0c\u6311\u4e00\u4e2a URL \u8bbf\u95ee\uff0c\u53c8\u53ef\u4ee5\u5f97\u5230\u522b\u7684 URL\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u4e0d\u9700\u8981\u8bb0\u4f4f  URL \u8bbe\u8ba1\uff0c\u53ea\u8981\u4ece api.github.com \u4e00\u6b65\u6b65\u67e5\u627e\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>HATEOAS \u7684\u683c\u5f0f\u6ca1\u6709\u7edf\u4e00\u89c4\u5b9a\uff0c\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0cGitHub \u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u5c5e\u6027\u653e\u5728\u4e00\u8d77\u3002\u66f4\u597d\u7684\u505a\u6cd5\u5e94\u8be5\u662f\uff0c\u5c06\u76f8\u5173\u94fe\u63a5\u4e0e\u5176\u4ed6\u5c5e\u6027\u5206\u5f00\u3002</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\"status\": \"In progress\",\n\"links\": {[\n{ \"rel\":\"cancel\", \"method\": \"delete\", \"href\":\"/api/status/12345\" } ,\n{ \"rel\":\"edit\", \"method\": \"put\", \"href\":\"/api/status/12345\" }\n]}\n}\n</code></pre>"},{"location":"rest-ful/restapibsetp/#\u56db\u53c2\u8003\u94fe\u63a5","title":"\u56db\u3001\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>RESTful API Design: 13 Best Practices to Make Your Users Happy, by Florimond Manca</li> <li>API design, by MicroSoft Azure</li> </ul> <p>\uff08\u5b8c\uff09</p>"},{"location":"system-design/perm_design/","title":"\u6743\u9650\u7cfb\u7edf\u7684\u8bbe\u8ba1","text":"<p>\u8f6c\u8f7d\u81ea: \u7816\u5bb6\u7a74\u8005\u53eb\u517d \u7684 \u6743\u9650\u7cfb\u7edf\u7684\u8bbe\u8ba1</p> <p></p>"},{"location":"system-design/perm_design/#\u524d\u8a00","title":"\u524d\u8a00","text":"<p>\u6743\u9650\u7ba1\u7406\u662f\u6240\u6709\u540e\u53f0\u7cfb\u7edf\u7684\u90fd\u4f1a\u6d89\u53ca\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u4eba\u8bbf\u95ee\u8d44\u6e90\u8fdb\u884c\u6743\u9650\u7684\u63a7\u5236\uff0c\u907f\u514d\u56e0\u6743\u9650\u63a7\u5236\u7f3a\u5931\u6216\u64cd\u4f5c\u4e0d\u5f53\u5f15\u53d1\u7684\u98ce\u9669\u95ee\u9898\uff0c\u5982\u64cd\u4f5c\u9519\u8bef\uff0c\u9690\u79c1\u6570\u636e\u6cc4\u9732\u7b49\u95ee\u9898\u3002</p> <p>\u76ee\u524d\u5728\u516c\u53f8\u8d1f\u8d23\u6743\u9650\u8fd9\u5757,\u6240\u4ee5\u5bf9\u6743\u9650\u8fd9\u5757\u7684\u8bbe\u8ba1\u6bd4\u8f83\u719f\u6089,\u516c\u53f8\u91c7\u7528\u5fae\u670d\u52a1\u67b6\u6784,\u6743\u9650\u7cfb\u7edf\u81ea\u7136\u5c31\u72ec\u7acb\u51fa\u6765\u4e86,\u5176\u4ed6\u4e1a\u52a1\u7cfb\u7edf\u5305\u62ec\u5546\u54c1\u4e2d\u5fc3,\u8ba2\u5355\u4e2d\u5fc3,\u7528\u6237\u4e2d\u5fc3,\u4ed3\u5e93\u7cfb\u7edf,\u5c0f\u7a0b\u5e8f,\u591a\u4e2aAPP\u7b49\u5341\u51e0\u4e2a\u7cfb\u7edf\u548c\u7ec8\u7aef</p>"},{"location":"system-design/perm_design/#1\u6743\u9650\u6a21\u578b","title":"1.\u6743\u9650\u6a21\u578b","text":"<p>\u8fc4\u4eca\u4e3a\u6b62\u6700\u4e3a\u666e\u53ca\u7684\u6743\u9650\u8bbe\u8ba1\u6a21\u578b\u662fRBAC\u6a21\u578b,\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236(Role-Based Access Control)</p>"},{"location":"system-design/perm_design/#11-rbac0\u6a21\u578b","title":"1.1 RBAC0\u6a21\u578b","text":"<p>RBAC0\u6a21\u578b\u5982\u4e0b:</p> <p></p> <p>\u8fd9\u662f\u6743\u9650\u6700\u57fa\u7840\u4e5f\u662f\u6700\u6838\u5fc3\u7684\u6a21\u578b,\u5b83\u5305\u62ec\u7528\u6237/\u89d2\u8272/\u6743\u9650,\u5176\u4e2d\u7528\u6237\u548c\u89d2\u8272\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb,\u89d2\u8272\u548c\u6743\u9650\u4e5f\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u3002</p> <p>\u7528\u6237\u662f\u53d1\u8d77\u64cd\u4f5c\u7684\u4e3b\u4f53,\u6309\u7c7b\u578b\u5206\u53ef\u5206\u4e3a2B\u548c2C\u7528\u6237,\u53ef\u4ee5\u662f\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u7684\u7528\u6237,\u53ef\u4ee5\u662fOA\u7cfb\u7edf\u7684\u5185\u90e8\u5458\u5de5,\u4e5f\u53ef\u4ee5\u662f\u9762\u5411C\u7aef\u7684\u7528\u6237,\u6bd4\u5982\u963f\u91cc\u4e91\u7684\u7528\u6237\u3002</p> <p>\u89d2\u8272\u8d77\u5230\u4e86\u6865\u6881\u7684\u4f5c\u7528,\u8fde\u63a5\u4e86\u7528\u6237\u548c\u6743\u9650\u7684\u5173\u7cfb,\u6bcf\u4e2a\u89d2\u8272\u53ef\u4ee5\u5173\u8054\u591a\u4e2a\u6743\u9650,\u540c\u65f6\u4e00\u4e2a\u7528\u6237\u5173\u8054\u591a\u4e2a\u89d2\u8272,\u90a3\u4e48\u8fd9\u4e2a\u7528\u6237\u5c31\u6709\u4e86\u591a\u4e2a\u89d2\u8272\u7684\u591a\u4e2a\u6743\u9650\u3002</p> <p>\u6709\u4eba\u4f1a\u95ee\u4e86\u4e3a\u4ec0\u4e48\u7528\u6237\u4e0d\u76f4\u63a5\u5173\u8054\u6743\u9650\u5462? \u5728\u7528\u6237\u57fa\u6570\u5c0f\u7684\u7cfb\u7edf,\u6bd4\u598220\u4e2a\u4eba\u7684\u5c0f\u7cfb\u7edf,\u7ba1\u7406\u5458\u53ef\u4ee5\u76f4\u63a5\u628a\u7528\u6237\u548c\u6743\u9650\u5173\u8054,\u5de5\u4f5c\u91cf\u5e76\u4e0d\u5927,\u9009\u62e9\u4e00\u4e2a\u7528\u6237\u52fe\u9009\u4e0b\u9700\u8981\u7684\u6743\u9650\u5c31\u5b8c\u4e8b\u4e86\u3002 \u4f46\u662f\u5728\u5b9e\u9645\u4f01\u4e1a\u7cfb\u7edf\u4e2d,\u7528\u6237\u57fa\u6570\u6bd4\u8f83\u5927,\u5176\u4e2d\u5f88\u591a\u4eba\u7684\u6743\u9650\u90fd\u662f\u4e00\u6837\u7684,\u5c31\u662f\u4e2a\u666e\u901a\u8bbf\u95ee\u6743\u9650,\u5982\u679c\u7ba1\u7406\u5458\u7ed9100\u4eba\u751a\u81f3\u66f4\u591a\u6388\u6743,\u5de5\u4f5c\u91cf\u5de8\u5927\u3002</p> <p>\u8fd9\u5c31\u5f15\u5165\u4e86\"\u89d2\u8272(Role)\"\u6982\u5ff5,\u4e00\u4e2a\u89d2\u8272\u53ef\u4ee5\u4e0e\u591a\u4e2a\u7528\u6237\u5173\u8054,\u7ba1\u7406\u5458\u53ea\u9700\u8981\u628a\u8be5\u89d2\u8272\u8d4b\u4e88\u7528\u6237,\u90a3\u4e48\u7528\u6237\u5c31\u6709\u4e86\u8be5\u89d2\u8272\u4e0b\u7684\u6240\u6709\u6743\u9650,\u8fd9\u6837\u8bbe\u8ba1\u65e2\u63d0\u5347\u4e86\u6548\u7387,\u4e5f\u6709\u5f88\u5927\u7684\u62d3\u5c55\u6027\u3002</p> <p>\u6743\u9650\u662f\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u8d44\u6e90,\u5305\u62ec\u3010\u9875\u9762\u6743\u9650\u3011,\u3010\u64cd\u4f5c\u6743\u9650\u3011,\u3010\u6570\u636e\u6743\u9650\u3011:</p> \u9875\u9762\u6743\u9650 \u5373\u7528\u6237\u767b\u5f55\u7cfb\u7edf\u53ef\u4ee5\u770b\u5230\u7684\u9875\u9762,\u7531\u83dc\u5355\u6765\u63a7\u5236,\u83dc\u5355\u5305\u62ec\u4e00\u7ea7\u83dc\u5355\u548c\u4e8c\u7ea7\u83dc\u5355,\u53ea\u8981\u7528\u6237\u6709\u4e00\u7ea7\u548c\u4e8c\u7ea7\u83dc\u5355\u7684\u6743\u9650,\u90a3\u4e48\u7528\u6237\u5c31\u53ef\u4ee5\u8bbf\u95ee\u9875\u9762 \u64cd\u4f5c\u6743\u9650 \u5373\u9875\u9762\u7684\u529f\u80fd\u6309\u94ae,\u5305\u62ec\u67e5\u770b,\u65b0\u589e,\u4fee\u6539,\u5220\u9664,\u5ba1\u6838\u7b49,\u7528\u6237\u70b9\u51fb\u5220\u9664\u6309\u94ae\u65f6,\u540e\u53f0\u4f1a\u6821\u9a8c\u7528\u6237\u89d2\u8272\u4e0b\u7684\u6240\u6709\u6743\u9650\u662f\u5426\u5305\u542b\u8be5\u5220\u9664\u6743\u9650,\u5982\u679c\u662f,\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c,\u53cd\u4e4b\u63d0\u793a\u65e0\u6743\u9650\u3002\u6709\u7684\u7cfb\u7edf\u8981\u6c42\"\u53ef\u89c1\u5373\u53ef\u64cd\u4f5c\",\u610f\u601d\u662f\u5982\u679c\u9875\u9762\u4e0a\u80fd\u591f\u770b\u5230\u64cd\u4f5c\u6309\u94ae,\u90a3\u4e48\u7528\u6237\u5c31\u53ef\u4ee5\u64cd\u4f5c,\u8981\u5b9e\u73b0\u6b64\u9700\u6c42,\u8fd9\u91cc\u5c31\u9700\u8981\u524d\u7aef\u6765\u914d\u5408,\u524d\u7aef\u5f00\u53d1\u628a\u7528\u6237\u7684\u6743\u9650\u4fe1\u606f\u7f13\u5b58,\u5728\u9875\u9762\u5224\u65ad\u7528\u6237\u662f\u5426\u5305\u542b\u6b64\u6743\u9650,\u5982\u679c\u6709,\u5c31\u663e\u793a\u8be5\u6309\u94ae,\u5982\u679c\u6ca1\u6709,\u5c31\u9690\u85cf\u8be5\u6309\u94ae\u3002\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u63d0\u5347\u4e86\u7528\u6237\u4f53\u9a8c,\u4f46\u662f\u5728\u5b9e\u9645\u573a\u666f\u53ef\u81ea\u884c\u9009\u62e9\u662f\u5426\u9700\u8981\u8fd9\u6837\u505a \u6570\u636e\u6743\u9650 \u6570\u636e\u6743\u9650\u5c31\u662f\u7528\u6237\u5728\u540c\u4e00\u9875\u9762\u770b\u5230\u7684\u6570\u636e\u662f\u4e0d\u540c\u7684,\u6bd4\u5982\u8d22\u52a1\u90e8\u53ea\u80fd\u770b\u5230\u5176\u90e8\u95e8\u4e0b\u7684\u7528\u6237\u6570\u636e,\u91c7\u8d2d\u90e8\u53ea\u770b\u91c7\u8d2d\u90e8\u7684\u6570\u636e,\u5728\u4e00\u4e9b\u5927\u578b\u7684\u516c\u53f8,\u5168\u56fd\u6709\u5f88\u591a\u57ce\u5e02\u548c\u5206\u516c\u53f8,\u6bd4\u5982\u676d\u5dde\u7528\u6237\u767b\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u676d\u5dde\u7684\u6570\u636e,\u4e0a\u6d77\u7528\u6237\u53ea\u80fd\u770b\u5230\u4e0a\u6d77\u7684\u6570\u636e,\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u628a\u6570\u636e\u548c\u5177\u4f53\u7684\u7ec4\u7ec7\u67b6\u6784\u5173\u8054\u8d77\u6765,\u4e3e\u4e2a\u4f8b\u5b50,\u518d\u7ed9\u7528\u6237\u6388\u6743\u7684\u65f6\u5019,\u7528\u6237\u9009\u62e9\u67d0\u4e2a\u89d2\u8272\u540c\u65f6\u7ed1\u5b9a\u7ec4\u7ec7\u5982\u8d22\u52a1\u90e8\u6216\u8005\u5408\u80a5\u5206\u516c\u53f8,\u90a3\u4e48\u8be5\u7528\u6237\u5c31\u6709\u4e86\u8be5\u89d2\u8272\u4e0b\u8d22\u52a1\u90e8\u6216\u5408\u80a5\u5206\u516c\u53f8\u4e0b\u7684\u7684\u6570\u636e\u6743\u9650\u3002 <p></p> <p>\u4ee5\u4e0a\u662fRBAC\u7684\u6838\u5fc3\u8bbe\u8ba1\u53ca\u6a21\u578b\u5206\u6790,\u6b64\u6a21\u578b\u4e5f\u53eb\u505aRBAC0,\u800c\u57fa\u4e8e\u6838\u5fc3\u6982\u5ff5\u4e4b\u4e0a,RBAC\u8fd8\u63d0\u4f9b\u4e86\u6269\u5c55\u6a21\u5f0f\u3002\u5305\u62ecRBAC1,RBAC2,RBAC3\u6a21\u578b\u3002\u4e0b\u9762\u4ecb\u7ecd\u8fd9\u4e09\u79cd\u7c7b\u578b</p>"},{"location":"system-design/perm_design/#12-rbac1\u6a21\u578b","title":"1.2 RBAC1\u6a21\u578b","text":"<p>\u6b64\u6a21\u578b\u5f15\u5165\u4e86\u89d2\u8272\u7ee7\u627f(Hierarchical Role)\u6982\u5ff5,\u5373\u89d2\u8272\u5177\u6709\u4e0a\u4e0b\u7ea7\u7684\u5173\u7cfb,\u89d2\u8272\u95f4\u7684\u7ee7\u627f\u5173\u7cfb\u53ef\u5206\u4e3a\u4e00\u822c\u7ee7\u627f\u5173\u7cfb\u548c\u53d7\u9650\u7ee7\u627f\u5173\u7cfb\u3002 \u4e00\u822c\u7ee7\u627f\u5173\u7cfb\u4ec5\u8981\u6c42\u89d2\u8272\u7ee7\u627f\u5173\u7cfb\u662f\u4e00\u4e2a\u7edd\u5bf9\u504f\u5e8f\u5173\u7cfb\uff0c\u5141\u8bb8\u89d2\u8272\u95f4\u7684\u591a\u7ee7\u627f\u3002 \u800c\u53d7\u9650\u7ee7\u627f\u5173\u7cfb\u5219\u8fdb\u4e00\u6b65\u8981\u6c42\u89d2\u8272\u7ee7\u627f\u5173\u7cfb\u662f\u4e00\u4e2a\u6811\u7ed3\u6784\uff0c\u5b9e\u73b0\u89d2\u8272\u95f4\u7684\u5355\u7ee7\u627f\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u53ef\u4ee5\u7ed9\u89d2\u8272\u5206\u7ec4\u548c\u5206\u5c42\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u7b80\u5316\u4e86\u6743\u9650\u7ba1\u7406\u5de5\u4f5c\u3002</p>"},{"location":"system-design/perm_design/#13-rbac2\u6a21\u578b","title":"1.3 RBAC2\u6a21\u578b","text":"<p>\u57fa\u4e8e\u6838\u5fc3\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u89d2\u8272\u7684\u7ea6\u675f\u63a7\u5236,RBAC2\u6a21\u578b\u4e2d\u6dfb\u52a0\u4e86\u8d23\u4efb\u5206\u79bb\u5173\u7cfb,\u5176\u89c4\u5b9a\u4e86\u6743\u9650\u88ab\u8d4b\u4e88\u89d2\u8272\u65f6\uff0c\u6216\u89d2\u8272\u88ab\u8d4b\u4e88\u7528\u6237\u65f6\uff0c\u4ee5\u53ca\u5f53\u7528\u6237\u5728\u67d0\u4e00\u65f6\u523b\u6fc0\u6d3b\u4e00\u4e2a\u89d2\u8272\u65f6\u6240\u5e94\u9075\u5faa\u7684\u5f3a\u5236\u6027\u89c4\u5219\u3002\u8d23\u4efb\u5206\u79bb\u5305\u62ec\u9759\u6001\u8d23\u4efb\u5206\u79bb\u548c\u52a8\u6001\u8d23\u4efb\u5206\u79bb\u3002\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u7ea6\u675f:</p> \u4e92\u65a5\u89d2\u8272 \u540c\u4e00\u7528\u6237\u53ea\u80fd\u5206\u914d\u5230\u4e00\u7ec4\u4e92\u65a5\u89d2\u8272\u96c6\u5408\u4e2d\u81f3\u591a\u4e00\u4e2a\u89d2\u8272\uff0c\u652f\u6301\u8d23\u4efb\u5206\u79bb\u7684\u539f\u5219\u3002\u4e92\u65a5\u89d2\u8272\u662f\u6307\u5404\u81ea\u6743\u9650\u4e92\u76f8\u5236\u7ea6\u7684\u4e24\u4e2a\u89d2\u8272\u3002\u6bd4\u5982\u8d22\u52a1\u90e8\u6709\u4f1a\u8ba1\u548c\u5ba1\u6838\u5458\u4e24\u4e2a\u89d2\u8272,\u4ed6\u4eec\u662f\u4e92\u65a5\u89d2\u8272,\u90a3\u4e48\u7528\u6237\u4e0d\u80fd\u540c\u65f6\u62e5\u6709\u8fd9\u4e24\u4e2a\u89d2\u8272,\u4f53\u73b0\u4e86\u804c\u8d23\u5206\u79bb\u539f\u5219 \u57fa\u6570\u7ea6\u675f \u4e00\u4e2a\u89d2\u8272\u88ab\u5206\u914d\u7684\u7528\u6237\u6570\u91cf\u53d7\u9650\uff1b\u4e00\u4e2a\u7528\u6237\u53ef\u62e5\u6709\u7684\u89d2\u8272\u6570\u76ee\u53d7\u9650\uff1b\u540c\u6837\u4e00\u4e2a\u89d2\u8272\u5bf9\u5e94\u7684\u8bbf\u95ee\u6743\u9650\u6570\u76ee\u4e5f\u5e94\u53d7\u9650\uff0c\u4ee5\u63a7\u5236\u9ad8\u7ea7\u6743\u9650\u5728\u7cfb\u7edf\u4e2d\u7684\u5206\u914d \u5148\u51b3\u6761\u4ef6\u89d2\u8272 \u5373\u7528\u6237\u60f3\u83b7\u5f97\u67d0\u4e0a\u7ea7\u89d2\u8272,\u5fc5\u987b\u5148\u83b7\u5f97\u5176\u4e0b\u4e00\u7ea7\u7684\u89d2\u8272"},{"location":"system-design/perm_design/#14-rbac3\u6a21\u578b","title":"1.4 RBAC3\u6a21\u578b","text":"<p>\u5373\u6700\u5168\u9762\u7684\u6743\u9650\u7ba1\u7406,\u5b83\u662f\u57fa\u4e8eRBAC0,\u5c06RBAC1\u548cRBAC2\u8fdb\u884c\u4e86\u6574\u5408</p>"},{"location":"system-design/perm_design/#2-\u7528\u6237\u7ec4","title":"2. \u7528\u6237\u7ec4","text":"<p>\u5f53\u5e73\u53f0\u7528\u6237\u57fa\u6570\u589e\u5927\uff0c\u89d2\u8272\u7c7b\u578b\u589e\u591a\u65f6\uff0c\u800c\u4e14\u6709\u4e00\u90e8\u5206\u4eba\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027,\u6bd4\u5982\u8d22\u52a1\u90e8\u7684\u6240\u6709\u5458\u5de5,\u5982\u679c\u76f4\u63a5\u7ed9\u7528\u6237\u5206\u914d\u89d2\u8272\uff0c\u7ba1\u7406\u5458\u7684\u5de5\u4f5c\u91cf\u5c31\u4f1a\u5f88\u5927,\u5982\u679c\u628a\u76f8\u540c\u5c5e\u6027\u7684\u7528\u6237\u5f52\u7c7b\u5230\u67d0\u7528\u6237\u7ec4,\u90a3\u4e48\u7ba1\u7406\u5458\u76f4\u63a5\u7ed9\u7528\u6237\u7ec4\u5206\u914d\u89d2\u8272,\u7528\u6237\u7ec4\u91cc\u7684\u6bcf\u4e2a\u7528\u6237\u5373\u53ef\u62e5\u6709\u8be5\u89d2\u8272,\u4ee5\u540e\u5176\u4ed6\u7528\u6237\u52a0\u5165\u7528\u6237\u7ec4\u540e,\u5373\u53ef\u81ea\u52a8\u83b7\u53d6\u7528\u6237\u7ec4\u7684\u6240\u6709\u89d2\u8272,\u9000\u51fa\u7528\u6237\u7ec4,\u540c\u65f6\u4e5f\u64a4\u9500\u4e86\u7528\u6237\u7ec4\u4e0b\u7684\u89d2\u8272,\u65e0\u987b\u7ba1\u7406\u5458\u624b\u52a8\u7ba1\u7406\u89d2\u8272\u3002</p> <p>\u6839\u636e\u7528\u6237\u7ec4\u662f\u5426\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb,\u53ef\u4ee5\u5206\u4e3a\u6709\u4e0a\u4e0b\u7ea7\u7684\u7528\u6237\u7ec4\u548c\u666e\u901a\u7528\u6237\u7ec4:</p> \u5177\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb\u7684\u7528\u6237\u7ec4 \u6700\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u90e8\u95e8\u548c\u804c\u4f4d,\u53ef\u80fd\u591a\u6570\u4eba\u6ca1\u6709\u628a\u90e8\u95e8\u804c\u4f4d\u548c\u7528\u6237\u7ec4\u5173\u8054\u8d77\u6765\u5427\u3002\u5f53\u7136\u7528\u6237\u7ec4\u662f\u53ef\u4ee5\u62d3\u5c55\u7684,\u90e8\u95e8\u548c\u804c\u4f4d\u5e38\u7528\u4e8e\u5185\u90e8\u7684\u7ba1\u7406\u7cfb\u7edf,\u5982\u679c\u662f\u9762\u5411C\u7aef\u7684\u7cfb\u7edf,\u6bd4\u5982\u6dd8\u5b9d\u7f51\u7684\u5546\u5bb6,\u5546\u5bb6\u81ea\u8eab\u4e5f\u6709\u4e00\u5957\u7ec4\u7ec7\u67b6\u6784,\u6bd4\u5982\u91c7\u8d2d\u90e8,\u9500\u552e\u90e8,\u5ba2\u670d\u90e8,\u540e\u52e4\u90e8\u7b49,\u6709\u4e9b\u4eba\u62e5\u6709\u5ba2\u670d\u6743\u9650,\u6709\u4e9b\u4eba\u62e5\u6709\u4e0a\u67b6\u6743\u9650\u7b49\u7b49,\u6240\u4ee5\u7528\u6237\u7ec4\u662f\u53ef\u4ee5\u62d3\u5c55\u7684 \u666e\u901a\u7528\u6237\u7ec4 \u5373\u6ca1\u6709\u4e0a\u4e0b\u7ea7\u5173\u7cfb,\u548c\u7ec4\u7ec7\u67b6\u6784,\u804c\u4f4d\u90fd\u6ca1\u6709\u5173\u7cfb,\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u8de8\u90e8\u95e8,\u8de8\u804c\u4f4d,\u4e3e\u4e2a\u4f8b\u5b50,\u67d0\u7535\u5546\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf,\u6709\u62fc\u56e2\u6d3b\u52a8\u7ba1\u7406\u89d2\u8272,\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u62fc\u56e2\u7528\u6237\u7ec4,\u8be5\u7ec4\u53ef\u4ee5\u5305\u62ec\u7814\u53d1\u90e8\u7684\u540e\u53f0\u5f00\u53d1\u4eba\u5458,\u8fd0\u8425\u90e8\u7684\u8fd0\u8425\u4eba\u5458,\u91c7\u8d2d\u90e8\u7684\u4eba\u5458\u7b49\u7b49\u3002 <p>\u6bcf\u4e2a\u516c\u53f8\u90fd\u4f1a\u6d89\u53ca\u5230\u5230\u7ec4\u7ec7\u548c\u804c\u4f4d,\u4e0b\u9762\u5c31\u91cd\u70b9\u4ecb\u7ecd\u8fd9\u4e24\u4e2a\u3002</p>"},{"location":"system-design/perm_design/#21-\u7ec4\u7ec7","title":"2.1 \u7ec4\u7ec7","text":"<p>\u5e38\u89c1\u7684\u7ec4\u7ec7\u67b6\u6784\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u7ec4\u7ec7\u4e0e\u89d2\u8272\u8fdb\u884c\u5173\u8054,\u7528\u6237\u52a0\u5165\u7ec4\u7ec7\u540e,\u5c31\u4f1a\u81ea\u52a8\u83b7\u5f97\u8be5\u7ec4\u7ec7\u7684\u5168\u90e8\u89d2\u8272,\u65e0\u987b\u7ba1\u7406\u5458\u624b\u52a8\u6388\u4e88,\u5927\u5927\u51cf\u5c11\u5de5\u4f5c\u91cf,\u540c\u65f6\u7528\u6237\u5728\u8c03\u5c97\u65f6,\u53ea\u9700\u8c03\u6574\u7ec4\u7ec7,\u89d2\u8272\u5373\u53ef\u6279\u91cf\u8c03\u6574\u3002\u7ec4\u7ec7\u7684\u53e6\u5916\u4e00\u4e2a\u4f5c\u7528\u662f\u63a7\u5236\u6570\u636e\u6743\u9650,\u628a\u89d2\u8272\u5173\u8054\u5230\u7ec4\u7ec7,\u90a3\u4e48\u8be5\u89d2\u8272\u53ea\u80fd\u770b\u5230\u8be5\u7ec4\u7ec7\u4e0b\u7684\u6570\u636e\u6743\u9650\u3002</p>"},{"location":"system-design/perm_design/#22-\u804c\u4f4d","title":"2.2 \u804c\u4f4d","text":"<p>\u5047\u8bbe\u8d22\u52a1\u90e8\u7684\u804c\u4f4d\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6bcf\u4e2a\u7ec4\u7ec7\u90e8\u95e8\u4e0b\u90fd\u4f1a\u6709\u591a\u4e2a\u804c\u4f4d,\u6bd4\u5982\u8d22\u52a1\u90e8\u6709\u603b\u76d1,\u4f1a\u8ba1,\u51fa\u7eb3\u7b49\u804c\u4f4d,\u867d\u7136\u90fd\u5728\u540c\u4e00\u90e8\u95e8,\u4f46\u662f\u6bcf\u4e2a\u804c\u4f4d\u7684\u6743\u9650\u662f\u4e0d\u540c\u7684,\u804c\u4f4d\u9ad8\u7684\u62e5\u6709\u66f4\u591a\u7684\u6743\u9650\u3002\u603b\u76d1\u62e5\u6709\u6240\u6709\u6743\u9650,\u4f1a\u8ba1\u548c\u51fa\u7eb3\u62e5\u6709\u90e8\u5206\u6743\u9650\u3002\u7279\u6b8a\u60c5\u51b5\u4e0b,\u4e00\u4e2a\u4eba\u53ef\u80fd\u8eab\u517c\u591a\u804c\u3002</p>"},{"location":"system-design/perm_design/#3-\u6a21\u578b","title":"3 \u6a21\u578b","text":"<p>\u6839\u636e\u4ee5\u4e0a\u573a\u666f,\u65b0\u7684\u6743\u9650\u6a21\u578b\u5c31\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u6765\u4e86,\u5982\u4e0b\u56fe:</p> <p></p> <p>\u6839\u636e\u7cfb\u7edf\u7684\u590d\u6742\u5ea6\u4e0d\u540c,\u5176\u4e2d\u7684\u591a\u5bf9\u591a\u5173\u7cfb\u548c\u4e00\u5bf9\u4e00\u5173\u7cfb\u53ef\u80fd\u4f1a\u6709\u53d8\u5316,</p> <ul> <li> <p>\u5728\u5355\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u5355\u4e00\u7684\u60c5\u51b5\u4e0b,\u7528\u6237\u548c\u7ec4\u7ec7\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7ec4\u7ec7\u548c\u804c\u4f4d\u662f\u4e00\u5bf9\u591a\u5173\u7cfb,\u7528\u6237\u548c\u804c\u4f4d\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7ec4\u7ec7\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u804c\u4f4d\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u7528\u6237\u548c\u7528\u6237\u7ec4\u662f\u591a\u5bf9\u5bf9\u5173\u7cfb,\u7528\u6237\u7ec4\u548c\u89d2\u8272\u662f\u4e00\u5bf9\u4e00\u5173\u7cfb,\u5f53\u7136\u8fd9\u4e9b\u5173\u7cfb\u4e5f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u8fdb\u884c\u8c03\u6574\u3002\u6a21\u578b\u8bbe\u8ba1\u5e76\u4e0d\u662f\u6b7b\u7684,\u5982\u679c\u5c0f\u7cfb\u7edf\u4e0d\u9700\u8981\u7528\u6237\u7ec4,\u8fd9\u5757\u662f\u53ef\u4ee5\u53bb\u6389\u7684\u3002</p> </li> <li> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u5355\u4e00\u7684\u60c5\u51b5\u4e0b,\u5230\u8fd9\u91cc\u6743\u9650\u7cfb\u7edf\u5c31\u4f1a\u53d8\u5f97\u5f88\u590d\u6742,\u8fd9\u91cc\u5c31\u8981\u5f15\u5165\u4e86\u4e00\u4e2a\"\u7cfb\u7edf\"\u6982\u5ff5,\u6b64\u65f6\u7cfb\u7edf\u67b6\u6784\u662f\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf,\u6743\u9650\u7cfb\u7edf\u72ec\u7acb\u51fa\u6765,\u8d1f\u8d23\u6240\u6709\u7684\u7cfb\u7edf\u7684\u6743\u9650\u63a7\u5236,\u5176\u4ed6\u4e1a\u52a1\u7cfb\u7edf\u6bd4\u5982\u5546\u54c1\u4e2d\u5fc3,\u8ba2\u5355\u4e2d\u5fc3,\u7528\u6237\u4e2d\u5fc3,\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u6709\u81ea\u5df1\u7684\u89d2\u8272\u548c\u6743\u9650,\u90a3\u4e48\u6743\u9650\u7cfb\u7edf\u5c31\u53ef\u4ee5\u914d\u7f6e\u5176\u4ed6\u7cfb\u7edf\u7684\u89d2\u8272\u548c\u6743\u9650\u3002</p> </li> <li> <p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e14\u7528\u6237\u7c7b\u578b\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b,\u6bd4\u5982\u6dd8\u5b9d\u7f51,\u5b83\u7684\u7528\u6237\u7c7b\u578b\u5305\u62ec\u5185\u90e8\u7528\u6237,\u5546\u5bb6,\u666e\u901a\u7528\u6237,\u5185\u90e8\u7528\u6237\u767b\u5f55\u591a\u4e2a\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf,\u5546\u5bb6\u767b\u5f55\u5546\u5bb6\u4e2d\u5fc3,\u8fd9\u4e9b\u505a\u6743\u9650\u63a7\u5236,\u5982\u679c\u4f60\u4f5c\u4e3a\u67b6\u6784\u5e08,\u8be5\u5982\u4f55\u6765\u8bbe\u8ba1\u5462?\u5927\u795e\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u7559\u8a00\u4ea4\u6d41\u54e6!</p> </li> </ul>"},{"location":"system-design/perm_design/#4-\u6388\u6743\u6d41\u7a0b","title":"4. \u6388\u6743\u6d41\u7a0b","text":"<p>\u6388\u6743\u5373\u7ed9\u7528\u6237\u6388\u4e88\u89d2\u8272,\u6309\u6d41\u7a0b\u53ef\u5206\u4e3a\u624b\u52a8\u6388\u6743\u548c\u5ba1\u6279\u6388\u6743\u3002\u6743\u9650\u4e2d\u5fc3\u53ef\u540c\u65f6\u914d\u7f6e\u8fd9\u4e24\u79cd,\u53ef\u63d0\u9ad8\u6388\u6743\u7684\u7075\u6d3b\u6027\u3002</p> \u624b\u52a8\u6388\u6743 \u7ba1\u7406\u5458\u767b\u5f55\u6743\u9650\u4e2d\u5fc3\u4e3a\u7528\u6237\u6388\u6743,\u6839\u636e\u5728\u54ea\u4e2a\u9875\u9762\u6388\u6743\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f:\u7ed9\u7528\u6237\u6dfb\u52a0\u89d2\u8272,\u7ed9\u89d2\u8272\u6dfb\u52a0\u7528\u6237\u3002\u7ed9\u7528\u6237\u6dfb\u52a0\u89d2\u8272\u5c31\u662f\u5728\u7528\u6237\u7ba1\u7406\u9875\u9762,\u70b9\u51fb\u67d0\u4e2a\u7528\u6237\u53bb\u6388\u4e88\u89d2\u8272,\u53ef\u4ee5\u4e00\u6b21\u4e3a\u7528\u6237\u6dfb\u52a0\u591a\u4e2a\u89d2\u8272;\u7ed9\u89d2\u8272\u6dfb\u52a0\u7528\u6237\u5c31\u662f\u5728\u89d2\u8272\u7ba1\u7406\u9875\u9762,\u70b9\u51fb\u67d0\u4e2a\u89d2\u8272,\u9009\u62e9\u591a\u4e2a\u7528\u6237,\u5b9e\u73b0\u4e86\u7ed9\u6279\u91cf\u7528\u6237\u6388\u4e88\u89d2\u8272\u7684\u76ee\u7684\u3002 \u5ba1\u6279\u6388\u6743 \u5373\u7528\u6237\u7533\u8bf7\u67d0\u4e2a\u804c\u4f4d\u89d2\u8272,\u90a3\u4e48\u7528\u6237\u901a\u8fc7OA\u6d41\u7a0b\u7533\u8bf7\u8be5\u89d2\u8272,\u7136\u540e\u7531\u4e0a\u7ea7\u5ba1\u6279,\u8be5\u7528\u6237\u5373\u53ef\u62e5\u6709\u8be5\u89d2\u8272,\u4e0d\u9700\u8981\u7cfb\u7edf\u7ba1\u7406\u5458\u624b\u52a8\u6388\u4e88\u3002"},{"location":"system-design/perm_design/#5-\u8868\u7ed3\u6784","title":"5. \u8868\u7ed3\u6784","text":"<p>\u6709\u4e86\u4e0a\u8ff0\u7684\u6743\u9650\u6a21\u578b,\u8bbe\u8ba1\u8868\u7ed3\u6784\u5c31\u4e0d\u96be\u4e86,\u4e0b\u9762\u662f\u591a\u7cfb\u7edf\u4e0b\u7684\u8868\u7ed3\u6784,\u7b80\u5355\u8bbe\u8ba1\u4e0b,\u4e3b\u8981\u63d0\u4f9b\u601d\u8def:</p> <p></p>"},{"location":"system-design/perm_design/#6-\u6743\u9650\u6846\u67b6","title":"6. \u6743\u9650\u6846\u67b6","text":"<ul> <li>Apache Shrio</li> <li>Spring Security</li> </ul> <p>\u5728\u9879\u76ee\u4e2d\u53ef\u4ee5\u91c7\u7528\u5176\u4e2d\u4e00\u79cd\u6846\u67b6,\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u4f1a\u5728\u540e\u9762\u7684\u6587\u7ae0\u4e2d\u8be6\u7ec6\u4ecb\u7ecd.</p>"},{"location":"system-design/perm_design/#7-\u7ed3\u8bed","title":"7. \u7ed3\u8bed","text":"<p>\u6743\u9650\u7cfb\u7edf\u53ef\u4ee5\u8bf4\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u6700\u57fa\u7840,\u540c\u65f6\u4e5f\u53ef\u4ee5\u5f88\u590d\u6742\u7684,\u5728\u5b9e\u9645\u9879\u76ee\u4e2d,\u4f1a\u9047\u5230\u591a\u4e2a\u7cfb\u7edf,\u591a\u4e2a\u7528\u6237\u7c7b\u578b,\u591a\u4e2a\u4f7f\u7528\u573a\u666f,\u8fd9\u5c31\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790,\u4f46\u6700\u6838\u5fc3\u7684RBAC\u6a21\u578b\u662f\u4e0d\u53d8\u7684,\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u57fa\u7840\u4e0a\u8fdb\u884c\u6269\u5c55\u6765\u6ee1\u8db3\u9700\u6c42\u3002</p>"}]}